
sensor_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  000013e2  00001476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000188  008000fa  008000fa  00001510  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000015a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a89  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006bb  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae2  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00003420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054f  00000000  00000000  00003821  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       8:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_8>
      24:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_14>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d4 e0       	ldi	r29, 0x04	; 4
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e2 ee       	ldi	r30, 0xE2	; 226
     16a:	f3 e1       	ldi	r31, 0x13	; 19
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	aa 3f       	cpi	r26, 0xFA	; 250
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	22 e0       	ldi	r18, 0x02	; 2
     17a:	aa ef       	ldi	r26, 0xFA	; 250
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a2 38       	cpi	r26, 0x82	; 130
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 46 03 	call	0x68c	; 0x68c <main>
     18c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <one_wire_receive_byte>:
#include <avr/io.h>
#define _SFR_ASM_COMPAT 1
#define __SFR_OFFSET 0

one_wire_receive_byte:
ldi r27 ,8
     194:	b8 e0       	ldi	r27, 0x08	; 8
clr r26
     196:	aa 27       	eor	r26, r26

00000198 <loop_>:
loop_:
rcall one_wire_receive_bit
     198:	08 d0       	rcall	.+16     	; 0x1aa <one_wire_receive_bit>
lsr r26
     19a:	a6 95       	lsr	r26
sbrc r24 ,0
     19c:	80 fd       	sbrc	r24, 0
ldi r24 ,0x80
     19e:	80 e8       	ldi	r24, 0x80	; 128
or r26 ,r24
     1a0:	a8 2b       	or	r26, r24
dec r27
     1a2:	ba 95       	dec	r27
brne loop_
     1a4:	c9 f7       	brne	.-14     	; 0x198 <loop_>
mov r24 ,r26
     1a6:	8a 2f       	mov	r24, r26
ret
     1a8:	08 95       	ret

000001aa <one_wire_receive_bit>:
; return value: The bit read is stored in the lsb of r24.
; if 0 is read or 1 if 1 is read.
; registers affected: r25:r24
; routines called: wait_usec
one_wire_receive_bit:
sbi DDRA ,4
     1aa:	d4 9a       	sbi	0x1a, 4	; 26
cbi PORTA ,4 ; generate time slot
     1ac:	dc 98       	cbi	0x1b, 4	; 27
ldi r24 ,0x02
     1ae:	82 e0       	ldi	r24, 0x02	; 2
ldi r25 ,0x00
     1b0:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     1b2:	4a d0       	rcall	.+148    	; 0x248 <wait_usec>
cbi DDRA ,4 ; release the line
     1b4:	d4 98       	cbi	0x1a, 4	; 26
cbi PORTA ,4
     1b6:	dc 98       	cbi	0x1b, 4	; 27
ldi r24 ,10 ; wait 10 μs
     1b8:	8a e0       	ldi	r24, 0x0A	; 10
ldi r25 ,0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     1bc:	45 d0       	rcall	.+138    	; 0x248 <wait_usec>
clr r24 ; sample the line
     1be:	88 27       	eor	r24, r24
sbic PINA ,4
     1c0:	cc 99       	sbic	0x19, 4	; 25
ldi r24 ,1
     1c2:	81 e0       	ldi	r24, 0x01	; 1
push r24
     1c4:	8f 93       	push	r24
ldi r24 ,49 ; delay 49 μs to meet the standards
     1c6:	81 e3       	ldi	r24, 0x31	; 49
ldi r25 ,0 ; for a minimum of 60 μsec time slot
     1c8:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec ; and a minimum of 1 μsec recovery time
     1ca:	3e d0       	rcall	.+124    	; 0x248 <wait_usec>
pop r24
     1cc:	8f 91       	pop	r24
ret
     1ce:	08 95       	ret

000001d0 <one_wire_transmit_byte>:
; r24: the byte to be transmitted must be stored here.
; return value: None.
; registers affected: r27:r26 ,r25:r24
; routines called: one_wire_transmit_bit
one_wire_transmit_byte:
mov r26 ,r24
     1d0:	a8 2f       	mov	r26, r24
ldi r27 ,8
     1d2:	b8 e0       	ldi	r27, 0x08	; 8

000001d4 <_one_more_>:
_one_more_:
clr r24
     1d4:	88 27       	eor	r24, r24
sbrc r26 ,0
     1d6:	a0 fd       	sbrc	r26, 0
ldi r24 ,0x01
     1d8:	81 e0       	ldi	r24, 0x01	; 1
rcall one_wire_transmit_bit
     1da:	04 d0       	rcall	.+8      	; 0x1e4 <one_wire_transmit_bit>
lsr r26
     1dc:	a6 95       	lsr	r26
dec r27
     1de:	ba 95       	dec	r27
brne _one_more_
     1e0:	c9 f7       	brne	.-14     	; 0x1d4 <_one_more_>
ret
     1e2:	08 95       	ret

000001e4 <one_wire_transmit_bit>:
; be cleared to transmit 0.
; return value: None.
; registers affected: r25:r24
; routines called: wait_usec
one_wire_transmit_bit:
push r24 ; save r24
     1e4:	8f 93       	push	r24
sbi DDRA ,4
     1e6:	d4 9a       	sbi	0x1a, 4	; 26
cbi PORTA ,4 ; generate time slot
     1e8:	dc 98       	cbi	0x1b, 4	; 27
ldi r24 ,0x02
     1ea:	82 e0       	ldi	r24, 0x02	; 2
ldi r25 ,0x00
     1ec:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     1ee:	2c d0       	rcall	.+88     	; 0x248 <wait_usec>
pop r24 ; output bit
     1f0:	8f 91       	pop	r24
sbrc r24 ,0
     1f2:	80 fd       	sbrc	r24, 0
sbi PORTA ,4
     1f4:	dc 9a       	sbi	0x1b, 4	; 27
sbrs r24 ,0
     1f6:	80 ff       	sbrs	r24, 0
cbi PORTA ,4
     1f8:	dc 98       	cbi	0x1b, 4	; 27
ldi r24 ,58 ; wait 58 μsec for the
     1fa:	8a e3       	ldi	r24, 0x3A	; 58
ldi r25 ,0 ; device to sample the line
     1fc:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec 
     1fe:	24 d0       	rcall	.+72     	; 0x248 <wait_usec>
cbi DDRA ,4 ; recovery time
     200:	d4 98       	cbi	0x1a, 4	; 26
cbi PORTA ,4
     202:	dc 98       	cbi	0x1b, 4	; 27
ldi r24 ,0x01
     204:	81 e0       	ldi	r24, 0x01	; 1
ldi r25 ,0x00
     206:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     208:	1f d0       	rcall	.+62     	; 0x248 <wait_usec>
ret
     20a:	08 95       	ret

0000020c <one_wire_reset>:
; return value: 1 is stored in r24
; if a device is detected, or 0 else.
; registers affected r25:r24
; routines called: wait_usec
one_wire_reset:
sbi DDRA ,4 ; 4 configured for output
     20c:	d4 9a       	sbi	0x1a, 4	; 26
cbi PORTA ,4 ; 480 μsec reset pulse
     20e:	dc 98       	cbi	0x1b, 4	; 27
ldi r24 ,lo8(480)
     210:	80 ee       	ldi	r24, 0xE0	; 224
ldi r25 ,hi8(480)
     212:	91 e0       	ldi	r25, 0x01	; 1
rcall wait_usec
     214:	19 d0       	rcall	.+50     	; 0x248 <wait_usec>
cbi DDRA ,4 ; 4 configured for input
     216:	d4 98       	cbi	0x1a, 4	; 26
cbi PORTA ,4
     218:	dc 98       	cbi	0x1b, 4	; 27
ldi r24 ,100 ; wait 100 μsec for devices
     21a:	84 e6       	ldi	r24, 0x64	; 100
ldi r25 ,0 ; to transmit the presence pulse
     21c:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     21e:	14 d0       	rcall	.+40     	; 0x248 <wait_usec>
in r24 ,PINA ; sample the line
     220:	89 b3       	in	r24, 0x19	; 25
push r24
     222:	8f 93       	push	r24
ldi r24 ,lo8(380) ; wait for 380 μsec
     224:	8c e7       	ldi	r24, 0x7C	; 124
ldi r25 ,hi8(380)
     226:	91 e0       	ldi	r25, 0x01	; 1
rcall wait_usec
     228:	0f d0       	rcall	.+30     	; 0x248 <wait_usec>
pop r25 ; return 0 if no device was
     22a:	9f 91       	pop	r25
clr r24 ; detected or 1 else
     22c:	88 27       	eor	r24, r24
sbrs r25 ,4
     22e:	94 ff       	sbrs	r25, 4
ldi r24 ,0x01
     230:	81 e0       	ldi	r24, 0x01	; 1
ret
     232:	08 95       	ret

00000234 <wait_msec>:

wait_msec:
push r24 ; 2 κύκλοι (0.250 μsec)
     234:	8f 93       	push	r24
push r25 ; 2 κύκλοι
     236:	9f 93       	push	r25
ldi r24 , lo8(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
     238:	86 ee       	ldi	r24, 0xE6	; 230
ldi r25 , hi8(998) ; 1 κύκλος (0.125 μsec)
     23a:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
     23c:	05 d0       	rcall	.+10     	; 0x248 <wait_usec>
pop r25 ; 2 κύκλοι (0.250 μsec)
     23e:	9f 91       	pop	r25
pop r24 ; 2 κύκλοι
     240:	8f 91       	pop	r24
sbiw r24 , 1 ; 2 κύκλοι
     242:	01 97       	sbiw	r24, 0x01	; 1
brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     244:	b9 f7       	brne	.-18     	; 0x234 <wait_msec>
ret ; 4 κύκλοι (0.500 μsec)
     246:	08 95       	ret

00000248 <wait_usec>:

wait_usec:
sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
     248:	01 97       	sbiw	r24, 0x01	; 1
	...
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     252:	d1 f7       	brne	.-12     	; 0x248 <wait_usec>
ret ; 4 κύκλοι (0.500 μsec)
     254:	08 95       	ret

00000256 <readDS1820>:

.global readDS1820
readDS1820:
rcall one_wire_reset ;returns 0 if there is no connected device
     256:	da df       	rcall	.-76     	; 0x20c <one_wire_reset>
sbrs r24, 0
     258:	80 ff       	sbrs	r24, 0
jmp nodevicedetected
     25a:	0c 94 45 01 	jmp	0x28a	; 0x28a <nodevicedetected>

ldi r24, 0xCC   ; we know there is only one device
     25e:	8c ec       	ldi	r24, 0xCC	; 204
rcall one_wire_transmit_byte
     260:	b7 df       	rcall	.-146    	; 0x1d0 <one_wire_transmit_byte>
ldi r24, 0x44   ; start measuring temperature
     262:	84 e4       	ldi	r24, 0x44	; 68
rcall one_wire_transmit_byte
     264:	b5 df       	rcall	.-150    	; 0x1d0 <one_wire_transmit_byte>

00000266 <notdone>:

notdone:
rcall one_wire_receive_bit  ; LSB of r24 = 1 if read is complete
     266:	a1 df       	rcall	.-190    	; 0x1aa <one_wire_receive_bit>
sbrs r24, 0
     268:	80 ff       	sbrs	r24, 0
jmp notdone
     26a:	0c 94 33 01 	jmp	0x266	; 0x266 <notdone>

rcall one_wire_reset
     26e:	ce df       	rcall	.-100    	; 0x20c <one_wire_reset>
sbrs r24, 0
     270:	80 ff       	sbrs	r24, 0
jmp nodevicedetected
     272:	0c 94 45 01 	jmp	0x28a	; 0x28a <nodevicedetected>
ldi r24, 0xCC   ; we know there is only one device
     276:	8c ec       	ldi	r24, 0xCC	; 204
rcall one_wire_transmit_byte
     278:	ab df       	rcall	.-170    	; 0x1d0 <one_wire_transmit_byte>
ldi r24, 0xBE   ; read 16bit temperature measurement
     27a:	8e eb       	ldi	r24, 0xBE	; 190
rcall one_wire_transmit_byte
     27c:	a9 df       	rcall	.-174    	; 0x1d0 <one_wire_transmit_byte>
rcall one_wire_receive_byte  ; read 8 LSB 
     27e:	8a df       	rcall	.-236    	; 0x194 <one_wire_receive_byte>
push r24
     280:	8f 93       	push	r24
rcall one_wire_receive_byte  ; read 8 MSB 
     282:	88 df       	rcall	.-240    	; 0x194 <one_wire_receive_byte>
mov r25, r24
     284:	98 2f       	mov	r25, r24
pop r24
     286:	8f 91       	pop	r24
ret
     288:	08 95       	ret

0000028a <nodevicedetected>:
;rol r24 ; bit 7-> sign, bit6-0 -> abs(temperature value) 
;ldi r25, 0x00
;ret

nodevicedetected:
ldi r25, 0x80
     28a:	90 e8       	ldi	r25, 0x80	; 128
ldi r24, 0x00
     28c:	80 e0       	ldi	r24, 0x00	; 0
ret
     28e:	08 95       	ret

00000290 <lcd_init_sim>:
#define _SFR_ASM_COMPAT 1
#define __SFR_OFFSET 0

.global lcd_init_sim
lcd_init_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     290:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     292:	9f 93       	push	r25
ldi r24, 40 ; Όταν ο ελεγκτής της lcd τροφοδοτείται με
     294:	88 e2       	ldi	r24, 0x28	; 40
ldi r25, 0 ; ρεύμα εκτελεί την δική του αρχικοποίηση.
     296:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_msec ; Αναμονή 40 msec μέχρι αυτή να ολοκληρωθεί.
     298:	6c d0       	rcall	.+216    	; 0x372 <wait_msec>
ldi r24, 0x30
     29a:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     29c:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     29e:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     2a0:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     2a2:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     2a6:	6f d0       	rcall	.+222    	; 0x386 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     2a8:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     2aa:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     2ac:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     2ae:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     2b0:	6a d0       	rcall	.+212    	; 0x386 <wait_usec>
pop r25
     2b2:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     2b4:	8f 91       	pop	r24
ldi r24, 0x30
     2b6:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     2b8:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     2ba:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     2bc:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     2be:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     2c2:	61 d0       	rcall	.+194    	; 0x386 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     2c4:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     2c6:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     2c8:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     2ca:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     2cc:	5c d0       	rcall	.+184    	; 0x386 <wait_usec>
pop r25
     2ce:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     2d0:	8f 91       	pop	r24
ldi r24,0x20 ; αλλαγή σε 4-bit mode
     2d2:	80 e2       	ldi	r24, 0x20	; 32
out PORTD, r24
     2d4:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     2d6:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     2d8:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     2da:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     2de:	53 d0       	rcall	.+166    	; 0x386 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     2e0:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     2e2:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     2e4:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     2e6:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     2e8:	4e d0       	rcall	.+156    	; 0x386 <wait_usec>
pop r25
     2ea:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     2ec:	8f 91       	pop	r24
ldi r24,0x28 ; επιλογή χαρακτήρων μεγέθους 5x8 κουκίδων
     2ee:	88 e2       	ldi	r24, 0x28	; 40
rcall lcd_command_sim ; και εμφάνιση δύο γραμμών στην οθόνη
     2f0:	0e d0       	rcall	.+28     	; 0x30e <lcd_command_sim>
ldi r24,0x0c ; ενεργοποίηση της οθόνης, απόκρυψη του κέρσορα
     2f2:	8c e0       	ldi	r24, 0x0C	; 12
rcall lcd_command_sim
     2f4:	0c d0       	rcall	.+24     	; 0x30e <lcd_command_sim>
ldi r24,0x01 ; καθαρισμός της οθόνης
     2f6:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     2f8:	0a d0       	rcall	.+20     	; 0x30e <lcd_command_sim>
ldi r24, lo8(1530)
     2fa:	8a ef       	ldi	r24, 0xFA	; 250
ldi r25, hi8(1530)
     2fc:	95 e0       	ldi	r25, 0x05	; 5
rcall wait_usec
     2fe:	43 d0       	rcall	.+134    	; 0x386 <wait_usec>
ldi r24 ,0x06 ; ενεργοποίηση αυτόματης αύξησης κατά 1 της διεύθυνσης
     300:	86 e0       	ldi	r24, 0x06	; 6
rcall lcd_command_sim ; που είναι αποθηκευμένη στον μετρητή διευθύνσεων και
     302:	05 d0       	rcall	.+10     	; 0x30e <lcd_command_sim>
; απενεργοποίηση της ολίσθησης ολόκληρης της οθόνης
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     304:	9f 91       	pop	r25
pop r24
     306:	8f 91       	pop	r24
ret
     308:	08 95       	ret

0000030a <lcd_clear>:


.global lcd_clear
lcd_clear:
ldi r24,0x01 ; καθαρισμός της οθόνης
     30a:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     30c:	00 d0       	rcall	.+0      	; 0x30e <lcd_command_sim>

0000030e <lcd_command_sim>:

lcd_command_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     30e:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     310:	9f 93       	push	r25
cbi PORTD, PD2 ; επιλογή του καταχωρητή εντολών (PD2=0)
     312:	92 98       	cbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή της εντολής και αναμονή 39μsec
     314:	06 d0       	rcall	.+12     	; 0x322 <write_2_nibbles_sim>
ldi r24, 39 ; για την ολοκλήρωση της εκτέλεσης της από τον ελεγκτή της lcd.
     316:	87 e2       	ldi	r24, 0x27	; 39
ldi r25, 0 ; ΣΗΜ.: υπάρχουν δύο εντολές, οι clear display και return home,
     318:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec ; που απαιτούν σημαντικά μεγαλύτερο χρονικό διάστημα.
     31a:	35 d0       	rcall	.+106    	; 0x386 <wait_usec>
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     31c:	9f 91       	pop	r25
pop r24
     31e:	8f 91       	pop	r24
ret
     320:	08 95       	ret

00000322 <write_2_nibbles_sim>:

write_2_nibbles_sim:
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     322:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     324:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     326:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     328:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     32a:	2d d0       	rcall	.+90     	; 0x386 <wait_usec>
pop r25
     32c:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     32e:	8f 91       	pop	r24
push r24 ; στέλνει τα 4 MSB
     330:	8f 93       	push	r24
in r25, PIND ; διαβάζονται τα 4 LSB και τα ξαναστέλνουμε
     332:	90 b3       	in	r25, 0x10	; 16
andi r25, 0x0f ; για να μην χαλάσουμε την όποια προηγούμενη κατάσταση
     334:	9f 70       	andi	r25, 0x0F	; 15
andi r24, 0xf0 ; απομονώνονται τα 4 MSB και
     336:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25 ; συνδυάζονται με τα προϋπάρχοντα 4 LSB
     338:	89 0f       	add	r24, r25
out PORTD, r24 ; και δίνονται στην έξοδο
     33a:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; δημιουργείται παλμός Enable στον ακροδέκτη PD3
     33c:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3 ; PD3=1 και μετά PD3=0
     33e:	93 98       	cbi	0x12, 3	; 18
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     340:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     342:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     344:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     346:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     348:	1e d0       	rcall	.+60     	; 0x386 <wait_usec>
pop r25
     34a:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     34c:	8f 91       	pop	r24
pop r24 ; στέλνει τα 4 LSB. Ανακτάται το byte.
     34e:	8f 91       	pop	r24
swap r24 ; εναλλάσσονται τα 4 MSB με τα 4 LSB
     350:	82 95       	swap	r24
andi r24 ,0xf0 ; που με την σειρά τους αποστέλλονται
     352:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25
     354:	89 0f       	add	r24, r25
out PORTD, r24
     356:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; Νέος παλμός Enable
     358:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     35a:	93 98       	cbi	0x12, 3	; 18
ret
     35c:	08 95       	ret

0000035e <lcd_data_sim>:

lcd_data_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     35e:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     360:	9f 93       	push	r25
sbi PORTD, PD2 ; επιλογή του καταχωρητή δεδομένων (PD2=1)
     362:	92 9a       	sbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή του byte
     364:	de df       	rcall	.-68     	; 0x322 <write_2_nibbles_sim>
ldi r24 ,43 ; αναμονή 43μsec μέχρι να ολοκληρωθεί η λήψη
     366:	8b e2       	ldi	r24, 0x2B	; 43
ldi r25 ,0 ; των δεδομένων από τον ελεγκτή της lcd
     368:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     36a:	0d d0       	rcall	.+26     	; 0x386 <wait_usec>
pop r25 ;επανάφερε τους καταχωρητές r25:r24
     36c:	9f 91       	pop	r25
pop r24
     36e:	8f 91       	pop	r24
ret
     370:	08 95       	ret

00000372 <wait_msec>:

wait_msec:
push r24 ; 2 κύκλοι (0.250 μsec)
     372:	8f 93       	push	r24
push r25 ; 2 κύκλοι
     374:	9f 93       	push	r25
ldi r24 , lo8(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
     376:	86 ee       	ldi	r24, 0xE6	; 230
ldi r25 , hi8(998) ; 1 κύκλος (0.125 μsec)
     378:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
     37a:	05 d0       	rcall	.+10     	; 0x386 <wait_usec>
pop r25 ; 2 κύκλοι (0.250 μsec)
     37c:	9f 91       	pop	r25
pop r24 ; 2 κύκλοι
     37e:	8f 91       	pop	r24
sbiw r24 , 1 ; 2 κύκλοι
     380:	01 97       	sbiw	r24, 0x01	; 1
brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     382:	b9 f7       	brne	.-18     	; 0x372 <wait_msec>
ret ; 4 κύκλοι (0.500 μsec)
     384:	08 95       	ret

00000386 <wait_usec>:

wait_usec:
sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
     386:	01 97       	sbiw	r24, 0x01	; 1
	...
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     390:	d1 f7       	brne	.-12     	; 0x386 <wait_usec>
ret ; 4 κύκλοι (0.500 μsec)
     392:	08 95       	ret

00000394 <print>:


.global print
print:
     394:	e4 df       	rcall	.-56     	; 0x35e <lcd_data_sim>

00000396 <usart_init>:
        getChar(); //flush success out of read buffer
}
*/

void usart_init(unsigned int ubrr){
	UCSRA=0;
     396:	1b b8       	out	0x0b, r1	; 11
	UCSRB=(1<<RXEN)|(1<<TXEN);
     398:	28 e1       	ldi	r18, 0x18	; 24
     39a:	2a b9       	out	0x0a, r18	; 10
	UBRRH=(unsigned char)(ubrr>>8);
     39c:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char)ubrr;
     39e:	89 b9       	out	0x09, r24	; 9
	UCSRC=(1 << URSEL) | (3 << UCSZ0);
     3a0:	86 e8       	ldi	r24, 0x86	; 134
     3a2:	80 bd       	out	0x20, r24	; 32
     3a4:	08 95       	ret

000003a6 <usart_transmit>:
	return;
}

void usart_transmit(uint8_t data){
	while(!(UCSRA&(1<<UDRE)));
     3a6:	5d 9b       	sbis	0x0b, 5	; 11
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <usart_transmit>
	UDR=data;
     3aa:	8c b9       	out	0x0c, r24	; 12
     3ac:	08 95       	ret

000003ae <usart_receive>:
}

uint8_t usart_receive(){
	while(!(UCSRA&(1<<RXC)));
     3ae:	5f 9b       	sbis	0x0b, 7	; 11
     3b0:	fe cf       	rjmp	.-4      	; 0x3ae <usart_receive>
	return UDR;
     3b2:	8c b1       	in	r24, 0x0c	; 12
}
     3b4:	08 95       	ret

000003b6 <serialWrite>:

void serialWrite(char c[]) {
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	ec 01       	movw	r28, r24
	for(uint8_t i=0; i<strlen(c); ++i) {
     3be:	10 e0       	ldi	r17, 0x00	; 0
     3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <serialWrite+0x1a>
		usart_transmit(c[i]); //transmit command one character at a time
     3c2:	fe 01       	movw	r30, r28
     3c4:	e8 0f       	add	r30, r24
     3c6:	f9 1f       	adc	r31, r25
     3c8:	80 81       	ld	r24, Z
     3ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <usart_transmit>
	while(!(UCSRA&(1<<RXC)));
	return UDR;
}

void serialWrite(char c[]) {
	for(uint8_t i=0; i<strlen(c); ++i) {
     3ce:	1f 5f       	subi	r17, 0xFF	; 255
     3d0:	81 2f       	mov	r24, r17
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	fe 01       	movw	r30, r28
     3d6:	01 90       	ld	r0, Z+
     3d8:	00 20       	and	r0, r0
     3da:	e9 f7       	brne	.-6      	; 0x3d6 <serialWrite+0x20>
     3dc:	31 97       	sbiw	r30, 0x01	; 1
     3de:	ec 1b       	sub	r30, r28
     3e0:	fd 0b       	sbc	r31, r29
     3e2:	8e 17       	cp	r24, r30
     3e4:	9f 07       	cpc	r25, r31
     3e6:	68 f3       	brcs	.-38     	; 0x3c2 <serialWrite+0xc>
		usart_transmit(c[i]); //transmit command one character at a time
		//print(c[i]); //debug
	}
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	08 95       	ret

000003f0 <sendCommand>:

void sendCommand(char command[]) {
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	8c 01       	movw	r16, r24
	serialWrite(command);
     3fa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <serialWrite>
	unsigned char c;
	
	c=usart_receive();
     3fe:	0e 94 d7 01 	call	0x3ae	; 0x3ae <usart_receive>
	//PORTB=0xFF; //debug -- never reaches this part
	//print(c); //debug
	while(c!='S'){ //wait until "success" reply from esp
     402:	13 c0       	rjmp	.+38     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
		if(c=='F') { //if command execution failed re-transmit it
     404:	86 34       	cpi	r24, 0x46	; 70
     406:	79 f4       	brne	.+30     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
     408:	04 c0       	rjmp	.+8      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
			for(int i=0; i<5; ++i)
				usart_receive(); //flush fail out of read buffer
     40a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <usart_receive>
	c=usart_receive();
	//PORTB=0xFF; //debug -- never reaches this part
	//print(c); //debug
	while(c!='S'){ //wait until "success" reply from esp
		if(c=='F') { //if command execution failed re-transmit it
			for(int i=0; i<5; ++i)
     40e:	21 96       	adiw	r28, 0x01	; 1
     410:	02 c0       	rjmp	.+4      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     412:	c0 e0       	ldi	r28, 0x00	; 0
     414:	d0 e0       	ldi	r29, 0x00	; 0
     416:	c5 30       	cpi	r28, 0x05	; 5
     418:	d1 05       	cpc	r29, r1
     41a:	bc f3       	brlt	.-18     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
				usart_receive(); //flush fail out of read buffer
			PORTB=0xFF;
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	88 bb       	out	0x18, r24	; 24
			serialWrite(command);
     420:	c8 01       	movw	r24, r16
     422:	0e 94 db 01 	call	0x3b6	; 0x3b6 <serialWrite>
		}
		c=usart_receive();
     426:	0e 94 d7 01 	call	0x3ae	; 0x3ae <usart_receive>
	unsigned char c;
	
	c=usart_receive();
	//PORTB=0xFF; //debug -- never reaches this part
	//print(c); //debug
	while(c!='S'){ //wait until "success" reply from esp
     42a:	83 35       	cpi	r24, 0x53	; 83
     42c:	59 f7       	brne	.-42     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
     42e:	c0 e0       	ldi	r28, 0x00	; 0
     430:	d0 e0       	ldi	r29, 0x00	; 0
     432:	03 c0       	rjmp	.+6      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
		c=usart_receive();
	}
	//PORTB=0xFF;
	for(int i=0; i<8; ++i)
    //print(c);
		usart_receive(); //flush success out of read buffer
     434:	0e 94 d7 01 	call	0x3ae	; 0x3ae <usart_receive>
			serialWrite(command);
		}
		c=usart_receive();
	}
	//PORTB=0xFF;
	for(int i=0; i<8; ++i)
     438:	21 96       	adiw	r28, 0x01	; 1
     43a:	c8 30       	cpi	r28, 0x08	; 8
     43c:	d1 05       	cpc	r29, r1
     43e:	d4 f3       	brlt	.-12     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
    //print(c);
		usart_receive(); //flush success out of read buffer
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <__vector_8>:


ISR(TIMER1_OVF_vect) {
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
	
	while((UCSRA & 0x80) == 1)
     470:	8b b1       	in	r24, 0x0b	; 11
		usart_receive(); //flush possible "Served Client" out of the system before sending new data
	
	PORTB=0xFF;
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	88 bb       	out	0x18, r24	; 24
    if(!first) {
     476:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     47a:	81 11       	cpse	r24, r1
     47c:	3b c0       	rjmp	.+118    	; 0x4f4 <__stack+0x95>
        /*itoa(moist_sensor, conv_buffer, 10); //convert value read to string to send it to ESP
        strcpy(string_to_send, "ESP:sensorValue:\"Moist_Sensor\"["); //create the string to send to set the sensor value
        strcat(string_to_send, conv_buffer);
        strcat(string_to_send, "]\n");*/
        sprintf(string_to_send, "ESP:sensorValue:\"Moist_Sensor\"[%d]\n", moist_sensor);
     47e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <moist_sensor+0x1>
     482:	8f 93       	push	r24
     484:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <moist_sensor>
     488:	8f 93       	push	r24
     48a:	81 e6       	ldi	r24, 0x61	; 97
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	ca ef       	ldi	r28, 0xFA	; 250
     494:	d0 e0       	ldi	r29, 0x00	; 0
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	0e 94 6f 09 	call	0x12de	; 0x12de <sprintf>

        sendCommand(string_to_send); //send command to set the value of the moisture sensor
     49e:	ce 01       	movw	r24, r28
     4a0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sendCommand>
        /*itoa(tmp_sensor, conv_buffer, 10);
        strcpy(string_to_send, "ESP:sensorValue:\"Tmp_Sensor\"[");
        strcat(string_to_send, conv_buffer);
        strcat(string_to_send, "]\n");*/

        sprintf(string_to_send, "ESP:sensorValue:\"Tmp_Sensor\"[%.1f]\n", tmp_sensor/2.0);
     4a4:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <tmp_sensor>
     4a8:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <tmp_sensor+0x1>
     4ac:	07 2e       	mov	r0, r23
     4ae:	00 0c       	add	r0, r0
     4b0:	88 0b       	sbc	r24, r24
     4b2:	99 0b       	sbc	r25, r25
     4b4:	0e 94 98 03 	call	0x730	; 0x730 <__floatsisf>
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	5f e3       	ldi	r21, 0x3F	; 63
     4c0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
     4c4:	9f 93       	push	r25
     4c6:	8f 93       	push	r24
     4c8:	7f 93       	push	r23
     4ca:	6f 93       	push	r22
     4cc:	85 e8       	ldi	r24, 0x85	; 133
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	9f 93       	push	r25
     4d2:	8f 93       	push	r24
     4d4:	df 93       	push	r29
     4d6:	cf 93       	push	r28
     4d8:	0e 94 6f 09 	call	0x12de	; 0x12de <sprintf>
        sendCommand(string_to_send); //send command to set the value of the temperature sensor
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sendCommand>
     4e2:	8d b7       	in	r24, 0x3d	; 61
     4e4:	9e b7       	in	r25, 0x3e	; 62
     4e6:	0e 96       	adiw	r24, 0x0e	; 14
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	9e bf       	out	0x3e, r25	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	8d bf       	out	0x3d, r24	; 61
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <__stack+0x99>
    }
    else
        first=false;
     4f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    ADMUX = 0x40; // Vref: Vcc(5V for easyAVR6) and analog input from PINA0 (moisture sensor)
     4f8:	80 e4       	ldi	r24, 0x40	; 64
     4fa:	87 b9       	out	0x07, r24	; 7
    ADCSRA = ADCSRA | 0x40; // ADC Enable, ADC Interrupt Enable and f = CLK/128
     4fc:	86 b1       	in	r24, 0x06	; 6
     4fe:	80 64       	ori	r24, 0x40	; 64
     500:	86 b9       	out	0x06, r24	; 6

    TCNT1 = 3036;
     502:	8c ed       	ldi	r24, 0xDC	; 220
     504:	9b e0       	ldi	r25, 0x0B	; 11
     506:	9d bd       	out	0x2d, r25	; 45
     508:	8c bd       	out	0x2c, r24	; 44
}
     50a:	ff 91       	pop	r31
     50c:	ef 91       	pop	r30
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	bf 91       	pop	r27
     514:	af 91       	pop	r26
     516:	9f 91       	pop	r25
     518:	8f 91       	pop	r24
     51a:	7f 91       	pop	r23
     51c:	6f 91       	pop	r22
     51e:	5f 91       	pop	r21
     520:	4f 91       	pop	r20
     522:	3f 91       	pop	r19
     524:	2f 91       	pop	r18
     526:	0f 90       	pop	r0
     528:	0f be       	out	0x3f, r0	; 63
     52a:	0f 90       	pop	r0
     52c:	1f 90       	pop	r1
     52e:	18 95       	reti

00000530 <__vector_14>:

ISR(ADC_vect) {
     530:	1f 92       	push	r1
     532:	0f 92       	push	r0
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	0f 92       	push	r0
     538:	11 24       	eor	r1, r1
     53a:	2f 93       	push	r18
     53c:	3f 93       	push	r19
     53e:	4f 93       	push	r20
     540:	5f 93       	push	r21
     542:	6f 93       	push	r22
     544:	7f 93       	push	r23
     546:	8f 93       	push	r24
     548:	9f 93       	push	r25
     54a:	af 93       	push	r26
     54c:	bf 93       	push	r27
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ef 93       	push	r30
     554:	ff 93       	push	r31
    moist_sensor = ADCW;
     556:	84 b1       	in	r24, 0x04	; 4
     558:	95 b1       	in	r25, 0x05	; 5
     55a:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <moist_sensor+0x1>
     55e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <moist_sensor>
    tmp_sensor = readDS1820();
     562:	0e 94 2b 01 	call	0x256	; 0x256 <readDS1820>
     566:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <tmp_sensor+0x1>
     56a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmp_sensor>
    if((tmp_sensor&0xFF00)==0xFF00){ //if temperature is negative convert it to the corresponding value
     56e:	9c 01       	movw	r18, r24
     570:	22 27       	eor	r18, r18
     572:	21 15       	cp	r18, r1
     574:	3f 4f       	sbci	r19, 0xFF	; 255
     576:	51 f4       	brne	.+20     	; 0x58c <__vector_14+0x5c>
        tmp_sensor--;
     578:	01 97       	sbiw	r24, 0x01	; 1
        tmp_sensor = tmp_sensor&0x00FF;
     57a:	99 27       	eor	r25, r25
        tmp_sensor = tmp_sensor^0x00FF;
     57c:	80 95       	com	r24
        tmp_sensor = -tmp_sensor;
     57e:	91 95       	neg	r25
     580:	81 95       	neg	r24
     582:	91 09       	sbc	r25, r1
     584:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <tmp_sensor+0x1>
     588:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmp_sensor>
    }
    
    //for debugging
	lcd_clear();
     58c:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_clear>
	
	PORTB=0xFF;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	88 bb       	out	0x18, r24	; 24
	
    sprintf(conv_buffer, "%d", moist_sensor);
     594:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <moist_sensor+0x1>
     598:	8f 93       	push	r24
     59a:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <moist_sensor>
     59e:	8f 93       	push	r24
     5a0:	89 ea       	ldi	r24, 0xA9	; 169
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	8c e7       	ldi	r24, 0x7C	; 124
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	0e 94 6f 09 	call	0x12de	; 0x12de <sprintf>
    for(int m=0; m<strlen(conv_buffer); ++m)
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	c0 e0       	ldi	r28, 0x00	; 0
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
     5c4:	07 c0       	rjmp	.+14     	; 0x5d4 <__vector_14+0xa4>
        print(conv_buffer[m]);
     5c6:	fe 01       	movw	r30, r28
     5c8:	e4 58       	subi	r30, 0x84	; 132
     5ca:	fd 4f       	sbci	r31, 0xFD	; 253
     5cc:	80 81       	ld	r24, Z
     5ce:	0e 94 ca 01 	call	0x394	; 0x394 <print>
	lcd_clear();
	
	PORTB=0xFF;
	
    sprintf(conv_buffer, "%d", moist_sensor);
    for(int m=0; m<strlen(conv_buffer); ++m)
     5d2:	21 96       	adiw	r28, 0x01	; 1
     5d4:	ec e7       	ldi	r30, 0x7C	; 124
     5d6:	f2 e0       	ldi	r31, 0x02	; 2
     5d8:	01 90       	ld	r0, Z+
     5da:	00 20       	and	r0, r0
     5dc:	e9 f7       	brne	.-6      	; 0x5d8 <__vector_14+0xa8>
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	ec 57       	subi	r30, 0x7C	; 124
     5e2:	f2 40       	sbci	r31, 0x02	; 2
     5e4:	ce 17       	cp	r28, r30
     5e6:	df 07       	cpc	r29, r31
     5e8:	70 f3       	brcs	.-36     	; 0x5c6 <__vector_14+0x96>
        print(conv_buffer[m]);

    print('\n');
     5ea:	8a e0       	ldi	r24, 0x0A	; 10
     5ec:	0e 94 ca 01 	call	0x394	; 0x394 <print>

    sprintf(conv_buffer, "%.1f", tmp_sensor/2.0);
     5f0:	60 91 7a 01 	lds	r22, 0x017A	; 0x80017a <tmp_sensor>
     5f4:	70 91 7b 01 	lds	r23, 0x017B	; 0x80017b <tmp_sensor+0x1>
     5f8:	07 2e       	mov	r0, r23
     5fa:	00 0c       	add	r0, r0
     5fc:	88 0b       	sbc	r24, r24
     5fe:	99 0b       	sbc	r25, r25
     600:	0e 94 98 03 	call	0x730	; 0x730 <__floatsisf>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	5f e3       	ldi	r21, 0x3F	; 63
     60c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__mulsf3>
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	7f 93       	push	r23
     616:	6f 93       	push	r22
     618:	8c ea       	ldi	r24, 0xAC	; 172
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	8c e7       	ldi	r24, 0x7C	; 124
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	9f 93       	push	r25
     626:	8f 93       	push	r24
     628:	0e 94 6f 09 	call	0x12de	; 0x12de <sprintf>
    for(int m=0; m<strlen(conv_buffer); ++m)
     62c:	8d b7       	in	r24, 0x3d	; 61
     62e:	9e b7       	in	r25, 0x3e	; 62
     630:	08 96       	adiw	r24, 0x08	; 8
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	9e bf       	out	0x3e, r25	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	8d bf       	out	0x3d, r24	; 61
     63c:	c0 e0       	ldi	r28, 0x00	; 0
     63e:	d0 e0       	ldi	r29, 0x00	; 0
     640:	07 c0       	rjmp	.+14     	; 0x650 <__vector_14+0x120>
        print(conv_buffer[m]);
     642:	fe 01       	movw	r30, r28
     644:	e4 58       	subi	r30, 0x84	; 132
     646:	fd 4f       	sbci	r31, 0xFD	; 253
     648:	80 81       	ld	r24, Z
     64a:	0e 94 ca 01 	call	0x394	; 0x394 <print>
        print(conv_buffer[m]);

    print('\n');

    sprintf(conv_buffer, "%.1f", tmp_sensor/2.0);
    for(int m=0; m<strlen(conv_buffer); ++m)
     64e:	21 96       	adiw	r28, 0x01	; 1
     650:	ec e7       	ldi	r30, 0x7C	; 124
     652:	f2 e0       	ldi	r31, 0x02	; 2
     654:	01 90       	ld	r0, Z+
     656:	00 20       	and	r0, r0
     658:	e9 f7       	brne	.-6      	; 0x654 <__vector_14+0x124>
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	ec 57       	subi	r30, 0x7C	; 124
     65e:	f2 40       	sbci	r31, 0x02	; 2
     660:	ce 17       	cp	r28, r30
     662:	df 07       	cpc	r29, r31
     664:	70 f3       	brcs	.-36     	; 0x642 <__vector_14+0x112>
        print(conv_buffer[m]);
    //debugging end

}
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	bf 91       	pop	r27
     670:	af 91       	pop	r26
     672:	9f 91       	pop	r25
     674:	8f 91       	pop	r24
     676:	7f 91       	pop	r23
     678:	6f 91       	pop	r22
     67a:	5f 91       	pop	r21
     67c:	4f 91       	pop	r20
     67e:	3f 91       	pop	r19
     680:	2f 91       	pop	r18
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <main>:


int main(){

    first = true;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    moist_sensor=tmp_sensor=0;
     692:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <tmp_sensor+0x1>
     696:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <tmp_sensor>
     69a:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <moist_sensor+0x1>
     69e:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <moist_sensor>

    DDRA = 0x00; // Port A input
     6a2:	1a ba       	out	0x1a, r1	; 26
	DDRB= 0xFF;
     6a4:	cf ef       	ldi	r28, 0xFF	; 255
     6a6:	c7 bb       	out	0x17, r28	; 23
	
	DDRD=0xFF; //for debugging for lcd
     6a8:	c1 bb       	out	0x11, r28	; 17
    //UCSRB = (1 << TXEN) | (1 << TXCIE) | (1 << RXEN) | (1 << RXCIE);
    //UCSRC = (1 << UCSZ1) | (1 << UCSZ0); //Char size(8 bits)
	
	

    TCCR1B = 0x05; //CK/1024
     6aa:	85 e0       	ldi	r24, 0x05	; 5
     6ac:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 3036; //8s between interrupts
     6ae:	8c ed       	ldi	r24, 0xDC	; 220
     6b0:	9b e0       	ldi	r25, 0x0B	; 11
     6b2:	9d bd       	out	0x2d, r25	; 45
     6b4:	8c bd       	out	0x2c, r24	; 44
	TIMSK = 0x04; //enable overflow interrupt for TCNT1
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 bf       	out	0x39, r24	; 57

    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADIE); //ADC enable, frequency = CLK/128 and enable interrupts
     6ba:	8f e8       	ldi	r24, 0x8F	; 143
     6bc:	86 b9       	out	0x06, r24	; 6

    lcd_init_sim();
     6be:	0e 94 48 01 	call	0x290	; 0x290 <lcd_init_sim>
	
	
    
    //strcpy(string_to_send, "ESP:restart\n");
    //sendCommand(string_to_send);
    usart_init(MYUBRR);
     6c2:	83 e3       	ldi	r24, 0x33	; 51
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 cb 01 	call	0x396	; 0x396 <usart_init>
	usart_transmit('\n');
     6ca:	8a e0       	ldi	r24, 0x0A	; 10
     6cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <usart_transmit>
    //strcpy(string_to_send, "ESP:ssid:\"Sens_Board1\"\n");
    //sendCommand(string_to_send);
	
	//PORTB=0xFF;

    strcpy(string_to_send, "ESP:addSensor: \"Moist_Sensor\"\n");
     6d0:	8f e1       	ldi	r24, 0x1F	; 31
     6d2:	e1 eb       	ldi	r30, 0xB1	; 177
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	aa ef       	ldi	r26, 0xFA	; 250
     6d8:	b0 e0       	ldi	r27, 0x00	; 0
     6da:	01 90       	ld	r0, Z+
     6dc:	0d 92       	st	X+, r0
     6de:	8a 95       	dec	r24
     6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x4e>
    sendCommand(string_to_send);
     6e2:	8a ef       	ldi	r24, 0xFA	; 250
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sendCommand>
	
	PORTB=0xFF;
     6ea:	c8 bb       	out	0x18, r28	; 24

    strcpy(string_to_send, "ESP:addSensor: \"Tmp_Sensor\"\n");
     6ec:	8d e1       	ldi	r24, 0x1D	; 29
     6ee:	e0 ed       	ldi	r30, 0xD0	; 208
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	aa ef       	ldi	r26, 0xFA	; 250
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	01 90       	ld	r0, Z+
     6f8:	0d 92       	st	X+, r0
     6fa:	8a 95       	dec	r24
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <main+0x6a>
    sendCommand(string_to_send);
     6fe:	8a ef       	ldi	r24, 0xFA	; 250
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sendCommand>

	PORTB=0xFF;
     706:	c8 bb       	out	0x18, r28	; 24

    strcpy(string_to_send, "ESP:APStart\n");
     708:	8d e0       	ldi	r24, 0x0D	; 13
     70a:	ed ee       	ldi	r30, 0xED	; 237
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	aa ef       	ldi	r26, 0xFA	; 250
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	01 90       	ld	r0, Z+
     714:	0d 92       	st	X+, r0
     716:	8a 95       	dec	r24
     718:	e1 f7       	brne	.-8      	; 0x712 <main+0x86>
    sendCommand(string_to_send);
     71a:	8a ef       	ldi	r24, 0xFA	; 250
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <sendCommand>
	
	PORTB=0xFF;
     722:	c8 bb       	out	0x18, r28	; 24

    

    sei();
     724:	78 94       	sei
    while(1){PORTB=0xFF;}
     726:	8f ef       	ldi	r24, 0xFF	; 255
     728:	88 bb       	out	0x18, r24	; 24
     72a:	fd cf       	rjmp	.-6      	; 0x726 <main+0x9a>

0000072c <__floatunsisf>:
     72c:	e8 94       	clt
     72e:	09 c0       	rjmp	.+18     	; 0x742 <__floatsisf+0x12>

00000730 <__floatsisf>:
     730:	97 fb       	bst	r25, 7
     732:	3e f4       	brtc	.+14     	; 0x742 <__floatsisf+0x12>
     734:	90 95       	com	r25
     736:	80 95       	com	r24
     738:	70 95       	com	r23
     73a:	61 95       	neg	r22
     73c:	7f 4f       	sbci	r23, 0xFF	; 255
     73e:	8f 4f       	sbci	r24, 0xFF	; 255
     740:	9f 4f       	sbci	r25, 0xFF	; 255
     742:	99 23       	and	r25, r25
     744:	a9 f0       	breq	.+42     	; 0x770 <__floatsisf+0x40>
     746:	f9 2f       	mov	r31, r25
     748:	96 e9       	ldi	r25, 0x96	; 150
     74a:	bb 27       	eor	r27, r27
     74c:	93 95       	inc	r25
     74e:	f6 95       	lsr	r31
     750:	87 95       	ror	r24
     752:	77 95       	ror	r23
     754:	67 95       	ror	r22
     756:	b7 95       	ror	r27
     758:	f1 11       	cpse	r31, r1
     75a:	f8 cf       	rjmp	.-16     	; 0x74c <__floatsisf+0x1c>
     75c:	fa f4       	brpl	.+62     	; 0x79c <__floatsisf+0x6c>
     75e:	bb 0f       	add	r27, r27
     760:	11 f4       	brne	.+4      	; 0x766 <__floatsisf+0x36>
     762:	60 ff       	sbrs	r22, 0
     764:	1b c0       	rjmp	.+54     	; 0x79c <__floatsisf+0x6c>
     766:	6f 5f       	subi	r22, 0xFF	; 255
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	8f 4f       	sbci	r24, 0xFF	; 255
     76c:	9f 4f       	sbci	r25, 0xFF	; 255
     76e:	16 c0       	rjmp	.+44     	; 0x79c <__floatsisf+0x6c>
     770:	88 23       	and	r24, r24
     772:	11 f0       	breq	.+4      	; 0x778 <__floatsisf+0x48>
     774:	96 e9       	ldi	r25, 0x96	; 150
     776:	11 c0       	rjmp	.+34     	; 0x79a <__floatsisf+0x6a>
     778:	77 23       	and	r23, r23
     77a:	21 f0       	breq	.+8      	; 0x784 <__floatsisf+0x54>
     77c:	9e e8       	ldi	r25, 0x8E	; 142
     77e:	87 2f       	mov	r24, r23
     780:	76 2f       	mov	r23, r22
     782:	05 c0       	rjmp	.+10     	; 0x78e <__floatsisf+0x5e>
     784:	66 23       	and	r22, r22
     786:	71 f0       	breq	.+28     	; 0x7a4 <__floatsisf+0x74>
     788:	96 e8       	ldi	r25, 0x86	; 134
     78a:	86 2f       	mov	r24, r22
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	2a f0       	brmi	.+10     	; 0x79c <__floatsisf+0x6c>
     792:	9a 95       	dec	r25
     794:	66 0f       	add	r22, r22
     796:	77 1f       	adc	r23, r23
     798:	88 1f       	adc	r24, r24
     79a:	da f7       	brpl	.-10     	; 0x792 <__floatsisf+0x62>
     79c:	88 0f       	add	r24, r24
     79e:	96 95       	lsr	r25
     7a0:	87 95       	ror	r24
     7a2:	97 f9       	bld	r25, 7
     7a4:	08 95       	ret

000007a6 <__mulsf3>:
     7a6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsf3x>
     7aa:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__fp_round>
     7ae:	0e 94 49 04 	call	0x892	; 0x892 <__fp_pscA>
     7b2:	38 f0       	brcs	.+14     	; 0x7c2 <__mulsf3+0x1c>
     7b4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__fp_pscB>
     7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__mulsf3+0x1c>
     7ba:	95 23       	and	r25, r21
     7bc:	11 f0       	breq	.+4      	; 0x7c2 <__mulsf3+0x1c>
     7be:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
     7c2:	0c 94 46 04 	jmp	0x88c	; 0x88c <__fp_nan>
     7c6:	11 24       	eor	r1, r1
     7c8:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_szero>

000007cc <__mulsf3x>:
     7cc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__fp_split3>
     7d0:	70 f3       	brcs	.-36     	; 0x7ae <__mulsf3+0x8>

000007d2 <__mulsf3_pse>:
     7d2:	95 9f       	mul	r25, r21
     7d4:	c1 f3       	breq	.-16     	; 0x7c6 <__mulsf3+0x20>
     7d6:	95 0f       	add	r25, r21
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	55 1f       	adc	r21, r21
     7dc:	62 9f       	mul	r22, r18
     7de:	f0 01       	movw	r30, r0
     7e0:	72 9f       	mul	r23, r18
     7e2:	bb 27       	eor	r27, r27
     7e4:	f0 0d       	add	r31, r0
     7e6:	b1 1d       	adc	r27, r1
     7e8:	63 9f       	mul	r22, r19
     7ea:	aa 27       	eor	r26, r26
     7ec:	f0 0d       	add	r31, r0
     7ee:	b1 1d       	adc	r27, r1
     7f0:	aa 1f       	adc	r26, r26
     7f2:	64 9f       	mul	r22, r20
     7f4:	66 27       	eor	r22, r22
     7f6:	b0 0d       	add	r27, r0
     7f8:	a1 1d       	adc	r26, r1
     7fa:	66 1f       	adc	r22, r22
     7fc:	82 9f       	mul	r24, r18
     7fe:	22 27       	eor	r18, r18
     800:	b0 0d       	add	r27, r0
     802:	a1 1d       	adc	r26, r1
     804:	62 1f       	adc	r22, r18
     806:	73 9f       	mul	r23, r19
     808:	b0 0d       	add	r27, r0
     80a:	a1 1d       	adc	r26, r1
     80c:	62 1f       	adc	r22, r18
     80e:	83 9f       	mul	r24, r19
     810:	a0 0d       	add	r26, r0
     812:	61 1d       	adc	r22, r1
     814:	22 1f       	adc	r18, r18
     816:	74 9f       	mul	r23, r20
     818:	33 27       	eor	r19, r19
     81a:	a0 0d       	add	r26, r0
     81c:	61 1d       	adc	r22, r1
     81e:	23 1f       	adc	r18, r19
     820:	84 9f       	mul	r24, r20
     822:	60 0d       	add	r22, r0
     824:	21 1d       	adc	r18, r1
     826:	82 2f       	mov	r24, r18
     828:	76 2f       	mov	r23, r22
     82a:	6a 2f       	mov	r22, r26
     82c:	11 24       	eor	r1, r1
     82e:	9f 57       	subi	r25, 0x7F	; 127
     830:	50 40       	sbci	r21, 0x00	; 0
     832:	9a f0       	brmi	.+38     	; 0x85a <__mulsf3_pse+0x88>
     834:	f1 f0       	breq	.+60     	; 0x872 <__mulsf3_pse+0xa0>
     836:	88 23       	and	r24, r24
     838:	4a f0       	brmi	.+18     	; 0x84c <__mulsf3_pse+0x7a>
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	bb 1f       	adc	r27, r27
     840:	66 1f       	adc	r22, r22
     842:	77 1f       	adc	r23, r23
     844:	88 1f       	adc	r24, r24
     846:	91 50       	subi	r25, 0x01	; 1
     848:	50 40       	sbci	r21, 0x00	; 0
     84a:	a9 f7       	brne	.-22     	; 0x836 <__mulsf3_pse+0x64>
     84c:	9e 3f       	cpi	r25, 0xFE	; 254
     84e:	51 05       	cpc	r21, r1
     850:	80 f0       	brcs	.+32     	; 0x872 <__mulsf3_pse+0xa0>
     852:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_inf>
     856:	0c 94 8b 04 	jmp	0x916	; 0x916 <__fp_szero>
     85a:	5f 3f       	cpi	r21, 0xFF	; 255
     85c:	e4 f3       	brlt	.-8      	; 0x856 <__mulsf3_pse+0x84>
     85e:	98 3e       	cpi	r25, 0xE8	; 232
     860:	d4 f3       	brlt	.-12     	; 0x856 <__mulsf3_pse+0x84>
     862:	86 95       	lsr	r24
     864:	77 95       	ror	r23
     866:	67 95       	ror	r22
     868:	b7 95       	ror	r27
     86a:	f7 95       	ror	r31
     86c:	e7 95       	ror	r30
     86e:	9f 5f       	subi	r25, 0xFF	; 255
     870:	c1 f7       	brne	.-16     	; 0x862 <__mulsf3_pse+0x90>
     872:	fe 2b       	or	r31, r30
     874:	88 0f       	add	r24, r24
     876:	91 1d       	adc	r25, r1
     878:	96 95       	lsr	r25
     87a:	87 95       	ror	r24
     87c:	97 f9       	bld	r25, 7
     87e:	08 95       	ret

00000880 <__fp_inf>:
     880:	97 f9       	bld	r25, 7
     882:	9f 67       	ori	r25, 0x7F	; 127
     884:	80 e8       	ldi	r24, 0x80	; 128
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	08 95       	ret

0000088c <__fp_nan>:
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	80 ec       	ldi	r24, 0xC0	; 192
     890:	08 95       	ret

00000892 <__fp_pscA>:
     892:	00 24       	eor	r0, r0
     894:	0a 94       	dec	r0
     896:	16 16       	cp	r1, r22
     898:	17 06       	cpc	r1, r23
     89a:	18 06       	cpc	r1, r24
     89c:	09 06       	cpc	r0, r25
     89e:	08 95       	ret

000008a0 <__fp_pscB>:
     8a0:	00 24       	eor	r0, r0
     8a2:	0a 94       	dec	r0
     8a4:	12 16       	cp	r1, r18
     8a6:	13 06       	cpc	r1, r19
     8a8:	14 06       	cpc	r1, r20
     8aa:	05 06       	cpc	r0, r21
     8ac:	08 95       	ret

000008ae <__fp_round>:
     8ae:	09 2e       	mov	r0, r25
     8b0:	03 94       	inc	r0
     8b2:	00 0c       	add	r0, r0
     8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0xc>
     8b6:	88 23       	and	r24, r24
     8b8:	52 f0       	brmi	.+20     	; 0x8ce <__fp_round+0x20>
     8ba:	bb 0f       	add	r27, r27
     8bc:	40 f4       	brcc	.+16     	; 0x8ce <__fp_round+0x20>
     8be:	bf 2b       	or	r27, r31
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <__fp_round+0x18>
     8c2:	60 ff       	sbrs	r22, 0
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <__fp_round+0x20>
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	8f 4f       	sbci	r24, 0xFF	; 255
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	08 95       	ret

000008d0 <__fp_split3>:
     8d0:	57 fd       	sbrc	r21, 7
     8d2:	90 58       	subi	r25, 0x80	; 128
     8d4:	44 0f       	add	r20, r20
     8d6:	55 1f       	adc	r21, r21
     8d8:	59 f0       	breq	.+22     	; 0x8f0 <__fp_splitA+0x10>
     8da:	5f 3f       	cpi	r21, 0xFF	; 255
     8dc:	71 f0       	breq	.+28     	; 0x8fa <__fp_splitA+0x1a>
     8de:	47 95       	ror	r20

000008e0 <__fp_splitA>:
     8e0:	88 0f       	add	r24, r24
     8e2:	97 fb       	bst	r25, 7
     8e4:	99 1f       	adc	r25, r25
     8e6:	61 f0       	breq	.+24     	; 0x900 <__fp_splitA+0x20>
     8e8:	9f 3f       	cpi	r25, 0xFF	; 255
     8ea:	79 f0       	breq	.+30     	; 0x90a <__fp_splitA+0x2a>
     8ec:	87 95       	ror	r24
     8ee:	08 95       	ret
     8f0:	12 16       	cp	r1, r18
     8f2:	13 06       	cpc	r1, r19
     8f4:	14 06       	cpc	r1, r20
     8f6:	55 1f       	adc	r21, r21
     8f8:	f2 cf       	rjmp	.-28     	; 0x8de <__fp_split3+0xe>
     8fa:	46 95       	lsr	r20
     8fc:	f1 df       	rcall	.-30     	; 0x8e0 <__fp_splitA>
     8fe:	08 c0       	rjmp	.+16     	; 0x910 <__fp_splitA+0x30>
     900:	16 16       	cp	r1, r22
     902:	17 06       	cpc	r1, r23
     904:	18 06       	cpc	r1, r24
     906:	99 1f       	adc	r25, r25
     908:	f1 cf       	rjmp	.-30     	; 0x8ec <__fp_splitA+0xc>
     90a:	86 95       	lsr	r24
     90c:	71 05       	cpc	r23, r1
     90e:	61 05       	cpc	r22, r1
     910:	08 94       	sec
     912:	08 95       	ret

00000914 <__fp_zero>:
     914:	e8 94       	clt

00000916 <__fp_szero>:
     916:	bb 27       	eor	r27, r27
     918:	66 27       	eor	r22, r22
     91a:	77 27       	eor	r23, r23
     91c:	cb 01       	movw	r24, r22
     91e:	97 f9       	bld	r25, 7
     920:	08 95       	ret

00000922 <vfprintf>:
     922:	a0 e1       	ldi	r26, 0x10	; 16
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	e7 e9       	ldi	r30, 0x97	; 151
     928:	f4 e0       	ldi	r31, 0x04	; 4
     92a:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__prologue_saves__>
     92e:	7c 01       	movw	r14, r24
     930:	1b 01       	movw	r2, r22
     932:	6a 01       	movw	r12, r20
     934:	fc 01       	movw	r30, r24
     936:	17 82       	std	Z+7, r1	; 0x07
     938:	16 82       	std	Z+6, r1	; 0x06
     93a:	83 81       	ldd	r24, Z+3	; 0x03
     93c:	81 ff       	sbrs	r24, 1
     93e:	44 c3       	rjmp	.+1672   	; 0xfc8 <vfprintf+0x6a6>
     940:	9e 01       	movw	r18, r28
     942:	2f 5f       	subi	r18, 0xFF	; 255
     944:	3f 4f       	sbci	r19, 0xFF	; 255
     946:	39 01       	movw	r6, r18
     948:	f7 01       	movw	r30, r14
     94a:	93 81       	ldd	r25, Z+3	; 0x03
     94c:	f1 01       	movw	r30, r2
     94e:	93 fd       	sbrc	r25, 3
     950:	85 91       	lpm	r24, Z+
     952:	93 ff       	sbrs	r25, 3
     954:	81 91       	ld	r24, Z+
     956:	1f 01       	movw	r2, r30
     958:	88 23       	and	r24, r24
     95a:	09 f4       	brne	.+2      	; 0x95e <vfprintf+0x3c>
     95c:	31 c3       	rjmp	.+1634   	; 0xfc0 <vfprintf+0x69e>
     95e:	85 32       	cpi	r24, 0x25	; 37
     960:	39 f4       	brne	.+14     	; 0x970 <vfprintf+0x4e>
     962:	93 fd       	sbrc	r25, 3
     964:	85 91       	lpm	r24, Z+
     966:	93 ff       	sbrs	r25, 3
     968:	81 91       	ld	r24, Z+
     96a:	1f 01       	movw	r2, r30
     96c:	85 32       	cpi	r24, 0x25	; 37
     96e:	39 f4       	brne	.+14     	; 0x97e <vfprintf+0x5c>
     970:	b7 01       	movw	r22, r14
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     978:	56 01       	movw	r10, r12
     97a:	65 01       	movw	r12, r10
     97c:	e5 cf       	rjmp	.-54     	; 0x948 <vfprintf+0x26>
     97e:	10 e0       	ldi	r17, 0x00	; 0
     980:	51 2c       	mov	r5, r1
     982:	91 2c       	mov	r9, r1
     984:	ff e1       	ldi	r31, 0x1F	; 31
     986:	f9 15       	cp	r31, r9
     988:	d8 f0       	brcs	.+54     	; 0x9c0 <vfprintf+0x9e>
     98a:	8b 32       	cpi	r24, 0x2B	; 43
     98c:	79 f0       	breq	.+30     	; 0x9ac <vfprintf+0x8a>
     98e:	38 f4       	brcc	.+14     	; 0x99e <vfprintf+0x7c>
     990:	80 32       	cpi	r24, 0x20	; 32
     992:	79 f0       	breq	.+30     	; 0x9b2 <vfprintf+0x90>
     994:	83 32       	cpi	r24, 0x23	; 35
     996:	a1 f4       	brne	.+40     	; 0x9c0 <vfprintf+0x9e>
     998:	f9 2d       	mov	r31, r9
     99a:	f0 61       	ori	r31, 0x10	; 16
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <vfprintf+0xd8>
     99e:	8d 32       	cpi	r24, 0x2D	; 45
     9a0:	61 f0       	breq	.+24     	; 0x9ba <vfprintf+0x98>
     9a2:	80 33       	cpi	r24, 0x30	; 48
     9a4:	69 f4       	brne	.+26     	; 0x9c0 <vfprintf+0x9e>
     9a6:	29 2d       	mov	r18, r9
     9a8:	21 60       	ori	r18, 0x01	; 1
     9aa:	2d c0       	rjmp	.+90     	; 0xa06 <vfprintf+0xe4>
     9ac:	39 2d       	mov	r19, r9
     9ae:	32 60       	ori	r19, 0x02	; 2
     9b0:	93 2e       	mov	r9, r19
     9b2:	89 2d       	mov	r24, r9
     9b4:	84 60       	ori	r24, 0x04	; 4
     9b6:	98 2e       	mov	r9, r24
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <vfprintf+0xec>
     9ba:	e9 2d       	mov	r30, r9
     9bc:	e8 60       	ori	r30, 0x08	; 8
     9be:	15 c0       	rjmp	.+42     	; 0x9ea <vfprintf+0xc8>
     9c0:	97 fc       	sbrc	r9, 7
     9c2:	2d c0       	rjmp	.+90     	; 0xa1e <vfprintf+0xfc>
     9c4:	20 ed       	ldi	r18, 0xD0	; 208
     9c6:	28 0f       	add	r18, r24
     9c8:	2a 30       	cpi	r18, 0x0A	; 10
     9ca:	88 f4       	brcc	.+34     	; 0x9ee <vfprintf+0xcc>
     9cc:	96 fe       	sbrs	r9, 6
     9ce:	06 c0       	rjmp	.+12     	; 0x9dc <vfprintf+0xba>
     9d0:	3a e0       	ldi	r19, 0x0A	; 10
     9d2:	13 9f       	mul	r17, r19
     9d4:	20 0d       	add	r18, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	12 2f       	mov	r17, r18
     9da:	19 c0       	rjmp	.+50     	; 0xa0e <vfprintf+0xec>
     9dc:	8a e0       	ldi	r24, 0x0A	; 10
     9de:	58 9e       	mul	r5, r24
     9e0:	20 0d       	add	r18, r0
     9e2:	11 24       	eor	r1, r1
     9e4:	52 2e       	mov	r5, r18
     9e6:	e9 2d       	mov	r30, r9
     9e8:	e0 62       	ori	r30, 0x20	; 32
     9ea:	9e 2e       	mov	r9, r30
     9ec:	10 c0       	rjmp	.+32     	; 0xa0e <vfprintf+0xec>
     9ee:	8e 32       	cpi	r24, 0x2E	; 46
     9f0:	31 f4       	brne	.+12     	; 0x9fe <vfprintf+0xdc>
     9f2:	96 fc       	sbrc	r9, 6
     9f4:	e5 c2       	rjmp	.+1482   	; 0xfc0 <vfprintf+0x69e>
     9f6:	f9 2d       	mov	r31, r9
     9f8:	f0 64       	ori	r31, 0x40	; 64
     9fa:	9f 2e       	mov	r9, r31
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <vfprintf+0xec>
     9fe:	8c 36       	cpi	r24, 0x6C	; 108
     a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0xe8>
     a02:	29 2d       	mov	r18, r9
     a04:	20 68       	ori	r18, 0x80	; 128
     a06:	92 2e       	mov	r9, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0xec>
     a0a:	88 36       	cpi	r24, 0x68	; 104
     a0c:	41 f4       	brne	.+16     	; 0xa1e <vfprintf+0xfc>
     a0e:	f1 01       	movw	r30, r2
     a10:	93 fd       	sbrc	r25, 3
     a12:	85 91       	lpm	r24, Z+
     a14:	93 ff       	sbrs	r25, 3
     a16:	81 91       	ld	r24, Z+
     a18:	1f 01       	movw	r2, r30
     a1a:	81 11       	cpse	r24, r1
     a1c:	b3 cf       	rjmp	.-154    	; 0x984 <vfprintf+0x62>
     a1e:	9b eb       	ldi	r25, 0xBB	; 187
     a20:	98 0f       	add	r25, r24
     a22:	93 30       	cpi	r25, 0x03	; 3
     a24:	20 f4       	brcc	.+8      	; 0xa2e <vfprintf+0x10c>
     a26:	99 2d       	mov	r25, r9
     a28:	90 61       	ori	r25, 0x10	; 16
     a2a:	80 5e       	subi	r24, 0xE0	; 224
     a2c:	07 c0       	rjmp	.+14     	; 0xa3c <vfprintf+0x11a>
     a2e:	9b e9       	ldi	r25, 0x9B	; 155
     a30:	98 0f       	add	r25, r24
     a32:	93 30       	cpi	r25, 0x03	; 3
     a34:	08 f0       	brcs	.+2      	; 0xa38 <vfprintf+0x116>
     a36:	66 c1       	rjmp	.+716    	; 0xd04 <vfprintf+0x3e2>
     a38:	99 2d       	mov	r25, r9
     a3a:	9f 7e       	andi	r25, 0xEF	; 239
     a3c:	96 ff       	sbrs	r25, 6
     a3e:	16 e0       	ldi	r17, 0x06	; 6
     a40:	9f 73       	andi	r25, 0x3F	; 63
     a42:	99 2e       	mov	r9, r25
     a44:	85 36       	cpi	r24, 0x65	; 101
     a46:	19 f4       	brne	.+6      	; 0xa4e <vfprintf+0x12c>
     a48:	90 64       	ori	r25, 0x40	; 64
     a4a:	99 2e       	mov	r9, r25
     a4c:	08 c0       	rjmp	.+16     	; 0xa5e <vfprintf+0x13c>
     a4e:	86 36       	cpi	r24, 0x66	; 102
     a50:	21 f4       	brne	.+8      	; 0xa5a <vfprintf+0x138>
     a52:	39 2f       	mov	r19, r25
     a54:	30 68       	ori	r19, 0x80	; 128
     a56:	93 2e       	mov	r9, r19
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0x13c>
     a5a:	11 11       	cpse	r17, r1
     a5c:	11 50       	subi	r17, 0x01	; 1
     a5e:	97 fe       	sbrs	r9, 7
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <vfprintf+0x14e>
     a62:	1c 33       	cpi	r17, 0x3C	; 60
     a64:	50 f4       	brcc	.+20     	; 0xa7a <vfprintf+0x158>
     a66:	44 24       	eor	r4, r4
     a68:	43 94       	inc	r4
     a6a:	41 0e       	add	r4, r17
     a6c:	27 e0       	ldi	r18, 0x07	; 7
     a6e:	0b c0       	rjmp	.+22     	; 0xa86 <vfprintf+0x164>
     a70:	18 30       	cpi	r17, 0x08	; 8
     a72:	38 f0       	brcs	.+14     	; 0xa82 <vfprintf+0x160>
     a74:	27 e0       	ldi	r18, 0x07	; 7
     a76:	17 e0       	ldi	r17, 0x07	; 7
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <vfprintf+0x162>
     a7a:	27 e0       	ldi	r18, 0x07	; 7
     a7c:	9c e3       	ldi	r25, 0x3C	; 60
     a7e:	49 2e       	mov	r4, r25
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <vfprintf+0x164>
     a82:	21 2f       	mov	r18, r17
     a84:	41 2c       	mov	r4, r1
     a86:	56 01       	movw	r10, r12
     a88:	84 e0       	ldi	r24, 0x04	; 4
     a8a:	a8 0e       	add	r10, r24
     a8c:	b1 1c       	adc	r11, r1
     a8e:	f6 01       	movw	r30, r12
     a90:	60 81       	ld	r22, Z
     a92:	71 81       	ldd	r23, Z+1	; 0x01
     a94:	82 81       	ldd	r24, Z+2	; 0x02
     a96:	93 81       	ldd	r25, Z+3	; 0x03
     a98:	04 2d       	mov	r16, r4
     a9a:	a3 01       	movw	r20, r6
     a9c:	0e 94 45 08 	call	0x108a	; 0x108a <__ftoa_engine>
     aa0:	6c 01       	movw	r12, r24
     aa2:	f9 81       	ldd	r31, Y+1	; 0x01
     aa4:	fc 87       	std	Y+12, r31	; 0x0c
     aa6:	f0 ff       	sbrs	r31, 0
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <vfprintf+0x18c>
     aaa:	f3 ff       	sbrs	r31, 3
     aac:	06 c0       	rjmp	.+12     	; 0xaba <vfprintf+0x198>
     aae:	91 fc       	sbrc	r9, 1
     ab0:	06 c0       	rjmp	.+12     	; 0xabe <vfprintf+0x19c>
     ab2:	92 fe       	sbrs	r9, 2
     ab4:	06 c0       	rjmp	.+12     	; 0xac2 <vfprintf+0x1a0>
     ab6:	00 e2       	ldi	r16, 0x20	; 32
     ab8:	05 c0       	rjmp	.+10     	; 0xac4 <vfprintf+0x1a2>
     aba:	0d e2       	ldi	r16, 0x2D	; 45
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <vfprintf+0x1a2>
     abe:	0b e2       	ldi	r16, 0x2B	; 43
     ac0:	01 c0       	rjmp	.+2      	; 0xac4 <vfprintf+0x1a2>
     ac2:	00 e0       	ldi	r16, 0x00	; 0
     ac4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ac6:	8c 70       	andi	r24, 0x0C	; 12
     ac8:	19 f0       	breq	.+6      	; 0xad0 <vfprintf+0x1ae>
     aca:	01 11       	cpse	r16, r1
     acc:	5a c2       	rjmp	.+1204   	; 0xf82 <vfprintf+0x660>
     ace:	9b c2       	rjmp	.+1334   	; 0x1006 <vfprintf+0x6e4>
     ad0:	97 fe       	sbrs	r9, 7
     ad2:	10 c0       	rjmp	.+32     	; 0xaf4 <vfprintf+0x1d2>
     ad4:	4c 0c       	add	r4, r12
     ad6:	fc 85       	ldd	r31, Y+12	; 0x0c
     ad8:	f4 ff       	sbrs	r31, 4
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <vfprintf+0x1c2>
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	81 33       	cpi	r24, 0x31	; 49
     ae0:	09 f4       	brne	.+2      	; 0xae4 <vfprintf+0x1c2>
     ae2:	4a 94       	dec	r4
     ae4:	14 14       	cp	r1, r4
     ae6:	74 f5       	brge	.+92     	; 0xb44 <vfprintf+0x222>
     ae8:	28 e0       	ldi	r18, 0x08	; 8
     aea:	24 15       	cp	r18, r4
     aec:	78 f5       	brcc	.+94     	; 0xb4c <vfprintf+0x22a>
     aee:	88 e0       	ldi	r24, 0x08	; 8
     af0:	48 2e       	mov	r4, r24
     af2:	2c c0       	rjmp	.+88     	; 0xb4c <vfprintf+0x22a>
     af4:	96 fc       	sbrc	r9, 6
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <vfprintf+0x22a>
     af8:	81 2f       	mov	r24, r17
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	8c 15       	cp	r24, r12
     afe:	9d 05       	cpc	r25, r13
     b00:	9c f0       	brlt	.+38     	; 0xb28 <vfprintf+0x206>
     b02:	3c ef       	ldi	r19, 0xFC	; 252
     b04:	c3 16       	cp	r12, r19
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	d3 06       	cpc	r13, r19
     b0a:	74 f0       	brlt	.+28     	; 0xb28 <vfprintf+0x206>
     b0c:	89 2d       	mov	r24, r9
     b0e:	80 68       	ori	r24, 0x80	; 128
     b10:	98 2e       	mov	r9, r24
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <vfprintf+0x206>
     b14:	e2 e0       	ldi	r30, 0x02	; 2
     b16:	f0 e0       	ldi	r31, 0x00	; 0
     b18:	ec 0f       	add	r30, r28
     b1a:	fd 1f       	adc	r31, r29
     b1c:	e1 0f       	add	r30, r17
     b1e:	f1 1d       	adc	r31, r1
     b20:	80 81       	ld	r24, Z
     b22:	80 33       	cpi	r24, 0x30	; 48
     b24:	19 f4       	brne	.+6      	; 0xb2c <vfprintf+0x20a>
     b26:	11 50       	subi	r17, 0x01	; 1
     b28:	11 11       	cpse	r17, r1
     b2a:	f4 cf       	rjmp	.-24     	; 0xb14 <vfprintf+0x1f2>
     b2c:	97 fe       	sbrs	r9, 7
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <vfprintf+0x22a>
     b30:	44 24       	eor	r4, r4
     b32:	43 94       	inc	r4
     b34:	41 0e       	add	r4, r17
     b36:	81 2f       	mov	r24, r17
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	c8 16       	cp	r12, r24
     b3c:	d9 06       	cpc	r13, r25
     b3e:	2c f4       	brge	.+10     	; 0xb4a <vfprintf+0x228>
     b40:	1c 19       	sub	r17, r12
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <vfprintf+0x22a>
     b44:	44 24       	eor	r4, r4
     b46:	43 94       	inc	r4
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <vfprintf+0x22a>
     b4a:	10 e0       	ldi	r17, 0x00	; 0
     b4c:	97 fe       	sbrs	r9, 7
     b4e:	06 c0       	rjmp	.+12     	; 0xb5c <vfprintf+0x23a>
     b50:	1c 14       	cp	r1, r12
     b52:	1d 04       	cpc	r1, r13
     b54:	34 f4       	brge	.+12     	; 0xb62 <vfprintf+0x240>
     b56:	c6 01       	movw	r24, r12
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <vfprintf+0x244>
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0x244>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	01 11       	cpse	r16, r1
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	11 23       	and	r17, r17
     b6c:	31 f0       	breq	.+12     	; 0xb7a <vfprintf+0x258>
     b6e:	21 2f       	mov	r18, r17
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	2f 5f       	subi	r18, 0xFF	; 255
     b74:	3f 4f       	sbci	r19, 0xFF	; 255
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	25 2d       	mov	r18, r5
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	82 17       	cp	r24, r18
     b80:	93 07       	cpc	r25, r19
     b82:	14 f4       	brge	.+4      	; 0xb88 <vfprintf+0x266>
     b84:	58 1a       	sub	r5, r24
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <vfprintf+0x268>
     b88:	51 2c       	mov	r5, r1
     b8a:	89 2d       	mov	r24, r9
     b8c:	89 70       	andi	r24, 0x09	; 9
     b8e:	49 f4       	brne	.+18     	; 0xba2 <vfprintf+0x280>
     b90:	55 20       	and	r5, r5
     b92:	39 f0       	breq	.+14     	; 0xba2 <vfprintf+0x280>
     b94:	b7 01       	movw	r22, r14
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     b9e:	5a 94       	dec	r5
     ba0:	f7 cf       	rjmp	.-18     	; 0xb90 <vfprintf+0x26e>
     ba2:	00 23       	and	r16, r16
     ba4:	29 f0       	breq	.+10     	; 0xbb0 <vfprintf+0x28e>
     ba6:	b7 01       	movw	r22, r14
     ba8:	80 2f       	mov	r24, r16
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     bb0:	93 fc       	sbrc	r9, 3
     bb2:	09 c0       	rjmp	.+18     	; 0xbc6 <vfprintf+0x2a4>
     bb4:	55 20       	and	r5, r5
     bb6:	39 f0       	breq	.+14     	; 0xbc6 <vfprintf+0x2a4>
     bb8:	b7 01       	movw	r22, r14
     bba:	80 e3       	ldi	r24, 0x30	; 48
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     bc2:	5a 94       	dec	r5
     bc4:	f7 cf       	rjmp	.-18     	; 0xbb4 <vfprintf+0x292>
     bc6:	97 fe       	sbrs	r9, 7
     bc8:	4c c0       	rjmp	.+152    	; 0xc62 <vfprintf+0x340>
     bca:	46 01       	movw	r8, r12
     bcc:	d7 fe       	sbrs	r13, 7
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <vfprintf+0x2b2>
     bd0:	81 2c       	mov	r8, r1
     bd2:	91 2c       	mov	r9, r1
     bd4:	c6 01       	movw	r24, r12
     bd6:	88 19       	sub	r24, r8
     bd8:	99 09       	sbc	r25, r9
     bda:	f3 01       	movw	r30, r6
     bdc:	e8 0f       	add	r30, r24
     bde:	f9 1f       	adc	r31, r25
     be0:	fe 87       	std	Y+14, r31	; 0x0e
     be2:	ed 87       	std	Y+13, r30	; 0x0d
     be4:	96 01       	movw	r18, r12
     be6:	24 19       	sub	r18, r4
     be8:	31 09       	sbc	r19, r1
     bea:	38 8b       	std	Y+16, r19	; 0x10
     bec:	2f 87       	std	Y+15, r18	; 0x0f
     bee:	01 2f       	mov	r16, r17
     bf0:	10 e0       	ldi	r17, 0x00	; 0
     bf2:	11 95       	neg	r17
     bf4:	01 95       	neg	r16
     bf6:	11 09       	sbc	r17, r1
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	83 16       	cp	r8, r19
     bfc:	93 06       	cpc	r9, r19
     bfe:	29 f4       	brne	.+10     	; 0xc0a <vfprintf+0x2e8>
     c00:	b7 01       	movw	r22, r14
     c02:	8e e2       	ldi	r24, 0x2E	; 46
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     c0a:	c8 14       	cp	r12, r8
     c0c:	d9 04       	cpc	r13, r9
     c0e:	4c f0       	brlt	.+18     	; 0xc22 <vfprintf+0x300>
     c10:	8f 85       	ldd	r24, Y+15	; 0x0f
     c12:	98 89       	ldd	r25, Y+16	; 0x10
     c14:	88 15       	cp	r24, r8
     c16:	99 05       	cpc	r25, r9
     c18:	24 f4       	brge	.+8      	; 0xc22 <vfprintf+0x300>
     c1a:	ed 85       	ldd	r30, Y+13	; 0x0d
     c1c:	fe 85       	ldd	r31, Y+14	; 0x0e
     c1e:	81 81       	ldd	r24, Z+1	; 0x01
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <vfprintf+0x302>
     c22:	80 e3       	ldi	r24, 0x30	; 48
     c24:	f1 e0       	ldi	r31, 0x01	; 1
     c26:	8f 1a       	sub	r8, r31
     c28:	91 08       	sbc	r9, r1
     c2a:	2d 85       	ldd	r18, Y+13	; 0x0d
     c2c:	3e 85       	ldd	r19, Y+14	; 0x0e
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	3e 87       	std	Y+14, r19	; 0x0e
     c34:	2d 87       	std	Y+13, r18	; 0x0d
     c36:	80 16       	cp	r8, r16
     c38:	91 06       	cpc	r9, r17
     c3a:	2c f0       	brlt	.+10     	; 0xc46 <vfprintf+0x324>
     c3c:	b7 01       	movw	r22, r14
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     c44:	d9 cf       	rjmp	.-78     	; 0xbf8 <vfprintf+0x2d6>
     c46:	c8 14       	cp	r12, r8
     c48:	d9 04       	cpc	r13, r9
     c4a:	41 f4       	brne	.+16     	; 0xc5c <vfprintf+0x33a>
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	96 33       	cpi	r25, 0x36	; 54
     c50:	20 f4       	brcc	.+8      	; 0xc5a <vfprintf+0x338>
     c52:	95 33       	cpi	r25, 0x35	; 53
     c54:	19 f4       	brne	.+6      	; 0xc5c <vfprintf+0x33a>
     c56:	3c 85       	ldd	r19, Y+12	; 0x0c
     c58:	34 ff       	sbrs	r19, 4
     c5a:	81 e3       	ldi	r24, 0x31	; 49
     c5c:	b7 01       	movw	r22, r14
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	4e c0       	rjmp	.+156    	; 0xcfe <vfprintf+0x3dc>
     c62:	8a 81       	ldd	r24, Y+2	; 0x02
     c64:	81 33       	cpi	r24, 0x31	; 49
     c66:	19 f0       	breq	.+6      	; 0xc6e <vfprintf+0x34c>
     c68:	9c 85       	ldd	r25, Y+12	; 0x0c
     c6a:	9f 7e       	andi	r25, 0xEF	; 239
     c6c:	9c 87       	std	Y+12, r25	; 0x0c
     c6e:	b7 01       	movw	r22, r14
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     c76:	11 11       	cpse	r17, r1
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <vfprintf+0x362>
     c7a:	94 fc       	sbrc	r9, 4
     c7c:	18 c0       	rjmp	.+48     	; 0xcae <vfprintf+0x38c>
     c7e:	85 e6       	ldi	r24, 0x65	; 101
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	17 c0       	rjmp	.+46     	; 0xcb2 <vfprintf+0x390>
     c84:	b7 01       	movw	r22, r14
     c86:	8e e2       	ldi	r24, 0x2E	; 46
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     c8e:	1e 5f       	subi	r17, 0xFE	; 254
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	01 e0       	ldi	r16, 0x01	; 1
     c94:	08 0f       	add	r16, r24
     c96:	f3 01       	movw	r30, r6
     c98:	e8 0f       	add	r30, r24
     c9a:	f1 1d       	adc	r31, r1
     c9c:	80 81       	ld	r24, Z
     c9e:	b7 01       	movw	r22, r14
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     ca6:	80 2f       	mov	r24, r16
     ca8:	01 13       	cpse	r16, r17
     caa:	f3 cf       	rjmp	.-26     	; 0xc92 <vfprintf+0x370>
     cac:	e6 cf       	rjmp	.-52     	; 0xc7a <vfprintf+0x358>
     cae:	85 e4       	ldi	r24, 0x45	; 69
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	b7 01       	movw	r22, r14
     cb4:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     cb8:	d7 fc       	sbrc	r13, 7
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <vfprintf+0x3a6>
     cbc:	c1 14       	cp	r12, r1
     cbe:	d1 04       	cpc	r13, r1
     cc0:	41 f4       	brne	.+16     	; 0xcd2 <vfprintf+0x3b0>
     cc2:	ec 85       	ldd	r30, Y+12	; 0x0c
     cc4:	e4 ff       	sbrs	r30, 4
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <vfprintf+0x3b0>
     cc8:	d1 94       	neg	r13
     cca:	c1 94       	neg	r12
     ccc:	d1 08       	sbc	r13, r1
     cce:	8d e2       	ldi	r24, 0x2D	; 45
     cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <vfprintf+0x3b2>
     cd2:	8b e2       	ldi	r24, 0x2B	; 43
     cd4:	b7 01       	movw	r22, r14
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     cdc:	80 e3       	ldi	r24, 0x30	; 48
     cde:	2a e0       	ldi	r18, 0x0A	; 10
     ce0:	c2 16       	cp	r12, r18
     ce2:	d1 04       	cpc	r13, r1
     ce4:	2c f0       	brlt	.+10     	; 0xcf0 <vfprintf+0x3ce>
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	fa e0       	ldi	r31, 0x0A	; 10
     cea:	cf 1a       	sub	r12, r31
     cec:	d1 08       	sbc	r13, r1
     cee:	f7 cf       	rjmp	.-18     	; 0xcde <vfprintf+0x3bc>
     cf0:	b7 01       	movw	r22, r14
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     cf8:	b7 01       	movw	r22, r14
     cfa:	c6 01       	movw	r24, r12
     cfc:	c0 96       	adiw	r24, 0x30	; 48
     cfe:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     d02:	54 c1       	rjmp	.+680    	; 0xfac <vfprintf+0x68a>
     d04:	83 36       	cpi	r24, 0x63	; 99
     d06:	31 f0       	breq	.+12     	; 0xd14 <vfprintf+0x3f2>
     d08:	83 37       	cpi	r24, 0x73	; 115
     d0a:	79 f0       	breq	.+30     	; 0xd2a <vfprintf+0x408>
     d0c:	83 35       	cpi	r24, 0x53	; 83
     d0e:	09 f0       	breq	.+2      	; 0xd12 <vfprintf+0x3f0>
     d10:	56 c0       	rjmp	.+172    	; 0xdbe <vfprintf+0x49c>
     d12:	20 c0       	rjmp	.+64     	; 0xd54 <vfprintf+0x432>
     d14:	56 01       	movw	r10, r12
     d16:	32 e0       	ldi	r19, 0x02	; 2
     d18:	a3 0e       	add	r10, r19
     d1a:	b1 1c       	adc	r11, r1
     d1c:	f6 01       	movw	r30, r12
     d1e:	80 81       	ld	r24, Z
     d20:	89 83       	std	Y+1, r24	; 0x01
     d22:	01 e0       	ldi	r16, 0x01	; 1
     d24:	10 e0       	ldi	r17, 0x00	; 0
     d26:	63 01       	movw	r12, r6
     d28:	12 c0       	rjmp	.+36     	; 0xd4e <vfprintf+0x42c>
     d2a:	56 01       	movw	r10, r12
     d2c:	f2 e0       	ldi	r31, 0x02	; 2
     d2e:	af 0e       	add	r10, r31
     d30:	b1 1c       	adc	r11, r1
     d32:	f6 01       	movw	r30, r12
     d34:	c0 80       	ld	r12, Z
     d36:	d1 80       	ldd	r13, Z+1	; 0x01
     d38:	96 fe       	sbrs	r9, 6
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <vfprintf+0x420>
     d3c:	61 2f       	mov	r22, r17
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <vfprintf+0x424>
     d42:	6f ef       	ldi	r22, 0xFF	; 255
     d44:	7f ef       	ldi	r23, 0xFF	; 255
     d46:	c6 01       	movw	r24, r12
     d48:	0e 94 28 09 	call	0x1250	; 0x1250 <strnlen>
     d4c:	8c 01       	movw	r16, r24
     d4e:	f9 2d       	mov	r31, r9
     d50:	ff 77       	andi	r31, 0x7F	; 127
     d52:	14 c0       	rjmp	.+40     	; 0xd7c <vfprintf+0x45a>
     d54:	56 01       	movw	r10, r12
     d56:	22 e0       	ldi	r18, 0x02	; 2
     d58:	a2 0e       	add	r10, r18
     d5a:	b1 1c       	adc	r11, r1
     d5c:	f6 01       	movw	r30, r12
     d5e:	c0 80       	ld	r12, Z
     d60:	d1 80       	ldd	r13, Z+1	; 0x01
     d62:	96 fe       	sbrs	r9, 6
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <vfprintf+0x44a>
     d66:	61 2f       	mov	r22, r17
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <vfprintf+0x44e>
     d6c:	6f ef       	ldi	r22, 0xFF	; 255
     d6e:	7f ef       	ldi	r23, 0xFF	; 255
     d70:	c6 01       	movw	r24, r12
     d72:	0e 94 1d 09 	call	0x123a	; 0x123a <strnlen_P>
     d76:	8c 01       	movw	r16, r24
     d78:	f9 2d       	mov	r31, r9
     d7a:	f0 68       	ori	r31, 0x80	; 128
     d7c:	9f 2e       	mov	r9, r31
     d7e:	f3 fd       	sbrc	r31, 3
     d80:	1a c0       	rjmp	.+52     	; 0xdb6 <vfprintf+0x494>
     d82:	85 2d       	mov	r24, r5
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	08 17       	cp	r16, r24
     d88:	19 07       	cpc	r17, r25
     d8a:	a8 f4       	brcc	.+42     	; 0xdb6 <vfprintf+0x494>
     d8c:	b7 01       	movw	r22, r14
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     d96:	5a 94       	dec	r5
     d98:	f4 cf       	rjmp	.-24     	; 0xd82 <vfprintf+0x460>
     d9a:	f6 01       	movw	r30, r12
     d9c:	97 fc       	sbrc	r9, 7
     d9e:	85 91       	lpm	r24, Z+
     da0:	97 fe       	sbrs	r9, 7
     da2:	81 91       	ld	r24, Z+
     da4:	6f 01       	movw	r12, r30
     da6:	b7 01       	movw	r22, r14
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     dae:	51 10       	cpse	r5, r1
     db0:	5a 94       	dec	r5
     db2:	01 50       	subi	r16, 0x01	; 1
     db4:	11 09       	sbc	r17, r1
     db6:	01 15       	cp	r16, r1
     db8:	11 05       	cpc	r17, r1
     dba:	79 f7       	brne	.-34     	; 0xd9a <vfprintf+0x478>
     dbc:	f7 c0       	rjmp	.+494    	; 0xfac <vfprintf+0x68a>
     dbe:	84 36       	cpi	r24, 0x64	; 100
     dc0:	11 f0       	breq	.+4      	; 0xdc6 <vfprintf+0x4a4>
     dc2:	89 36       	cpi	r24, 0x69	; 105
     dc4:	61 f5       	brne	.+88     	; 0xe1e <vfprintf+0x4fc>
     dc6:	56 01       	movw	r10, r12
     dc8:	97 fe       	sbrs	r9, 7
     dca:	09 c0       	rjmp	.+18     	; 0xdde <vfprintf+0x4bc>
     dcc:	24 e0       	ldi	r18, 0x04	; 4
     dce:	a2 0e       	add	r10, r18
     dd0:	b1 1c       	adc	r11, r1
     dd2:	f6 01       	movw	r30, r12
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	0a c0       	rjmp	.+20     	; 0xdf2 <vfprintf+0x4d0>
     dde:	f2 e0       	ldi	r31, 0x02	; 2
     de0:	af 0e       	add	r10, r31
     de2:	b1 1c       	adc	r11, r1
     de4:	f6 01       	movw	r30, r12
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	07 2e       	mov	r0, r23
     dec:	00 0c       	add	r0, r0
     dee:	88 0b       	sbc	r24, r24
     df0:	99 0b       	sbc	r25, r25
     df2:	f9 2d       	mov	r31, r9
     df4:	ff 76       	andi	r31, 0x6F	; 111
     df6:	9f 2e       	mov	r9, r31
     df8:	97 ff       	sbrs	r25, 7
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <vfprintf+0x4ec>
     dfc:	90 95       	com	r25
     dfe:	80 95       	com	r24
     e00:	70 95       	com	r23
     e02:	61 95       	neg	r22
     e04:	7f 4f       	sbci	r23, 0xFF	; 255
     e06:	8f 4f       	sbci	r24, 0xFF	; 255
     e08:	9f 4f       	sbci	r25, 0xFF	; 255
     e0a:	f0 68       	ori	r31, 0x80	; 128
     e0c:	9f 2e       	mov	r9, r31
     e0e:	2a e0       	ldi	r18, 0x0A	; 10
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	a3 01       	movw	r20, r6
     e14:	0e 94 91 09 	call	0x1322	; 0x1322 <__ultoa_invert>
     e18:	c8 2e       	mov	r12, r24
     e1a:	c6 18       	sub	r12, r6
     e1c:	3f c0       	rjmp	.+126    	; 0xe9c <vfprintf+0x57a>
     e1e:	09 2d       	mov	r16, r9
     e20:	85 37       	cpi	r24, 0x75	; 117
     e22:	21 f4       	brne	.+8      	; 0xe2c <vfprintf+0x50a>
     e24:	0f 7e       	andi	r16, 0xEF	; 239
     e26:	2a e0       	ldi	r18, 0x0A	; 10
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	1d c0       	rjmp	.+58     	; 0xe66 <vfprintf+0x544>
     e2c:	09 7f       	andi	r16, 0xF9	; 249
     e2e:	8f 36       	cpi	r24, 0x6F	; 111
     e30:	91 f0       	breq	.+36     	; 0xe56 <vfprintf+0x534>
     e32:	18 f4       	brcc	.+6      	; 0xe3a <vfprintf+0x518>
     e34:	88 35       	cpi	r24, 0x58	; 88
     e36:	59 f0       	breq	.+22     	; 0xe4e <vfprintf+0x52c>
     e38:	c3 c0       	rjmp	.+390    	; 0xfc0 <vfprintf+0x69e>
     e3a:	80 37       	cpi	r24, 0x70	; 112
     e3c:	19 f0       	breq	.+6      	; 0xe44 <vfprintf+0x522>
     e3e:	88 37       	cpi	r24, 0x78	; 120
     e40:	11 f0       	breq	.+4      	; 0xe46 <vfprintf+0x524>
     e42:	be c0       	rjmp	.+380    	; 0xfc0 <vfprintf+0x69e>
     e44:	00 61       	ori	r16, 0x10	; 16
     e46:	04 ff       	sbrs	r16, 4
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <vfprintf+0x53a>
     e4a:	04 60       	ori	r16, 0x04	; 4
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <vfprintf+0x53a>
     e4e:	94 fe       	sbrs	r9, 4
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x540>
     e52:	06 60       	ori	r16, 0x06	; 6
     e54:	06 c0       	rjmp	.+12     	; 0xe62 <vfprintf+0x540>
     e56:	28 e0       	ldi	r18, 0x08	; 8
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	05 c0       	rjmp	.+10     	; 0xe66 <vfprintf+0x544>
     e5c:	20 e1       	ldi	r18, 0x10	; 16
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <vfprintf+0x544>
     e62:	20 e1       	ldi	r18, 0x10	; 16
     e64:	32 e0       	ldi	r19, 0x02	; 2
     e66:	56 01       	movw	r10, r12
     e68:	07 ff       	sbrs	r16, 7
     e6a:	09 c0       	rjmp	.+18     	; 0xe7e <vfprintf+0x55c>
     e6c:	84 e0       	ldi	r24, 0x04	; 4
     e6e:	a8 0e       	add	r10, r24
     e70:	b1 1c       	adc	r11, r1
     e72:	f6 01       	movw	r30, r12
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	08 c0       	rjmp	.+16     	; 0xe8e <vfprintf+0x56c>
     e7e:	f2 e0       	ldi	r31, 0x02	; 2
     e80:	af 0e       	add	r10, r31
     e82:	b1 1c       	adc	r11, r1
     e84:	f6 01       	movw	r30, r12
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a3 01       	movw	r20, r6
     e90:	0e 94 91 09 	call	0x1322	; 0x1322 <__ultoa_invert>
     e94:	c8 2e       	mov	r12, r24
     e96:	c6 18       	sub	r12, r6
     e98:	0f 77       	andi	r16, 0x7F	; 127
     e9a:	90 2e       	mov	r9, r16
     e9c:	96 fe       	sbrs	r9, 6
     e9e:	0b c0       	rjmp	.+22     	; 0xeb6 <vfprintf+0x594>
     ea0:	09 2d       	mov	r16, r9
     ea2:	0e 7f       	andi	r16, 0xFE	; 254
     ea4:	c1 16       	cp	r12, r17
     ea6:	50 f4       	brcc	.+20     	; 0xebc <vfprintf+0x59a>
     ea8:	94 fe       	sbrs	r9, 4
     eaa:	0a c0       	rjmp	.+20     	; 0xec0 <vfprintf+0x59e>
     eac:	92 fc       	sbrc	r9, 2
     eae:	08 c0       	rjmp	.+16     	; 0xec0 <vfprintf+0x59e>
     eb0:	09 2d       	mov	r16, r9
     eb2:	0e 7e       	andi	r16, 0xEE	; 238
     eb4:	05 c0       	rjmp	.+10     	; 0xec0 <vfprintf+0x59e>
     eb6:	dc 2c       	mov	r13, r12
     eb8:	09 2d       	mov	r16, r9
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <vfprintf+0x5a0>
     ebc:	dc 2c       	mov	r13, r12
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <vfprintf+0x5a0>
     ec0:	d1 2e       	mov	r13, r17
     ec2:	04 ff       	sbrs	r16, 4
     ec4:	0d c0       	rjmp	.+26     	; 0xee0 <vfprintf+0x5be>
     ec6:	fe 01       	movw	r30, r28
     ec8:	ec 0d       	add	r30, r12
     eca:	f1 1d       	adc	r31, r1
     ecc:	80 81       	ld	r24, Z
     ece:	80 33       	cpi	r24, 0x30	; 48
     ed0:	11 f4       	brne	.+4      	; 0xed6 <vfprintf+0x5b4>
     ed2:	09 7e       	andi	r16, 0xE9	; 233
     ed4:	09 c0       	rjmp	.+18     	; 0xee8 <vfprintf+0x5c6>
     ed6:	02 ff       	sbrs	r16, 2
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <vfprintf+0x5c4>
     eda:	d3 94       	inc	r13
     edc:	d3 94       	inc	r13
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <vfprintf+0x5c6>
     ee0:	80 2f       	mov	r24, r16
     ee2:	86 78       	andi	r24, 0x86	; 134
     ee4:	09 f0       	breq	.+2      	; 0xee8 <vfprintf+0x5c6>
     ee6:	d3 94       	inc	r13
     ee8:	03 fd       	sbrc	r16, 3
     eea:	11 c0       	rjmp	.+34     	; 0xf0e <vfprintf+0x5ec>
     eec:	00 ff       	sbrs	r16, 0
     eee:	06 c0       	rjmp	.+12     	; 0xefc <vfprintf+0x5da>
     ef0:	1c 2d       	mov	r17, r12
     ef2:	d5 14       	cp	r13, r5
     ef4:	80 f4       	brcc	.+32     	; 0xf16 <vfprintf+0x5f4>
     ef6:	15 0d       	add	r17, r5
     ef8:	1d 19       	sub	r17, r13
     efa:	0d c0       	rjmp	.+26     	; 0xf16 <vfprintf+0x5f4>
     efc:	d5 14       	cp	r13, r5
     efe:	58 f4       	brcc	.+22     	; 0xf16 <vfprintf+0x5f4>
     f00:	b7 01       	movw	r22, r14
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     f0a:	d3 94       	inc	r13
     f0c:	f7 cf       	rjmp	.-18     	; 0xefc <vfprintf+0x5da>
     f0e:	d5 14       	cp	r13, r5
     f10:	10 f4       	brcc	.+4      	; 0xf16 <vfprintf+0x5f4>
     f12:	5d 18       	sub	r5, r13
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <vfprintf+0x5f6>
     f16:	51 2c       	mov	r5, r1
     f18:	04 ff       	sbrs	r16, 4
     f1a:	10 c0       	rjmp	.+32     	; 0xf3c <vfprintf+0x61a>
     f1c:	b7 01       	movw	r22, r14
     f1e:	80 e3       	ldi	r24, 0x30	; 48
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     f26:	02 ff       	sbrs	r16, 2
     f28:	17 c0       	rjmp	.+46     	; 0xf58 <vfprintf+0x636>
     f2a:	01 fd       	sbrc	r16, 1
     f2c:	03 c0       	rjmp	.+6      	; 0xf34 <vfprintf+0x612>
     f2e:	88 e7       	ldi	r24, 0x78	; 120
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <vfprintf+0x616>
     f34:	88 e5       	ldi	r24, 0x58	; 88
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	b7 01       	movw	r22, r14
     f3a:	0c c0       	rjmp	.+24     	; 0xf54 <vfprintf+0x632>
     f3c:	80 2f       	mov	r24, r16
     f3e:	86 78       	andi	r24, 0x86	; 134
     f40:	59 f0       	breq	.+22     	; 0xf58 <vfprintf+0x636>
     f42:	01 ff       	sbrs	r16, 1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <vfprintf+0x628>
     f46:	8b e2       	ldi	r24, 0x2B	; 43
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <vfprintf+0x62a>
     f4a:	80 e2       	ldi	r24, 0x20	; 32
     f4c:	07 fd       	sbrc	r16, 7
     f4e:	8d e2       	ldi	r24, 0x2D	; 45
     f50:	b7 01       	movw	r22, r14
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     f58:	c1 16       	cp	r12, r17
     f5a:	38 f4       	brcc	.+14     	; 0xf6a <vfprintf+0x648>
     f5c:	b7 01       	movw	r22, r14
     f5e:	80 e3       	ldi	r24, 0x30	; 48
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     f66:	11 50       	subi	r17, 0x01	; 1
     f68:	f7 cf       	rjmp	.-18     	; 0xf58 <vfprintf+0x636>
     f6a:	ca 94       	dec	r12
     f6c:	f3 01       	movw	r30, r6
     f6e:	ec 0d       	add	r30, r12
     f70:	f1 1d       	adc	r31, r1
     f72:	80 81       	ld	r24, Z
     f74:	b7 01       	movw	r22, r14
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     f7c:	c1 10       	cpse	r12, r1
     f7e:	f5 cf       	rjmp	.-22     	; 0xf6a <vfprintf+0x648>
     f80:	15 c0       	rjmp	.+42     	; 0xfac <vfprintf+0x68a>
     f82:	f4 e0       	ldi	r31, 0x04	; 4
     f84:	f5 15       	cp	r31, r5
     f86:	60 f5       	brcc	.+88     	; 0xfe0 <vfprintf+0x6be>
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	58 1a       	sub	r5, r24
     f8c:	93 fe       	sbrs	r9, 3
     f8e:	1f c0       	rjmp	.+62     	; 0xfce <vfprintf+0x6ac>
     f90:	01 11       	cpse	r16, r1
     f92:	27 c0       	rjmp	.+78     	; 0xfe2 <vfprintf+0x6c0>
     f94:	2c 85       	ldd	r18, Y+12	; 0x0c
     f96:	23 ff       	sbrs	r18, 3
     f98:	2a c0       	rjmp	.+84     	; 0xfee <vfprintf+0x6cc>
     f9a:	04 e5       	ldi	r16, 0x54	; 84
     f9c:	10 e0       	ldi	r17, 0x00	; 0
     f9e:	39 2d       	mov	r19, r9
     fa0:	30 71       	andi	r19, 0x10	; 16
     fa2:	93 2e       	mov	r9, r19
     fa4:	f8 01       	movw	r30, r16
     fa6:	84 91       	lpm	r24, Z
     fa8:	81 11       	cpse	r24, r1
     faa:	24 c0       	rjmp	.+72     	; 0xff4 <vfprintf+0x6d2>
     fac:	55 20       	and	r5, r5
     fae:	09 f4       	brne	.+2      	; 0xfb2 <vfprintf+0x690>
     fb0:	e4 cc       	rjmp	.-1592   	; 0x97a <vfprintf+0x58>
     fb2:	b7 01       	movw	r22, r14
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     fbc:	5a 94       	dec	r5
     fbe:	f6 cf       	rjmp	.-20     	; 0xfac <vfprintf+0x68a>
     fc0:	f7 01       	movw	r30, r14
     fc2:	86 81       	ldd	r24, Z+6	; 0x06
     fc4:	97 81       	ldd	r25, Z+7	; 0x07
     fc6:	26 c0       	rjmp	.+76     	; 0x1014 <vfprintf+0x6f2>
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	23 c0       	rjmp	.+70     	; 0x1014 <vfprintf+0x6f2>
     fce:	b7 01       	movw	r22, r14
     fd0:	80 e2       	ldi	r24, 0x20	; 32
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     fd8:	5a 94       	dec	r5
     fda:	51 10       	cpse	r5, r1
     fdc:	f8 cf       	rjmp	.-16     	; 0xfce <vfprintf+0x6ac>
     fde:	d8 cf       	rjmp	.-80     	; 0xf90 <vfprintf+0x66e>
     fe0:	51 2c       	mov	r5, r1
     fe2:	b7 01       	movw	r22, r14
     fe4:	80 2f       	mov	r24, r16
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     fec:	d3 cf       	rjmp	.-90     	; 0xf94 <vfprintf+0x672>
     fee:	08 e5       	ldi	r16, 0x58	; 88
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	d5 cf       	rjmp	.-86     	; 0xf9e <vfprintf+0x67c>
     ff4:	91 10       	cpse	r9, r1
     ff6:	80 52       	subi	r24, 0x20	; 32
     ff8:	b7 01       	movw	r22, r14
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    1000:	0f 5f       	subi	r16, 0xFF	; 255
    1002:	1f 4f       	sbci	r17, 0xFF	; 255
    1004:	cf cf       	rjmp	.-98     	; 0xfa4 <vfprintf+0x682>
    1006:	23 e0       	ldi	r18, 0x03	; 3
    1008:	25 15       	cp	r18, r5
    100a:	10 f4       	brcc	.+4      	; 0x1010 <vfprintf+0x6ee>
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	bd cf       	rjmp	.-134    	; 0xf8a <vfprintf+0x668>
    1010:	51 2c       	mov	r5, r1
    1012:	c0 cf       	rjmp	.-128    	; 0xf94 <vfprintf+0x672>
    1014:	60 96       	adiw	r28, 0x10	; 16
    1016:	e2 e1       	ldi	r30, 0x12	; 18
    1018:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__epilogue_restores__>

0000101c <__prologue_saves__>:
    101c:	2f 92       	push	r2
    101e:	3f 92       	push	r3
    1020:	4f 92       	push	r4
    1022:	5f 92       	push	r5
    1024:	6f 92       	push	r6
    1026:	7f 92       	push	r7
    1028:	8f 92       	push	r8
    102a:	9f 92       	push	r9
    102c:	af 92       	push	r10
    102e:	bf 92       	push	r11
    1030:	cf 92       	push	r12
    1032:	df 92       	push	r13
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	ca 1b       	sub	r28, r26
    1046:	db 0b       	sbc	r29, r27
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	09 94       	ijmp

00001054 <__epilogue_restores__>:
    1054:	2a 88       	ldd	r2, Y+18	; 0x12
    1056:	39 88       	ldd	r3, Y+17	; 0x11
    1058:	48 88       	ldd	r4, Y+16	; 0x10
    105a:	5f 84       	ldd	r5, Y+15	; 0x0f
    105c:	6e 84       	ldd	r6, Y+14	; 0x0e
    105e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1060:	8c 84       	ldd	r8, Y+12	; 0x0c
    1062:	9b 84       	ldd	r9, Y+11	; 0x0b
    1064:	aa 84       	ldd	r10, Y+10	; 0x0a
    1066:	b9 84       	ldd	r11, Y+9	; 0x09
    1068:	c8 84       	ldd	r12, Y+8	; 0x08
    106a:	df 80       	ldd	r13, Y+7	; 0x07
    106c:	ee 80       	ldd	r14, Y+6	; 0x06
    106e:	fd 80       	ldd	r15, Y+5	; 0x05
    1070:	0c 81       	ldd	r16, Y+4	; 0x04
    1072:	1b 81       	ldd	r17, Y+3	; 0x03
    1074:	aa 81       	ldd	r26, Y+2	; 0x02
    1076:	b9 81       	ldd	r27, Y+1	; 0x01
    1078:	ce 0f       	add	r28, r30
    107a:	d1 1d       	adc	r29, r1
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	ed 01       	movw	r28, r26
    1088:	08 95       	ret

0000108a <__ftoa_engine>:
    108a:	28 30       	cpi	r18, 0x08	; 8
    108c:	08 f0       	brcs	.+2      	; 0x1090 <__ftoa_engine+0x6>
    108e:	27 e0       	ldi	r18, 0x07	; 7
    1090:	33 27       	eor	r19, r19
    1092:	da 01       	movw	r26, r20
    1094:	99 0f       	add	r25, r25
    1096:	31 1d       	adc	r19, r1
    1098:	87 fd       	sbrc	r24, 7
    109a:	91 60       	ori	r25, 0x01	; 1
    109c:	00 96       	adiw	r24, 0x00	; 0
    109e:	61 05       	cpc	r22, r1
    10a0:	71 05       	cpc	r23, r1
    10a2:	39 f4       	brne	.+14     	; 0x10b2 <__ftoa_engine+0x28>
    10a4:	32 60       	ori	r19, 0x02	; 2
    10a6:	2e 5f       	subi	r18, 0xFE	; 254
    10a8:	3d 93       	st	X+, r19
    10aa:	30 e3       	ldi	r19, 0x30	; 48
    10ac:	2a 95       	dec	r18
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <__ftoa_engine+0x1e>
    10b0:	08 95       	ret
    10b2:	9f 3f       	cpi	r25, 0xFF	; 255
    10b4:	30 f0       	brcs	.+12     	; 0x10c2 <__ftoa_engine+0x38>
    10b6:	80 38       	cpi	r24, 0x80	; 128
    10b8:	71 05       	cpc	r23, r1
    10ba:	61 05       	cpc	r22, r1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__ftoa_engine+0x36>
    10be:	3c 5f       	subi	r19, 0xFC	; 252
    10c0:	3c 5f       	subi	r19, 0xFC	; 252
    10c2:	3d 93       	st	X+, r19
    10c4:	91 30       	cpi	r25, 0x01	; 1
    10c6:	08 f0       	brcs	.+2      	; 0x10ca <__ftoa_engine+0x40>
    10c8:	80 68       	ori	r24, 0x80	; 128
    10ca:	91 1d       	adc	r25, r1
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	1f 93       	push	r17
    10d2:	0f 93       	push	r16
    10d4:	ff 92       	push	r15
    10d6:	ef 92       	push	r14
    10d8:	19 2f       	mov	r17, r25
    10da:	98 7f       	andi	r25, 0xF8	; 248
    10dc:	96 95       	lsr	r25
    10de:	e9 2f       	mov	r30, r25
    10e0:	96 95       	lsr	r25
    10e2:	96 95       	lsr	r25
    10e4:	e9 0f       	add	r30, r25
    10e6:	ff 27       	eor	r31, r31
    10e8:	ea 54       	subi	r30, 0x4A	; 74
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	99 27       	eor	r25, r25
    10ee:	33 27       	eor	r19, r19
    10f0:	ee 24       	eor	r14, r14
    10f2:	ff 24       	eor	r15, r15
    10f4:	a7 01       	movw	r20, r14
    10f6:	e7 01       	movw	r28, r14
    10f8:	05 90       	lpm	r0, Z+
    10fa:	08 94       	sec
    10fc:	07 94       	ror	r0
    10fe:	28 f4       	brcc	.+10     	; 0x110a <__ftoa_engine+0x80>
    1100:	36 0f       	add	r19, r22
    1102:	e7 1e       	adc	r14, r23
    1104:	f8 1e       	adc	r15, r24
    1106:	49 1f       	adc	r20, r25
    1108:	51 1d       	adc	r21, r1
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	06 94       	lsr	r0
    1114:	a1 f7       	brne	.-24     	; 0x10fe <__ftoa_engine+0x74>
    1116:	05 90       	lpm	r0, Z+
    1118:	07 94       	ror	r0
    111a:	28 f4       	brcc	.+10     	; 0x1126 <__ftoa_engine+0x9c>
    111c:	e7 0e       	add	r14, r23
    111e:	f8 1e       	adc	r15, r24
    1120:	49 1f       	adc	r20, r25
    1122:	56 1f       	adc	r21, r22
    1124:	c1 1d       	adc	r28, r1
    1126:	77 0f       	add	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	66 1f       	adc	r22, r22
    112e:	06 94       	lsr	r0
    1130:	a1 f7       	brne	.-24     	; 0x111a <__ftoa_engine+0x90>
    1132:	05 90       	lpm	r0, Z+
    1134:	07 94       	ror	r0
    1136:	28 f4       	brcc	.+10     	; 0x1142 <__ftoa_engine+0xb8>
    1138:	f8 0e       	add	r15, r24
    113a:	49 1f       	adc	r20, r25
    113c:	56 1f       	adc	r21, r22
    113e:	c7 1f       	adc	r28, r23
    1140:	d1 1d       	adc	r29, r1
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	66 1f       	adc	r22, r22
    1148:	77 1f       	adc	r23, r23
    114a:	06 94       	lsr	r0
    114c:	a1 f7       	brne	.-24     	; 0x1136 <__ftoa_engine+0xac>
    114e:	05 90       	lpm	r0, Z+
    1150:	07 94       	ror	r0
    1152:	20 f4       	brcc	.+8      	; 0x115c <__ftoa_engine+0xd2>
    1154:	49 0f       	add	r20, r25
    1156:	56 1f       	adc	r21, r22
    1158:	c7 1f       	adc	r28, r23
    115a:	d8 1f       	adc	r29, r24
    115c:	99 0f       	add	r25, r25
    115e:	66 1f       	adc	r22, r22
    1160:	77 1f       	adc	r23, r23
    1162:	88 1f       	adc	r24, r24
    1164:	06 94       	lsr	r0
    1166:	a9 f7       	brne	.-22     	; 0x1152 <__ftoa_engine+0xc8>
    1168:	84 91       	lpm	r24, Z
    116a:	10 95       	com	r17
    116c:	17 70       	andi	r17, 0x07	; 7
    116e:	41 f0       	breq	.+16     	; 0x1180 <__ftoa_engine+0xf6>
    1170:	d6 95       	lsr	r29
    1172:	c7 95       	ror	r28
    1174:	57 95       	ror	r21
    1176:	47 95       	ror	r20
    1178:	f7 94       	ror	r15
    117a:	e7 94       	ror	r14
    117c:	1a 95       	dec	r17
    117e:	c1 f7       	brne	.-16     	; 0x1170 <__ftoa_engine+0xe6>
    1180:	ec e5       	ldi	r30, 0x5C	; 92
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	68 94       	set
    1186:	15 90       	lpm	r1, Z+
    1188:	15 91       	lpm	r17, Z+
    118a:	35 91       	lpm	r19, Z+
    118c:	65 91       	lpm	r22, Z+
    118e:	95 91       	lpm	r25, Z+
    1190:	05 90       	lpm	r0, Z+
    1192:	7f e2       	ldi	r23, 0x2F	; 47
    1194:	73 95       	inc	r23
    1196:	e1 18       	sub	r14, r1
    1198:	f1 0a       	sbc	r15, r17
    119a:	43 0b       	sbc	r20, r19
    119c:	56 0b       	sbc	r21, r22
    119e:	c9 0b       	sbc	r28, r25
    11a0:	d0 09       	sbc	r29, r0
    11a2:	c0 f7       	brcc	.-16     	; 0x1194 <__ftoa_engine+0x10a>
    11a4:	e1 0c       	add	r14, r1
    11a6:	f1 1e       	adc	r15, r17
    11a8:	43 1f       	adc	r20, r19
    11aa:	56 1f       	adc	r21, r22
    11ac:	c9 1f       	adc	r28, r25
    11ae:	d0 1d       	adc	r29, r0
    11b0:	7e f4       	brtc	.+30     	; 0x11d0 <__ftoa_engine+0x146>
    11b2:	70 33       	cpi	r23, 0x30	; 48
    11b4:	11 f4       	brne	.+4      	; 0x11ba <__ftoa_engine+0x130>
    11b6:	8a 95       	dec	r24
    11b8:	e6 cf       	rjmp	.-52     	; 0x1186 <__ftoa_engine+0xfc>
    11ba:	e8 94       	clt
    11bc:	01 50       	subi	r16, 0x01	; 1
    11be:	30 f0       	brcs	.+12     	; 0x11cc <__ftoa_engine+0x142>
    11c0:	08 0f       	add	r16, r24
    11c2:	0a f4       	brpl	.+2      	; 0x11c6 <__ftoa_engine+0x13c>
    11c4:	00 27       	eor	r16, r16
    11c6:	02 17       	cp	r16, r18
    11c8:	08 f4       	brcc	.+2      	; 0x11cc <__ftoa_engine+0x142>
    11ca:	20 2f       	mov	r18, r16
    11cc:	23 95       	inc	r18
    11ce:	02 2f       	mov	r16, r18
    11d0:	7a 33       	cpi	r23, 0x3A	; 58
    11d2:	28 f0       	brcs	.+10     	; 0x11de <__ftoa_engine+0x154>
    11d4:	79 e3       	ldi	r23, 0x39	; 57
    11d6:	7d 93       	st	X+, r23
    11d8:	2a 95       	dec	r18
    11da:	e9 f7       	brne	.-6      	; 0x11d6 <__ftoa_engine+0x14c>
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <__ftoa_engine+0x174>
    11de:	7d 93       	st	X+, r23
    11e0:	2a 95       	dec	r18
    11e2:	89 f6       	brne	.-94     	; 0x1186 <__ftoa_engine+0xfc>
    11e4:	06 94       	lsr	r0
    11e6:	97 95       	ror	r25
    11e8:	67 95       	ror	r22
    11ea:	37 95       	ror	r19
    11ec:	17 95       	ror	r17
    11ee:	17 94       	ror	r1
    11f0:	e1 18       	sub	r14, r1
    11f2:	f1 0a       	sbc	r15, r17
    11f4:	43 0b       	sbc	r20, r19
    11f6:	56 0b       	sbc	r21, r22
    11f8:	c9 0b       	sbc	r28, r25
    11fa:	d0 09       	sbc	r29, r0
    11fc:	98 f0       	brcs	.+38     	; 0x1224 <__ftoa_engine+0x19a>
    11fe:	23 95       	inc	r18
    1200:	7e 91       	ld	r23, -X
    1202:	73 95       	inc	r23
    1204:	7a 33       	cpi	r23, 0x3A	; 58
    1206:	08 f0       	brcs	.+2      	; 0x120a <__ftoa_engine+0x180>
    1208:	70 e3       	ldi	r23, 0x30	; 48
    120a:	7c 93       	st	X, r23
    120c:	20 13       	cpse	r18, r16
    120e:	b8 f7       	brcc	.-18     	; 0x11fe <__ftoa_engine+0x174>
    1210:	7e 91       	ld	r23, -X
    1212:	70 61       	ori	r23, 0x10	; 16
    1214:	7d 93       	st	X+, r23
    1216:	30 f0       	brcs	.+12     	; 0x1224 <__ftoa_engine+0x19a>
    1218:	83 95       	inc	r24
    121a:	71 e3       	ldi	r23, 0x31	; 49
    121c:	7d 93       	st	X+, r23
    121e:	70 e3       	ldi	r23, 0x30	; 48
    1220:	2a 95       	dec	r18
    1222:	e1 f7       	brne	.-8      	; 0x121c <__ftoa_engine+0x192>
    1224:	11 24       	eor	r1, r1
    1226:	ef 90       	pop	r14
    1228:	ff 90       	pop	r15
    122a:	0f 91       	pop	r16
    122c:	1f 91       	pop	r17
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	99 27       	eor	r25, r25
    1234:	87 fd       	sbrc	r24, 7
    1236:	90 95       	com	r25
    1238:	08 95       	ret

0000123a <strnlen_P>:
    123a:	fc 01       	movw	r30, r24
    123c:	05 90       	lpm	r0, Z+
    123e:	61 50       	subi	r22, 0x01	; 1
    1240:	70 40       	sbci	r23, 0x00	; 0
    1242:	01 10       	cpse	r0, r1
    1244:	d8 f7       	brcc	.-10     	; 0x123c <strnlen_P+0x2>
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	8e 0f       	add	r24, r30
    124c:	9f 1f       	adc	r25, r31
    124e:	08 95       	ret

00001250 <strnlen>:
    1250:	fc 01       	movw	r30, r24
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	70 40       	sbci	r23, 0x00	; 0
    1256:	01 90       	ld	r0, Z+
    1258:	01 10       	cpse	r0, r1
    125a:	d8 f7       	brcc	.-10     	; 0x1252 <strnlen+0x2>
    125c:	80 95       	com	r24
    125e:	90 95       	com	r25
    1260:	8e 0f       	add	r24, r30
    1262:	9f 1f       	adc	r25, r31
    1264:	08 95       	ret

00001266 <fputc>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	fb 01       	movw	r30, r22
    1270:	23 81       	ldd	r18, Z+3	; 0x03
    1272:	21 fd       	sbrc	r18, 1
    1274:	03 c0       	rjmp	.+6      	; 0x127c <fputc+0x16>
    1276:	8f ef       	ldi	r24, 0xFF	; 255
    1278:	9f ef       	ldi	r25, 0xFF	; 255
    127a:	2c c0       	rjmp	.+88     	; 0x12d4 <fputc+0x6e>
    127c:	22 ff       	sbrs	r18, 2
    127e:	16 c0       	rjmp	.+44     	; 0x12ac <fputc+0x46>
    1280:	46 81       	ldd	r20, Z+6	; 0x06
    1282:	57 81       	ldd	r21, Z+7	; 0x07
    1284:	24 81       	ldd	r18, Z+4	; 0x04
    1286:	35 81       	ldd	r19, Z+5	; 0x05
    1288:	42 17       	cp	r20, r18
    128a:	53 07       	cpc	r21, r19
    128c:	44 f4       	brge	.+16     	; 0x129e <fputc+0x38>
    128e:	a0 81       	ld	r26, Z
    1290:	b1 81       	ldd	r27, Z+1	; 0x01
    1292:	9d 01       	movw	r18, r26
    1294:	2f 5f       	subi	r18, 0xFF	; 255
    1296:	3f 4f       	sbci	r19, 0xFF	; 255
    1298:	31 83       	std	Z+1, r19	; 0x01
    129a:	20 83       	st	Z, r18
    129c:	8c 93       	st	X, r24
    129e:	26 81       	ldd	r18, Z+6	; 0x06
    12a0:	37 81       	ldd	r19, Z+7	; 0x07
    12a2:	2f 5f       	subi	r18, 0xFF	; 255
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	37 83       	std	Z+7, r19	; 0x07
    12a8:	26 83       	std	Z+6, r18	; 0x06
    12aa:	14 c0       	rjmp	.+40     	; 0x12d4 <fputc+0x6e>
    12ac:	8b 01       	movw	r16, r22
    12ae:	ec 01       	movw	r28, r24
    12b0:	fb 01       	movw	r30, r22
    12b2:	00 84       	ldd	r0, Z+8	; 0x08
    12b4:	f1 85       	ldd	r31, Z+9	; 0x09
    12b6:	e0 2d       	mov	r30, r0
    12b8:	09 95       	icall
    12ba:	89 2b       	or	r24, r25
    12bc:	e1 f6       	brne	.-72     	; 0x1276 <fputc+0x10>
    12be:	d8 01       	movw	r26, r16
    12c0:	16 96       	adiw	r26, 0x06	; 6
    12c2:	8d 91       	ld	r24, X+
    12c4:	9c 91       	ld	r25, X
    12c6:	17 97       	sbiw	r26, 0x07	; 7
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	17 96       	adiw	r26, 0x07	; 7
    12cc:	9c 93       	st	X, r25
    12ce:	8e 93       	st	-X, r24
    12d0:	16 97       	sbiw	r26, 0x06	; 6
    12d2:	ce 01       	movw	r24, r28
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	08 95       	ret

000012de <sprintf>:
    12de:	ae e0       	ldi	r26, 0x0E	; 14
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e7       	ldi	r30, 0x75	; 117
    12e4:	f9 e0       	ldi	r31, 0x09	; 9
    12e6:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__prologue_saves__+0x1c>
    12ea:	0d 89       	ldd	r16, Y+21	; 0x15
    12ec:	1e 89       	ldd	r17, Y+22	; 0x16
    12ee:	86 e0       	ldi	r24, 0x06	; 6
    12f0:	8c 83       	std	Y+4, r24	; 0x04
    12f2:	1a 83       	std	Y+2, r17	; 0x02
    12f4:	09 83       	std	Y+1, r16	; 0x01
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	9f e7       	ldi	r25, 0x7F	; 127
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	ae 01       	movw	r20, r28
    1300:	47 5e       	subi	r20, 0xE7	; 231
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	6f 89       	ldd	r22, Y+23	; 0x17
    1306:	78 8d       	ldd	r23, Y+24	; 0x18
    1308:	ce 01       	movw	r24, r28
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	0e 94 91 04 	call	0x922	; 0x922 <vfprintf>
    1310:	ef 81       	ldd	r30, Y+7	; 0x07
    1312:	f8 85       	ldd	r31, Y+8	; 0x08
    1314:	e0 0f       	add	r30, r16
    1316:	f1 1f       	adc	r31, r17
    1318:	10 82       	st	Z, r1
    131a:	2e 96       	adiw	r28, 0x0e	; 14
    131c:	e4 e0       	ldi	r30, 0x04	; 4
    131e:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__epilogue_restores__+0x1c>

00001322 <__ultoa_invert>:
    1322:	fa 01       	movw	r30, r20
    1324:	aa 27       	eor	r26, r26
    1326:	28 30       	cpi	r18, 0x08	; 8
    1328:	51 f1       	breq	.+84     	; 0x137e <__ultoa_invert+0x5c>
    132a:	20 31       	cpi	r18, 0x10	; 16
    132c:	81 f1       	breq	.+96     	; 0x138e <__ultoa_invert+0x6c>
    132e:	e8 94       	clt
    1330:	6f 93       	push	r22
    1332:	6e 7f       	andi	r22, 0xFE	; 254
    1334:	6e 5f       	subi	r22, 0xFE	; 254
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	8f 4f       	sbci	r24, 0xFF	; 255
    133a:	9f 4f       	sbci	r25, 0xFF	; 255
    133c:	af 4f       	sbci	r26, 0xFF	; 255
    133e:	b1 e0       	ldi	r27, 0x01	; 1
    1340:	3e d0       	rcall	.+124    	; 0x13be <__ultoa_invert+0x9c>
    1342:	b4 e0       	ldi	r27, 0x04	; 4
    1344:	3c d0       	rcall	.+120    	; 0x13be <__ultoa_invert+0x9c>
    1346:	67 0f       	add	r22, r23
    1348:	78 1f       	adc	r23, r24
    134a:	89 1f       	adc	r24, r25
    134c:	9a 1f       	adc	r25, r26
    134e:	a1 1d       	adc	r26, r1
    1350:	68 0f       	add	r22, r24
    1352:	79 1f       	adc	r23, r25
    1354:	8a 1f       	adc	r24, r26
    1356:	91 1d       	adc	r25, r1
    1358:	a1 1d       	adc	r26, r1
    135a:	6a 0f       	add	r22, r26
    135c:	71 1d       	adc	r23, r1
    135e:	81 1d       	adc	r24, r1
    1360:	91 1d       	adc	r25, r1
    1362:	a1 1d       	adc	r26, r1
    1364:	20 d0       	rcall	.+64     	; 0x13a6 <__ultoa_invert+0x84>
    1366:	09 f4       	brne	.+2      	; 0x136a <__ultoa_invert+0x48>
    1368:	68 94       	set
    136a:	3f 91       	pop	r19
    136c:	2a e0       	ldi	r18, 0x0A	; 10
    136e:	26 9f       	mul	r18, r22
    1370:	11 24       	eor	r1, r1
    1372:	30 19       	sub	r19, r0
    1374:	30 5d       	subi	r19, 0xD0	; 208
    1376:	31 93       	st	Z+, r19
    1378:	de f6       	brtc	.-74     	; 0x1330 <__ultoa_invert+0xe>
    137a:	cf 01       	movw	r24, r30
    137c:	08 95       	ret
    137e:	46 2f       	mov	r20, r22
    1380:	47 70       	andi	r20, 0x07	; 7
    1382:	40 5d       	subi	r20, 0xD0	; 208
    1384:	41 93       	st	Z+, r20
    1386:	b3 e0       	ldi	r27, 0x03	; 3
    1388:	0f d0       	rcall	.+30     	; 0x13a8 <__ultoa_invert+0x86>
    138a:	c9 f7       	brne	.-14     	; 0x137e <__ultoa_invert+0x5c>
    138c:	f6 cf       	rjmp	.-20     	; 0x137a <__ultoa_invert+0x58>
    138e:	46 2f       	mov	r20, r22
    1390:	4f 70       	andi	r20, 0x0F	; 15
    1392:	40 5d       	subi	r20, 0xD0	; 208
    1394:	4a 33       	cpi	r20, 0x3A	; 58
    1396:	18 f0       	brcs	.+6      	; 0x139e <__ultoa_invert+0x7c>
    1398:	49 5d       	subi	r20, 0xD9	; 217
    139a:	31 fd       	sbrc	r19, 1
    139c:	40 52       	subi	r20, 0x20	; 32
    139e:	41 93       	st	Z+, r20
    13a0:	02 d0       	rcall	.+4      	; 0x13a6 <__ultoa_invert+0x84>
    13a2:	a9 f7       	brne	.-22     	; 0x138e <__ultoa_invert+0x6c>
    13a4:	ea cf       	rjmp	.-44     	; 0x137a <__ultoa_invert+0x58>
    13a6:	b4 e0       	ldi	r27, 0x04	; 4
    13a8:	a6 95       	lsr	r26
    13aa:	97 95       	ror	r25
    13ac:	87 95       	ror	r24
    13ae:	77 95       	ror	r23
    13b0:	67 95       	ror	r22
    13b2:	ba 95       	dec	r27
    13b4:	c9 f7       	brne	.-14     	; 0x13a8 <__ultoa_invert+0x86>
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	61 05       	cpc	r22, r1
    13ba:	71 05       	cpc	r23, r1
    13bc:	08 95       	ret
    13be:	9b 01       	movw	r18, r22
    13c0:	ac 01       	movw	r20, r24
    13c2:	0a 2e       	mov	r0, r26
    13c4:	06 94       	lsr	r0
    13c6:	57 95       	ror	r21
    13c8:	47 95       	ror	r20
    13ca:	37 95       	ror	r19
    13cc:	27 95       	ror	r18
    13ce:	ba 95       	dec	r27
    13d0:	c9 f7       	brne	.-14     	; 0x13c4 <__ultoa_invert+0xa2>
    13d2:	62 0f       	add	r22, r18
    13d4:	73 1f       	adc	r23, r19
    13d6:	84 1f       	adc	r24, r20
    13d8:	95 1f       	adc	r25, r21
    13da:	a0 1d       	adc	r26, r0
    13dc:	08 95       	ret

000013de <_exit>:
    13de:	f8 94       	cli

000013e0 <__stop_program>:
    13e0:	ff cf       	rjmp	.-2      	; 0x13e0 <__stop_program>
