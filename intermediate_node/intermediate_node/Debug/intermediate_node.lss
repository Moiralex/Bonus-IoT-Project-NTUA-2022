
intermediate_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024e  00800060  00001c18  00001cac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011b  008002ae  008002ae  00001efa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00001f98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8f  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070c  00000000  00000000  00002cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000adc  00000000  00000000  000033c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00003ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00004104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007fb  00000000  00000000  00004564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00004d5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
       4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_8>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      34:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <pstr_nan>:
     156:	4e 41 4e                                            NAN

00000159 <pstr_inity>:
     159:	49 4e 49 54 59                                      INITY

0000015e <pstr_inf>:
     15e:	49 4e 46                                            INF

00000161 <pwr_m10>:
     161:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     171:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000179 <pwr_p10>:
     179:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     189:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000192 <__ctors_end>:
     192:	11 24       	eor	r1, r1
     194:	1f be       	out	0x3f, r1	; 63
     196:	cf e5       	ldi	r28, 0x5F	; 95
     198:	d4 e0       	ldi	r29, 0x04	; 4
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
     19e:	12 e0       	ldi	r17, 0x02	; 2
     1a0:	a0 e6       	ldi	r26, 0x60	; 96
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e8 e1       	ldi	r30, 0x18	; 24
     1a6:	fc e1       	ldi	r31, 0x1C	; 28
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x10>
     1aa:	05 90       	lpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	ae 3a       	cpi	r26, 0xAE	; 174
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0xc>

000001b4 <__do_clear_bss>:
     1b4:	23 e0       	ldi	r18, 0x03	; 3
     1b6:	ae ea       	ldi	r26, 0xAE	; 174
     1b8:	b2 e0       	ldi	r27, 0x02	; 2
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a9 3c       	cpi	r26, 0xC9	; 201
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 93 04 	call	0x926	; 0x926 <main>
     1c8:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <lcd_init_sim>:
#define _SFR_ASM_COMPAT 1
#define __SFR_OFFSET 0

.global lcd_init_sim
lcd_init_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     1d0:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     1d2:	9f 93       	push	r25
ldi r24, 40 ; Όταν ο ελεγκτής της lcd τροφοδοτείται με
     1d4:	88 e2       	ldi	r24, 0x28	; 40
ldi r25, 0 ; ρεύμα εκτελεί την δική του αρχικοποίηση.
     1d6:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_msec ; Αναμονή 40 msec μέχρι αυτή να ολοκληρωθεί.
     1d8:	6d d0       	rcall	.+218    	; 0x2b4 <wait_msec>
ldi r24, 0x30
     1da:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1dc:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1de:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1e0:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1e2:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     1e6:	70 d0       	rcall	.+224    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     1e8:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     1ea:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     1ec:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     1ee:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     1f0:	6b d0       	rcall	.+214    	; 0x2c8 <wait_usec>
pop r25
     1f2:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     1f4:	8f 91       	pop	r24
ldi r24, 0x30
     1f6:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1f8:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1fa:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1fc:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1fe:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     200:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     202:	62 d0       	rcall	.+196    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     204:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     206:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     208:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     20a:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     20c:	5d d0       	rcall	.+186    	; 0x2c8 <wait_usec>
pop r25
     20e:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     210:	8f 91       	pop	r24
ldi r24,0x20 ; αλλαγή σε 4-bit mode
     212:	80 e2       	ldi	r24, 0x20	; 32
out PORTD, r24
     214:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     216:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     218:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     21a:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     21c:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     21e:	54 d0       	rcall	.+168    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     220:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     222:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     224:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     226:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     228:	4f d0       	rcall	.+158    	; 0x2c8 <wait_usec>
pop r25
     22a:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     22c:	8f 91       	pop	r24
ldi r24,0x28 ; επιλογή χαρακτήρων μεγέθους 5x8 κουκίδων
     22e:	88 e2       	ldi	r24, 0x28	; 40
rcall lcd_command_sim ; και εμφάνιση δύο γραμμών στην οθόνη
     230:	0f d0       	rcall	.+30     	; 0x250 <lcd_command_sim>
ldi r24,0x0c ; ενεργοποίηση της οθόνης, απόκρυψη του κέρσορα
     232:	8c e0       	ldi	r24, 0x0C	; 12
rcall lcd_command_sim
     234:	0d d0       	rcall	.+26     	; 0x250 <lcd_command_sim>
ldi r24,0x01 ; καθαρισμός της οθόνης
     236:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     238:	0b d0       	rcall	.+22     	; 0x250 <lcd_command_sim>
ldi r24, lo8(1530)
     23a:	8a ef       	ldi	r24, 0xFA	; 250
ldi r25, hi8(1530)
     23c:	95 e0       	ldi	r25, 0x05	; 5
rcall wait_usec
     23e:	44 d0       	rcall	.+136    	; 0x2c8 <wait_usec>
ldi r24 ,0x06 ; ενεργοποίηση αυτόματης αύξησης κατά 1 της διεύθυνσης
     240:	86 e0       	ldi	r24, 0x06	; 6
rcall lcd_command_sim ; που είναι αποθηκευμένη στον μετρητή διευθύνσεων και
     242:	06 d0       	rcall	.+12     	; 0x250 <lcd_command_sim>
; απενεργοποίηση της ολίσθησης ολόκληρης της οθόνης
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     244:	9f 91       	pop	r25
pop r24
     246:	8f 91       	pop	r24
ret
     248:	08 95       	ret

0000024a <lcd_clear>:


.global lcd_clear
lcd_clear:
ldi r24,0x01 ; καθαρισμός της οθόνης
     24a:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     24c:	01 d0       	rcall	.+2      	; 0x250 <lcd_command_sim>
ret
     24e:	08 95       	ret

00000250 <lcd_command_sim>:

lcd_command_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     250:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     252:	9f 93       	push	r25
cbi PORTD, PD2 ; επιλογή του καταχωρητή εντολών (PD2=0)
     254:	92 98       	cbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή της εντολής και αναμονή 39μsec
     256:	06 d0       	rcall	.+12     	; 0x264 <write_2_nibbles_sim>
ldi r24, 39 ; για την ολοκλήρωση της εκτέλεσης της από τον ελεγκτή της lcd.
     258:	87 e2       	ldi	r24, 0x27	; 39
ldi r25, 0 ; ΣΗΜ.: υπάρχουν δύο εντολές, οι clear display και return home,
     25a:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec ; που απαιτούν σημαντικά μεγαλύτερο χρονικό διάστημα.
     25c:	35 d0       	rcall	.+106    	; 0x2c8 <wait_usec>
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     25e:	9f 91       	pop	r25
pop r24
     260:	8f 91       	pop	r24
ret
     262:	08 95       	ret

00000264 <write_2_nibbles_sim>:

write_2_nibbles_sim:
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     264:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     266:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     268:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     26a:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     26c:	2d d0       	rcall	.+90     	; 0x2c8 <wait_usec>
pop r25
     26e:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     270:	8f 91       	pop	r24
push r24 ; στέλνει τα 4 MSB
     272:	8f 93       	push	r24
in r25, PIND ; διαβάζονται τα 4 LSB και τα ξαναστέλνουμε
     274:	90 b3       	in	r25, 0x10	; 16
andi r25, 0x0f ; για να μην χαλάσουμε την όποια προηγούμενη κατάσταση
     276:	9f 70       	andi	r25, 0x0F	; 15
andi r24, 0xf0 ; απομονώνονται τα 4 MSB και
     278:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25 ; συνδυάζονται με τα προϋπάρχοντα 4 LSB
     27a:	89 0f       	add	r24, r25
out PORTD, r24 ; και δίνονται στην έξοδο
     27c:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; δημιουργείται παλμός Enable στον ακροδέκτη PD3
     27e:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3 ; PD3=1 και μετά PD3=0
     280:	93 98       	cbi	0x12, 3	; 18
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     282:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     284:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     286:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     288:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     28a:	1e d0       	rcall	.+60     	; 0x2c8 <wait_usec>
pop r25
     28c:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     28e:	8f 91       	pop	r24
pop r24 ; στέλνει τα 4 LSB. Ανακτάται το byte.
     290:	8f 91       	pop	r24
swap r24 ; εναλλάσσονται τα 4 MSB με τα 4 LSB
     292:	82 95       	swap	r24
andi r24 ,0xf0 ; που με την σειρά τους αποστέλλονται
     294:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25
     296:	89 0f       	add	r24, r25
out PORTD, r24
     298:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; Νέος παλμός Enable
     29a:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     29c:	93 98       	cbi	0x12, 3	; 18
ret
     29e:	08 95       	ret

000002a0 <lcd_data_sim>:

lcd_data_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     2a0:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     2a2:	9f 93       	push	r25
sbi PORTD, PD2 ; επιλογή του καταχωρητή δεδομένων (PD2=1)
     2a4:	92 9a       	sbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή του byte
     2a6:	de df       	rcall	.-68     	; 0x264 <write_2_nibbles_sim>
ldi r24 ,43 ; αναμονή 43μsec μέχρι να ολοκληρωθεί η λήψη
     2a8:	8b e2       	ldi	r24, 0x2B	; 43
ldi r25 ,0 ; των δεδομένων από τον ελεγκτή της lcd
     2aa:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     2ac:	0d d0       	rcall	.+26     	; 0x2c8 <wait_usec>
pop r25 ;επανάφερε τους καταχωρητές r25:r24
     2ae:	9f 91       	pop	r25
pop r24
     2b0:	8f 91       	pop	r24
ret
     2b2:	08 95       	ret

000002b4 <wait_msec>:

.global wait_msec
wait_msec:
push r24 ; 2 κύκλοι (0.250 μsec)
     2b4:	8f 93       	push	r24
push r25 ; 2 κύκλοι
     2b6:	9f 93       	push	r25
ldi r24 , lo8(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
     2b8:	86 ee       	ldi	r24, 0xE6	; 230
ldi r25 , hi8(998) ; 1 κύκλος (0.125 μsec)
     2ba:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
     2bc:	05 d0       	rcall	.+10     	; 0x2c8 <wait_usec>
pop r25 ; 2 κύκλοι (0.250 μsec)
     2be:	9f 91       	pop	r25
pop r24 ; 2 κύκλοι
     2c0:	8f 91       	pop	r24
sbiw r24 , 1 ; 2 κύκλοι
     2c2:	01 97       	sbiw	r24, 0x01	; 1
brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2c4:	b9 f7       	brne	.-18     	; 0x2b4 <wait_msec>
ret ; 4 κύκλοι (0.500 μsec)
     2c6:	08 95       	ret

000002c8 <wait_usec>:

wait_usec:
sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
     2c8:	01 97       	sbiw	r24, 0x01	; 1
	...
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2d2:	d1 f7       	brne	.-12     	; 0x2c8 <wait_usec>
ret ; 4 κύκλοι (0.500 μsec)
     2d4:	08 95       	ret

000002d6 <print>:


.global print
print:
rcall lcd_data_sim
     2d6:	e4 df       	rcall	.-56     	; 0x2a0 <lcd_data_sim>
     2d8:	08 95       	ret

000002da <print_string>:
	while(c!='S') {
		c=usart_receive();
	}
	while(UCSRA&(1<<RXC))
	usart_receive(); //flush ServedClient out of read buffer
}
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	ec 01       	movw	r28, r24
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <print_string+0x1a>
     2e6:	fe 01       	movw	r30, r28
     2e8:	e8 0f       	add	r30, r24
     2ea:	f9 1f       	adc	r31, r25
     2ec:	80 81       	ld	r24, Z
     2ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <print>
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	81 2f       	mov	r24, r17
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fe 01       	movw	r30, r28
     2fa:	01 90       	ld	r0, Z+
     2fc:	00 20       	and	r0, r0
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <print_string+0x20>
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	ec 1b       	sub	r30, r28
     304:	fd 0b       	sbc	r31, r29
     306:	8e 17       	cp	r24, r30
     308:	9f 07       	cpc	r25, r31
     30a:	68 f3       	brcs	.-38     	; 0x2e6 <print_string+0xc>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	08 95       	ret

00000314 <usart_init>:
     314:	1b b8       	out	0x0b, r1	; 11
     316:	28 e1       	ldi	r18, 0x18	; 24
     318:	2a b9       	out	0x0a, r18	; 10
     31a:	90 bd       	out	0x20, r25	; 32
     31c:	89 b9       	out	0x09, r24	; 9
     31e:	86 e8       	ldi	r24, 0x86	; 134
     320:	80 bd       	out	0x20, r24	; 32
     322:	08 95       	ret

00000324 <usart_transmit>:
     324:	5d 9b       	sbis	0x0b, 5	; 11
     326:	fe cf       	rjmp	.-4      	; 0x324 <usart_transmit>
     328:	8c b9       	out	0x0c, r24	; 12
     32a:	08 95       	ret

0000032c <usart_receive>:
     32c:	5f 9b       	sbis	0x0b, 7	; 11
     32e:	fe cf       	rjmp	.-4      	; 0x32c <usart_receive>
     330:	8c b1       	in	r24, 0x0c	; 12
     332:	08 95       	ret

00000334 <clear_buffer>:
     334:	84 e6       	ldi	r24, 0x64	; 100
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <wait_msec>
     33c:	02 c0       	rjmp	.+4      	; 0x342 <clear_buffer+0xe>
     33e:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     342:	5f 99       	sbic	0x0b, 7	; 11
     344:	fc cf       	rjmp	.-8      	; 0x33e <clear_buffer+0xa>
     346:	08 95       	ret

00000348 <serialWrite>:
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec 01       	movw	r28, r24
     350:	10 e0       	ldi	r17, 0x00	; 0
     352:	07 c0       	rjmp	.+14     	; 0x362 <serialWrite+0x1a>
     354:	fe 01       	movw	r30, r28
     356:	e8 0f       	add	r30, r24
     358:	f9 1f       	adc	r31, r25
     35a:	80 81       	ld	r24, Z
     35c:	0e 94 92 01 	call	0x324	; 0x324 <usart_transmit>
     360:	1f 5f       	subi	r17, 0xFF	; 255
     362:	81 2f       	mov	r24, r17
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	fe 01       	movw	r30, r28
     368:	01 90       	ld	r0, Z+
     36a:	00 20       	and	r0, r0
     36c:	e9 f7       	brne	.-6      	; 0x368 <serialWrite+0x20>
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	ec 1b       	sub	r30, r28
     372:	fd 0b       	sbc	r31, r29
     374:	8e 17       	cp	r24, r30
     376:	9f 07       	cpc	r25, r31
     378:	68 f3       	brcs	.-38     	; 0x354 <serialWrite+0xc>
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	08 95       	ret

00000382 <sendCommand>:
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
     388:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
     38c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     390:	0c c0       	rjmp	.+24     	; 0x3aa <sendCommand+0x28>
     392:	86 34       	cpi	r24, 0x46	; 70
     394:	41 f4       	brne	.+16     	; 0x3a6 <sendCommand+0x24>
     396:	02 c0       	rjmp	.+4      	; 0x39c <sendCommand+0x1a>
     398:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     39c:	5f 99       	sbic	0x0b, 7	; 11
     39e:	fc cf       	rjmp	.-8      	; 0x398 <sendCommand+0x16>
     3a0:	ce 01       	movw	r24, r28
     3a2:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
     3a6:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     3aa:	83 35       	cpi	r24, 0x53	; 83
     3ac:	91 f7       	brne	.-28     	; 0x392 <sendCommand+0x10>
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <sendCommand+0x32>
     3b0:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     3b4:	5f 99       	sbic	0x0b, 7	; 11
     3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <sendCommand+0x2e>
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <__vector_8>:

ISR(TIMER1_OVF_vect) {
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ef 93       	push	r30
     3ee:	ff 93       	push	r31
	char c;
	bool failed;
	int counter =0;
	
	cli();
     3f0:	f8 94       	cli
	//PORTB=PORTB^0xFF;
	//PORTB=0x00;
	
	if(!first) {
     3f2:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <first>
     3f6:	81 11       	cpse	r24, r1
     3f8:	76 c2       	rjmp	.+1260   	; 0x8e6 <__stack+0x487>
     3fa:	ee 24       	eor	r14, r14
     3fc:	e3 94       	inc	r14
     3fe:	f1 2c       	mov	r15, r1
     400:	1d c1       	rjmp	.+570    	; 0x63c <__stack+0x1dd>
		for(int k=1; k<=sensor_boards; ++k){
			counter = 0;
			failed=false;

			sprintf(string_to_send, "ESP:ssid:\"Sens_Board%d\"\n", k); //connect to sensor boards and receive values
     402:	ff 92       	push	r15
     404:	ef 92       	push	r14
     406:	80 e6       	ldi	r24, 0x60	; 96
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	8a eb       	ldi	r24, 0xBA	; 186
     410:	92 e0       	ldi	r25, 0x02	; 2
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
			//strcpy(string_to_send, "ESP:ssid:\"Sens_Board1\"\n");
			sendCommand(string_to_send);
     41a:	8a eb       	ldi	r24, 0xBA	; 186
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
			
			strcpy(string_to_send, "ESP:password:\"awesomePassword\"\n");
     422:	80 e2       	ldi	r24, 0x20	; 32
     424:	e9 e7       	ldi	r30, 0x79	; 121
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	aa eb       	ldi	r26, 0xBA	; 186
     42a:	b2 e0       	ldi	r27, 0x02	; 2
     42c:	01 90       	ld	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	8a 95       	dec	r24
     432:	e1 f7       	brne	.-8      	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
			//print_string(string_to_send);
			sendCommand(string_to_send);
     434:	8a eb       	ldi	r24, 0xBA	; 186
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
			//PORTB=0x00;
			//strcpy(string_to_send, "ESP:getAllValues\n");
			//serialWrite(string_to_send);
			//printResponse();
			//sendCommand(string_to_send);
			PORTB=PORTB^0xFF;
     43c:	88 b3       	in	r24, 0x18	; 24
     43e:	80 95       	com	r24
     440:	88 bb       	out	0x18, r24	; 24
			strcpy(string_to_send, "ESP:sensorValue:\"Moist_Sensor\"[request]\n");
     442:	89 e2       	ldi	r24, 0x29	; 41
     444:	e9 e9       	ldi	r30, 0x99	; 153
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	aa eb       	ldi	r26, 0xBA	; 186
     44a:	b2 e0       	ldi	r27, 0x02	; 2
     44c:	01 90       	ld	r0, Z+
     44e:	0d 92       	st	X+, r0
     450:	8a 95       	dec	r24
     452:	e1 f7       	brne	.-8      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
			//serialWrite(string_to_send);
			sendCommand(string_to_send);
     454:	8a eb       	ldi	r24, 0xBA	; 186
     456:	92 e0       	ldi	r25, 0x02	; 2
     458:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
			//printResponse();
			strcpy(string_to_send, "ESP:sensorValue:\"Tmp_Sensor\"[request]\n");
     45c:	87 e2       	ldi	r24, 0x27	; 39
     45e:	e2 ec       	ldi	r30, 0xC2	; 194
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	aa eb       	ldi	r26, 0xBA	; 186
     464:	b2 e0       	ldi	r27, 0x02	; 2
     466:	01 90       	ld	r0, Z+
     468:	0d 92       	st	X+, r0
     46a:	8a 95       	dec	r24
     46c:	e1 f7       	brne	.-8      	; 0x466 <__stack+0x7>
			sendCommand(string_to_send);
     46e:	8a eb       	ldi	r24, 0xBA	; 186
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
			//while(UCSRA&(1<<RXC))
			//usart_receive();
			//wait_msec(1000);
			//while(UCSRA&(1<<RXC))
			//usart_receive();
			clear_buffer();
     476:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			
			strcpy(string_to_send, "ESP:connect\n");
     47a:	8d e0       	ldi	r24, 0x0D	; 13
     47c:	e9 ee       	ldi	r30, 0xE9	; 233
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	aa eb       	ldi	r26, 0xBA	; 186
     482:	b2 e0       	ldi	r27, 0x02	; 2
     484:	01 90       	ld	r0, Z+
     486:	0d 92       	st	X+, r0
     488:	8a 95       	dec	r24
     48a:	e1 f7       	brne	.-8      	; 0x484 <__stack+0x25>
			sendCommand(string_to_send);
     48c:	8a eb       	ldi	r24, 0xBA	; 186
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
			//serialWrite(string_to_send);
			//printResponse();
			//PORTB=0x00;
			
			strcpy(string_to_send, "ESP:clientTransmit\n");
     494:	84 e1       	ldi	r24, 0x14	; 20
     496:	e6 ef       	ldi	r30, 0xF6	; 246
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	aa eb       	ldi	r26, 0xBA	; 186
     49c:	b2 e0       	ldi	r27, 0x02	; 2
     49e:	01 90       	ld	r0, Z+
     4a0:	0d 92       	st	X+, r0
     4a2:	8a 95       	dec	r24
     4a4:	e1 f7       	brne	.-8      	; 0x49e <__stack+0x3f>
			sendCommand(string_to_send);
     4a6:	8a eb       	ldi	r24, 0xBA	; 186
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
			//serialWrite(string_to_send);
			//printResponse();
			clear_buffer();
     4ae:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			strcpy(string_to_send, "ESP:getValue:\"Moist_Sensor\"\n");
     4b2:	8d e1       	ldi	r24, 0x1D	; 29
     4b4:	ea e0       	ldi	r30, 0x0A	; 10
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	aa eb       	ldi	r26, 0xBA	; 186
     4ba:	b2 e0       	ldi	r27, 0x02	; 2
     4bc:	01 90       	ld	r0, Z+
     4be:	0d 92       	st	X+, r0
     4c0:	8a 95       	dec	r24
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <__stack+0x5d>
			//sendCommand(string_to_send);
			serialWrite(string_to_send);
     4c4:	8a eb       	ldi	r24, 0xBA	; 186
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
			//printResponse();
			
			counter=0;
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     4dc:	82 32       	cpi	r24, 0x22	; 34
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <__stack+0x79>
			c=usart_receive(); //read most significant digit
     4e0:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(c=='F')
     4e4:	86 34       	cpi	r24, 0x46	; 70
     4e6:	11 f0       	breq	.+4      	; 0x4ec <__stack+0x8d>
	//PORTB=0x00;
	
	if(!first) {
		for(int k=1; k<=sensor_boards; ++k){
			counter = 0;
			failed=false;
     4e8:	d1 2c       	mov	r13, r1
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__stack+0x91>
			
			counter=0;
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
     4ec:	dd 24       	eor	r13, r13
     4ee:	d3 94       	inc	r13
	//PORTB=0x00;
	
	if(!first) {
		for(int k=1; k<=sensor_boards; ++k){
			counter = 0;
			failed=false;
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	09 c0       	rjmp	.+18     	; 0x508 <__stack+0xa9>
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){ // read the whole number (until " is read)
				conv_buffer[counter++]=c;
     4f6:	8e 01       	movw	r16, r28
     4f8:	0f 5f       	subi	r16, 0xFF	; 255
     4fa:	1f 4f       	sbci	r17, 0xFF	; 255
     4fc:	c1 54       	subi	r28, 0x41	; 65
     4fe:	dc 4f       	sbci	r29, 0xFC	; 252
     500:	88 83       	st	Y, r24
				c = usart_receive();
     502:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){ // read the whole number (until " is read)
				conv_buffer[counter++]=c;
     506:	e8 01       	movw	r28, r16
			counter=0;
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){ // read the whole number (until " is read)
     508:	82 32       	cpi	r24, 0x22	; 34
     50a:	11 f0       	breq	.+4      	; 0x510 <__stack+0xb1>
     50c:	dd 20       	and	r13, r13
     50e:	99 f3       	breq	.-26     	; 0x4f6 <__stack+0x97>
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
     510:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(!failed){
     514:	d1 10       	cpse	r13, r1
     516:	2f c0       	rjmp	.+94     	; 0x576 <__stack+0x117>
     518:	25 e0       	ldi	r18, 0x05	; 5
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	0c c0       	rjmp	.+24     	; 0x536 <__stack+0xd7>
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
     51e:	f9 01       	movw	r30, r18
     520:	e8 1b       	sub	r30, r24
     522:	f9 0b       	sbc	r31, r25
     524:	e1 54       	subi	r30, 0x41	; 65
     526:	fc 4f       	sbci	r31, 0xFC	; 252
     528:	80 81       	ld	r24, Z
     52a:	f9 01       	movw	r30, r18
     52c:	e1 54       	subi	r30, 0x41	; 65
     52e:	fc 4f       	sbci	r31, 0xFC	; 252
     530:	80 83       	st	Z, r24
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     532:	21 50       	subi	r18, 0x01	; 1
     534:	31 09       	sbc	r19, r1
     536:	86 e0       	ldi	r24, 0x06	; 6
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	8c 1b       	sub	r24, r28
     53c:	9d 0b       	sbc	r25, r29
     53e:	28 17       	cp	r18, r24
     540:	39 07       	cpc	r19, r25
     542:	6c f7       	brge	.-38     	; 0x51e <__stack+0xbf>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	07 c0       	rjmp	.+14     	; 0x558 <__stack+0xf9>
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
					conv_buffer[i] = '0';
     54a:	f9 01       	movw	r30, r18
     54c:	e1 54       	subi	r30, 0x41	; 65
     54e:	fc 4f       	sbci	r31, 0xFC	; 252
     550:	40 e3       	ldi	r20, 0x30	; 48
     552:	40 83       	st	Z, r20
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
     554:	2f 5f       	subi	r18, 0xFF	; 255
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	28 17       	cp	r18, r24
     55a:	39 07       	cpc	r19, r25
     55c:	b4 f3       	brlt	.-20     	; 0x54a <__stack+0xeb>
					conv_buffer[i] = '0';
				}
				//print_string(conv_buffer);
				moistures[k-1]=atoi(conv_buffer);
     55e:	8f eb       	ldi	r24, 0xBF	; 191
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	0e 94 85 0a 	call	0x150a	; 0x150a <atoi>
     566:	f7 01       	movw	r30, r14
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	ee 0f       	add	r30, r30
     56c:	ff 1f       	adc	r31, r31
     56e:	ee 54       	subi	r30, 0x4E	; 78
     570:	fd 4f       	sbci	r31, 0xFD	; 253
     572:	91 83       	std	Z+1, r25	; 0x01
     574:	80 83       	st	Z, r24
			}
			
			clear_buffer();
     576:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			strcpy(string_to_send, "ESP:getValue:\"Tmp_Sensor\"\n");
     57a:	8b e1       	ldi	r24, 0x1B	; 27
     57c:	e7 e2       	ldi	r30, 0x27	; 39
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	aa eb       	ldi	r26, 0xBA	; 186
     582:	b2 e0       	ldi	r27, 0x02	; 2
     584:	01 90       	ld	r0, Z+
     586:	0d 92       	st	X+, r0
     588:	8a 95       	dec	r24
     58a:	e1 f7       	brne	.-8      	; 0x584 <__stack+0x125>
			serialWrite(string_to_send);
     58c:	8a eb       	ldi	r24, 0xBA	; 186
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
			//printResponse();

			//c=getChar();
			counter = 0;
			while(usart_receive() != '"' && !failed);
     594:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     598:	82 32       	cpi	r24, 0x22	; 34
     59a:	11 f0       	breq	.+4      	; 0x5a0 <__stack+0x141>
     59c:	dd 20       	and	r13, r13
     59e:	d1 f3       	breq	.-12     	; 0x594 <__stack+0x135>
			c = usart_receive();
     5a0:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(c=='F')
     5a4:	86 34       	cpi	r24, 0x46	; 70
     5a6:	11 f4       	brne	.+4      	; 0x5ac <__stack+0x14d>
			failed=true;
     5a8:	dd 24       	eor	r13, r13
     5aa:	d3 94       	inc	r13
     5ac:	c0 e0       	ldi	r28, 0x00	; 0
     5ae:	d0 e0       	ldi	r29, 0x00	; 0
     5b0:	09 c0       	rjmp	.+18     	; 0x5c4 <__stack+0x165>
			while(c != '"' && !failed){
				conv_buffer[counter++]=c;
     5b2:	8e 01       	movw	r16, r28
     5b4:	0f 5f       	subi	r16, 0xFF	; 255
     5b6:	1f 4f       	sbci	r17, 0xFF	; 255
     5b8:	c1 54       	subi	r28, 0x41	; 65
     5ba:	dc 4f       	sbci	r29, 0xFC	; 252
     5bc:	88 83       	st	Y, r24
				c = usart_receive();
     5be:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			while(usart_receive() != '"' && !failed);
			c = usart_receive();
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){
				conv_buffer[counter++]=c;
     5c2:	e8 01       	movw	r28, r16
			counter = 0;
			while(usart_receive() != '"' && !failed);
			c = usart_receive();
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){
     5c4:	82 32       	cpi	r24, 0x22	; 34
     5c6:	11 f0       	breq	.+4      	; 0x5cc <__stack+0x16d>
     5c8:	dd 20       	and	r13, r13
     5ca:	99 f3       	breq	.-26     	; 0x5b2 <__stack+0x153>
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
     5cc:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(!failed){
     5d0:	d1 10       	cpse	r13, r1
     5d2:	31 c0       	rjmp	.+98     	; 0x636 <__stack+0x1d7>
     5d4:	25 e0       	ldi	r18, 0x05	; 5
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	0c c0       	rjmp	.+24     	; 0x5f2 <__stack+0x193>
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
     5da:	f9 01       	movw	r30, r18
     5dc:	e8 1b       	sub	r30, r24
     5de:	f9 0b       	sbc	r31, r25
     5e0:	e1 54       	subi	r30, 0x41	; 65
     5e2:	fc 4f       	sbci	r31, 0xFC	; 252
     5e4:	80 81       	ld	r24, Z
     5e6:	f9 01       	movw	r30, r18
     5e8:	e1 54       	subi	r30, 0x41	; 65
     5ea:	fc 4f       	sbci	r31, 0xFC	; 252
     5ec:	80 83       	st	Z, r24
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     5ee:	21 50       	subi	r18, 0x01	; 1
     5f0:	31 09       	sbc	r19, r1
     5f2:	86 e0       	ldi	r24, 0x06	; 6
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	8c 1b       	sub	r24, r28
     5f8:	9d 0b       	sbc	r25, r29
     5fa:	28 17       	cp	r18, r24
     5fc:	39 07       	cpc	r19, r25
     5fe:	6c f7       	brge	.-38     	; 0x5da <__stack+0x17b>
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	07 c0       	rjmp	.+14     	; 0x614 <__stack+0x1b5>
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
					conv_buffer[i] = '0';
     606:	f9 01       	movw	r30, r18
     608:	e1 54       	subi	r30, 0x41	; 65
     60a:	fc 4f       	sbci	r31, 0xFC	; 252
     60c:	40 e3       	ldi	r20, 0x30	; 48
     60e:	40 83       	st	Z, r20
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
     610:	2f 5f       	subi	r18, 0xFF	; 255
     612:	3f 4f       	sbci	r19, 0xFF	; 255
     614:	28 17       	cp	r18, r24
     616:	39 07       	cpc	r19, r25
     618:	b4 f3       	brlt	.-20     	; 0x606 <__stack+0x1a7>
					conv_buffer[i] = '0';
				}
				//print_string(conv_buffer);
				//print_string("\n");
				temperatures[k-1]=atof(conv_buffer);
     61a:	8f eb       	ldi	r24, 0xBF	; 191
     61c:	93 e0       	ldi	r25, 0x03	; 3
     61e:	0e 94 81 0a 	call	0x1502	; 0x1502 <atof>
     622:	e7 01       	movw	r28, r14
     624:	21 97       	sbiw	r28, 0x01	; 1
     626:	cc 0f       	add	r28, r28
     628:	dd 1f       	adc	r29, r29
     62a:	c4 54       	subi	r28, 0x44	; 68
     62c:	dc 4f       	sbci	r29, 0xFC	; 252
     62e:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fixsfsi>
     632:	79 83       	std	Y+1, r23	; 0x01
     634:	68 83       	st	Y, r22
	cli();
	//PORTB=PORTB^0xFF;
	//PORTB=0x00;
	
	if(!first) {
		for(int k=1; k<=sensor_boards; ++k){
     636:	8f ef       	ldi	r24, 0xFF	; 255
     638:	e8 1a       	sub	r14, r24
     63a:	f8 0a       	sbc	r15, r24
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	e9 16       	cp	r14, r25
     640:	f1 04       	cpc	r15, r1
     642:	0c f4       	brge	.+2      	; 0x646 <__stack+0x1e7>
     644:	de ce       	rjmp	.-580    	; 0x402 <__DATA_REGION_LENGTH__+0x2>
		}


		//calculate averages and variances and transmit them to main node

		tmp_avg=0.0;
     646:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <__data_end>
     64a:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <__data_end+0x1>
     64e:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <__data_end+0x2>
     652:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <__data_end+0x3>
		moist_avg=0;
     656:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <moist_avg+0x1>
     65a:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <moist_avg>
		for(int i=0; i<sensor_boards; ++i) {
     65e:	c0 e0       	ldi	r28, 0x00	; 0
     660:	d0 e0       	ldi	r29, 0x00	; 0
     662:	32 c0       	rjmp	.+100    	; 0x6c8 <__stack+0x269>
			moist_avg += moistures[i];
     664:	ce 01       	movw	r24, r28
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	fc 01       	movw	r30, r24
     66c:	ee 54       	subi	r30, 0x4E	; 78
     66e:	fd 4f       	sbci	r31, 0xFD	; 253
     670:	20 81       	ld	r18, Z
     672:	31 81       	ldd	r19, Z+1	; 0x01
     674:	40 91 3a 03 	lds	r20, 0x033A	; 0x80033a <moist_avg>
     678:	50 91 3b 03 	lds	r21, 0x033B	; 0x80033b <moist_avg+0x1>
     67c:	24 0f       	add	r18, r20
     67e:	35 1f       	adc	r19, r21
     680:	30 93 3b 03 	sts	0x033B, r19	; 0x80033b <moist_avg+0x1>
     684:	20 93 3a 03 	sts	0x033A, r18	; 0x80033a <moist_avg>
			tmp_avg += temperatures[i];
     688:	fc 01       	movw	r30, r24
     68a:	e4 54       	subi	r30, 0x44	; 68
     68c:	fc 4f       	sbci	r31, 0xFC	; 252
     68e:	60 81       	ld	r22, Z
     690:	71 81       	ldd	r23, Z+1	; 0x01
     692:	07 2e       	mov	r0, r23
     694:	00 0c       	add	r0, r0
     696:	88 0b       	sbc	r24, r24
     698:	99 0b       	sbc	r25, r25
     69a:	0e 94 d4 05 	call	0xba8	; 0xba8 <__floatsisf>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <__data_end>
     6a6:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <__data_end+0x1>
     6aa:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end+0x2>
     6ae:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <__data_end+0x3>
     6b2:	0e 94 30 05 	call	0xa60	; 0xa60 <__addsf3>
     6b6:	60 93 ae 02 	sts	0x02AE, r22	; 0x8002ae <__data_end>
     6ba:	70 93 af 02 	sts	0x02AF, r23	; 0x8002af <__data_end+0x1>
     6be:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end+0x2>
     6c2:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <__data_end+0x3>

		//calculate averages and variances and transmit them to main node

		tmp_avg=0.0;
		moist_avg=0;
		for(int i=0; i<sensor_boards; ++i) {
     6c6:	21 96       	adiw	r28, 0x01	; 1
     6c8:	1c 16       	cp	r1, r28
     6ca:	1d 06       	cpc	r1, r29
     6cc:	5c f6       	brge	.-106    	; 0x664 <__stack+0x205>
			moist_avg += moistures[i];
			tmp_avg += temperatures[i];
		}
		moist_avg /= sensor_boards;
     6ce:	00 91 3a 03 	lds	r16, 0x033A	; 0x80033a <moist_avg>
     6d2:	10 91 3b 03 	lds	r17, 0x033B	; 0x80033b <moist_avg+0x1>
		tmp_avg /= sensor_boards;
     6d6:	f0 90 ae 02 	lds	r15, 0x02AE	; 0x8002ae <__data_end>
     6da:	e0 90 af 02 	lds	r14, 0x02AF	; 0x8002af <__data_end+0x1>
     6de:	d0 90 b0 02 	lds	r13, 0x02B0	; 0x8002b0 <__data_end+0x2>
     6e2:	c0 90 b1 02 	lds	r12, 0x02B1	; 0x8002b1 <__data_end+0x3>

		for(int i=0; i<sensor_boards; ++i) {
     6e6:	c0 e0       	ldi	r28, 0x00	; 0
     6e8:	d0 e0       	ldi	r29, 0x00	; 0
     6ea:	44 c0       	rjmp	.+136    	; 0x774 <__stack+0x315>
			moist_var += (moistures[i]-moist_avg)*(moistures[i]-moist_avg);
     6ec:	ce 01       	movw	r24, r28
     6ee:	88 0f       	add	r24, r24
     6f0:	99 1f       	adc	r25, r25
     6f2:	fc 01       	movw	r30, r24
     6f4:	ee 54       	subi	r30, 0x4E	; 78
     6f6:	fd 4f       	sbci	r31, 0xFD	; 253
     6f8:	20 81       	ld	r18, Z
     6fa:	31 81       	ldd	r19, Z+1	; 0x01
     6fc:	20 1b       	sub	r18, r16
     6fe:	31 0b       	sbc	r19, r17
     700:	22 9f       	mul	r18, r18
     702:	a0 01       	movw	r20, r0
     704:	23 9f       	mul	r18, r19
     706:	50 0d       	add	r21, r0
     708:	50 0d       	add	r21, r0
     70a:	11 24       	eor	r1, r1
     70c:	20 91 b4 02 	lds	r18, 0x02B4	; 0x8002b4 <moist_var>
     710:	30 91 b5 02 	lds	r19, 0x02B5	; 0x8002b5 <moist_var+0x1>
     714:	24 0f       	add	r18, r20
     716:	35 1f       	adc	r19, r21
     718:	30 93 b5 02 	sts	0x02B5, r19	; 0x8002b5 <moist_var+0x1>
     71c:	20 93 b4 02 	sts	0x02B4, r18	; 0x8002b4 <moist_var>
			tmp_var_f += (temperatures[i]-tmp_avg)*(temperatures[i]-tmp_avg);
     720:	fc 01       	movw	r30, r24
     722:	e4 54       	subi	r30, 0x44	; 68
     724:	fc 4f       	sbci	r31, 0xFC	; 252
     726:	60 81       	ld	r22, Z
     728:	71 81       	ldd	r23, Z+1	; 0x01
     72a:	07 2e       	mov	r0, r23
     72c:	00 0c       	add	r0, r0
     72e:	88 0b       	sbc	r24, r24
     730:	99 0b       	sbc	r25, r25
     732:	0e 94 d4 05 	call	0xba8	; 0xba8 <__floatsisf>
     736:	2f 2d       	mov	r18, r15
     738:	3e 2d       	mov	r19, r14
     73a:	4d 2d       	mov	r20, r13
     73c:	5c 2d       	mov	r21, r12
     73e:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__subsf3>
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__mulsf3>
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
     74e:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <tmp_var_f>
     752:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <tmp_var_f+0x1>
     756:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <tmp_var_f+0x2>
     75a:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <tmp_var_f+0x3>
     75e:	0e 94 30 05 	call	0xa60	; 0xa60 <__addsf3>
     762:	60 93 b6 02 	sts	0x02B6, r22	; 0x8002b6 <tmp_var_f>
     766:	70 93 b7 02 	sts	0x02B7, r23	; 0x8002b7 <tmp_var_f+0x1>
     76a:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <tmp_var_f+0x2>
     76e:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <tmp_var_f+0x3>
			tmp_avg += temperatures[i];
		}
		moist_avg /= sensor_boards;
		tmp_avg /= sensor_boards;

		for(int i=0; i<sensor_boards; ++i) {
     772:	21 96       	adiw	r28, 0x01	; 1
     774:	1c 16       	cp	r1, r28
     776:	1d 06       	cpc	r1, r29
     778:	0c f0       	brlt	.+2      	; 0x77c <__stack+0x31d>
     77a:	b8 cf       	rjmp	.-144    	; 0x6ec <__stack+0x28d>
			moist_var += (moistures[i]-moist_avg)*(moistures[i]-moist_avg);
			tmp_var_f += (temperatures[i]-tmp_avg)*(temperatures[i]-tmp_avg);
		}
		moist_var /= sensor_boards;
     77c:	c0 91 b4 02 	lds	r28, 0x02B4	; 0x8002b4 <moist_var>
     780:	d0 91 b5 02 	lds	r29, 0x02B5	; 0x8002b5 <moist_var+0x1>
		tmp_var_f /= sensor_boards;
     784:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <tmp_var_f>
     788:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <tmp_var_f+0x1>
     78c:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <tmp_var_f+0x2>
     790:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <tmp_var_f+0x3>
		tmp_var = (int)tmp_var_f;
     794:	0e 94 9c 05 	call	0xb38	; 0xb38 <__fixsfsi>
     798:	60 93 c5 03 	sts	0x03C5, r22	; 0x8003c5 <tmp_var>
     79c:	70 93 c6 03 	sts	0x03C6, r23	; 0x8003c6 <tmp_var+0x1>
		
		//PORTB=0x00;

		//debug
		sprintf(string_to_send, "%d %.1f %d %d", moist_avg, tmp_avg, moist_var, tmp_var);
     7a0:	7f 93       	push	r23
     7a2:	6f 93       	push	r22
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	cf 92       	push	r12
     7aa:	df 92       	push	r13
     7ac:	ef 92       	push	r14
     7ae:	ff 92       	push	r15
     7b0:	1f 93       	push	r17
     7b2:	0f 93       	push	r16
     7b4:	82 e4       	ldi	r24, 0x42	; 66
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	9f 93       	push	r25
     7ba:	8f 93       	push	r24
     7bc:	ca eb       	ldi	r28, 0xBA	; 186
     7be:	d2 e0       	ldi	r29, 0x02	; 2
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		print_string(string_to_send);
     7c8:	ce 01       	movw	r24, r28
     7ca:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>
		//end_debug




		strcpy(string_to_send, "ESP:ssid:\"Main_Board\"\n");
     7ce:	87 e1       	ldi	r24, 0x17	; 23
     7d0:	e0 e5       	ldi	r30, 0x50	; 80
     7d2:	f1 e0       	ldi	r31, 0x01	; 1
     7d4:	de 01       	movw	r26, r28
     7d6:	01 90       	ld	r0, Z+
     7d8:	0d 92       	st	X+, r0
     7da:	8a 95       	dec	r24
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <__stack+0x377>
		sendCommand(string_to_send);
     7de:	ce 01       	movw	r24, r28
     7e0:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		strcpy(string_to_send, "ESP:password:\"awesomePassword\"\n");
     7e4:	80 e2       	ldi	r24, 0x20	; 32
     7e6:	e9 e7       	ldi	r30, 0x79	; 121
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	de 01       	movw	r26, r28
     7ec:	01 90       	ld	r0, Z+
     7ee:	0d 92       	st	X+, r0
     7f0:	8a 95       	dec	r24
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <__stack+0x38d>
		sendCommand(string_to_send);
     7f4:	ce 01       	movw	r24, r28
     7f6:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
		//PORTB=0xFF;
		sprintf(string_to_send, "ESP:sensorValue:\"Moist_avg%d\"[%d]\n", board_no, moist_avg);
     7fa:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <moist_avg+0x1>
     7fe:	8f 93       	push	r24
     800:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <moist_avg>
     804:	8f 93       	push	r24
     806:	1f 92       	push	r1
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	1f 93       	push	r17
     80c:	87 e6       	ldi	r24, 0x67	; 103
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		sendCommand(string_to_send); //send command to set the value of the sensor
     81c:	ce 01       	movw	r24, r28
     81e:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
		//serialWrite(string_to_send);
		//printResponse();
		
		//PORTB=0x00;
		
		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_avg%d\"[%.1f]\n", board_no, tmp_avg);
     822:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <__data_end+0x3>
     826:	8f 93       	push	r24
     828:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end+0x2>
     82c:	8f 93       	push	r24
     82e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <__data_end+0x1>
     832:	8f 93       	push	r24
     834:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <__data_end>
     838:	8f 93       	push	r24
     83a:	1f 92       	push	r1
     83c:	1f 93       	push	r17
     83e:	8a e8       	ldi	r24, 0x8A	; 138
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	9f 93       	push	r25
     844:	8f 93       	push	r24
     846:	df 93       	push	r29
     848:	cf 93       	push	r28
     84a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		sendCommand(string_to_send); //send command to set the value of the sensor
     84e:	8d b7       	in	r24, 0x3d	; 61
     850:	9e b7       	in	r25, 0x3e	; 62
     852:	80 96       	adiw	r24, 0x20	; 32
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	9e bf       	out	0x3e, r25	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	8d bf       	out	0x3d, r24	; 61
     85e:	ce 01       	movw	r24, r28
     860:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:sensorValue:\"Moist_var%d\"[%d]\n", board_no, moist_var);
     864:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <moist_var+0x1>
     868:	8f 93       	push	r24
     86a:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <moist_var>
     86e:	8f 93       	push	r24
     870:	1f 92       	push	r1
     872:	1f 93       	push	r17
     874:	8d ea       	ldi	r24, 0xAD	; 173
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	df 93       	push	r29
     87e:	cf 93       	push	r28
     880:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		sendCommand(string_to_send); //send command to set the value of the sensor
     884:	ce 01       	movw	r24, r28
     886:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_var%d\"[%d]\n", board_no, tmp_var);
     88a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <tmp_var+0x1>
     88e:	8f 93       	push	r24
     890:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <tmp_var>
     894:	8f 93       	push	r24
     896:	1f 92       	push	r1
     898:	1f 93       	push	r17
     89a:	80 ed       	ldi	r24, 0xD0	; 208
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	df 93       	push	r29
     8a4:	cf 93       	push	r28
     8a6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
		sendCommand(string_to_send); //send command to set the value of the sensor
     8aa:	ce 01       	movw	r24, r28
     8ac:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
		
		//PORTB=0xFF;
		clear_buffer();
     8b0:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
		
		strcpy(string_to_send, "ESP:connect\n");
     8b4:	8d e0       	ldi	r24, 0x0D	; 13
     8b6:	e9 ee       	ldi	r30, 0xE9	; 233
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	de 01       	movw	r26, r28
     8bc:	01 90       	ld	r0, Z+
     8be:	0d 92       	st	X+, r0
     8c0:	8a 95       	dec	r24
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <__stack+0x45d>
		//sendCommand(string_to_send);
		
		strcpy(string_to_send, "ESP:clientTransmit\n");
     8c4:	84 e1       	ldi	r24, 0x14	; 20
     8c6:	e6 ef       	ldi	r30, 0xF6	; 246
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	de 01       	movw	r26, r28
     8cc:	01 90       	ld	r0, Z+
     8ce:	0d 92       	st	X+, r0
     8d0:	8a 95       	dec	r24
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <__stack+0x46d>
     8d4:	8d b7       	in	r24, 0x3d	; 61
     8d6:	9e b7       	in	r25, 0x3e	; 62
     8d8:	40 96       	adiw	r24, 0x10	; 16
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	9e bf       	out	0x3e, r25	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	8d bf       	out	0x3d, r24	; 61
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x48b>
		//sendCommand(string_to_send);
		//PORTB=0x00;
		
	}
	else
		first=false;
     8e6:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <first>

	//TCNT1 = 3036;
	sei();
     8ea:	78 94       	sei
	TCNT1 = 34286; //4s between interrupts
     8ec:	8e ee       	ldi	r24, 0xEE	; 238
     8ee:	95 e8       	ldi	r25, 0x85	; 133
     8f0:	9d bd       	out	0x2d, r25	; 45
     8f2:	8c bd       	out	0x2c, r24	; 44
}
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <main>:


int main(){
	DDRB=0xFF;
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	87 bb       	out	0x17, r24	; 23
	DDRD=0xFF;
     92a:	81 bb       	out	0x11, r24	; 17
	
	//PORTB=0xFF;

	first=true;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <first>
	
	lcd_init_sim();
     932:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init_sim>
	usart_init(MYUBRR);
     936:	83 e3       	ldi	r24, 0x33	; 51
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 8a 01 	call	0x314	; 0x314 <usart_init>
	
	for(int i=0; i<sensor_boards; ++i) { //initialize moistures and temperatures
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e c0       	rjmp	.+28     	; 0x960 <main+0x3a>
		moistures[i]=0;
     944:	9c 01       	movw	r18, r24
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	f9 01       	movw	r30, r18
     94c:	ee 54       	subi	r30, 0x4E	; 78
     94e:	fd 4f       	sbci	r31, 0xFD	; 253
     950:	11 82       	std	Z+1, r1	; 0x01
     952:	10 82       	st	Z, r1
		temperatures[i]=0;
     954:	f9 01       	movw	r30, r18
     956:	e4 54       	subi	r30, 0x44	; 68
     958:	fc 4f       	sbci	r31, 0xFC	; 252
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	10 82       	st	Z, r1
	first=true;
	
	lcd_init_sim();
	usart_init(MYUBRR);
	
	for(int i=0; i<sensor_boards; ++i) { //initialize moistures and temperatures
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	18 16       	cp	r1, r24
     962:	19 06       	cpc	r1, r25
     964:	7c f7       	brge	.-34     	; 0x944 <main+0x1e>
		moistures[i]=0;
		temperatures[i]=0;
	}

	//PORTB=0xFF;
	usart_transmit('\n'); //to flush serial
     966:	8a e0       	ldi	r24, 0x0A	; 10
     968:	0e 94 92 01 	call	0x324	; 0x324 <usart_transmit>
	
	strcpy(string_to_send, "ESP:restart\n");
     96c:	8d e0       	ldi	r24, 0x0D	; 13
     96e:	e1 ef       	ldi	r30, 0xF1	; 241
     970:	f1 e0       	ldi	r31, 0x01	; 1
     972:	aa eb       	ldi	r26, 0xBA	; 186
     974:	b2 e0       	ldi	r27, 0x02	; 2
     976:	01 90       	ld	r0, Z+
     978:	0d 92       	st	X+, r0
     97a:	8a 95       	dec	r24
     97c:	e1 f7       	brne	.-8      	; 0x976 <main+0x50>
	serialWrite(string_to_send);
     97e:	8a eb       	ldi	r24, 0xBA	; 186
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
	
	usart_receive(); //wait until restart is complete
     986:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
	while(UCSRA&(1<<RXC)) //flush read buffer
     98a:	02 c0       	rjmp	.+4      	; 0x990 <main+0x6a>
	usart_receive();
     98c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
	
	strcpy(string_to_send, "ESP:restart\n");
	serialWrite(string_to_send);
	
	usart_receive(); //wait until restart is complete
	while(UCSRA&(1<<RXC)) //flush read buffer
     990:	5f 99       	sbic	0x0b, 7	; 11
     992:	fc cf       	rjmp	.-8      	; 0x98c <main+0x66>
	usart_receive();
	
	wait_msec(2000);
     994:	80 ed       	ldi	r24, 0xD0	; 208
     996:	97 e0       	ldi	r25, 0x07	; 7
     998:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <wait_msec>
	

	strcpy(string_to_send, "ESP:addSensor: \"Moist_Sensor\"\n");
     99c:	ca eb       	ldi	r28, 0xBA	; 186
     99e:	d2 e0       	ldi	r29, 0x02	; 2
     9a0:	8f e1       	ldi	r24, 0x1F	; 31
     9a2:	ee ef       	ldi	r30, 0xFE	; 254
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	de 01       	movw	r26, r28
     9a8:	01 90       	ld	r0, Z+
     9aa:	0d 92       	st	X+, r0
     9ac:	8a 95       	dec	r24
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <main+0x82>
	sendCommand(string_to_send);
     9b0:	ce 01       	movw	r24, r28
     9b2:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	strcpy(string_to_send, "ESP:addSensor: \"Tmp_Sensor\"\n");
     9b6:	8d e1       	ldi	r24, 0x1D	; 29
     9b8:	ed e1       	ldi	r30, 0x1D	; 29
     9ba:	f2 e0       	ldi	r31, 0x02	; 2
     9bc:	de 01       	movw	r26, r28
     9be:	01 90       	ld	r0, Z+
     9c0:	0d 92       	st	X+, r0
     9c2:	8a 95       	dec	r24
     9c4:	e1 f7       	brne	.-8      	; 0x9be <main+0x98>
	sendCommand(string_to_send);
     9c6:	ce 01       	movw	r24, r28
     9c8:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	sprintf(string_to_send, "ESP:addSensor: \"Moist_avg%d\"\n", board_no);
     9cc:	1f 92       	push	r1
     9ce:	11 e0       	ldi	r17, 0x01	; 1
     9d0:	1f 93       	push	r17
     9d2:	8a e3       	ldi	r24, 0x3A	; 58
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
	sendCommand(string_to_send);
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	sprintf(string_to_send, "ESP:addSensor: \"Tmp_avg%d\"\n", board_no);
     9e8:	1f 92       	push	r1
     9ea:	1f 93       	push	r17
     9ec:	88 e5       	ldi	r24, 0x58	; 88
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
     9f4:	df 93       	push	r29
     9f6:	cf 93       	push	r28
     9f8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
	sendCommand(string_to_send);
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	sprintf(string_to_send, "ESP:addSensor: \"Moist_var%d\"\n", board_no);
     a02:	1f 92       	push	r1
     a04:	1f 93       	push	r17
     a06:	84 e7       	ldi	r24, 0x74	; 116
     a08:	92 e0       	ldi	r25, 0x02	; 2
     a0a:	9f 93       	push	r25
     a0c:	8f 93       	push	r24
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
	sendCommand(string_to_send);
     a16:	ce 01       	movw	r24, r28
     a18:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	sprintf(string_to_send, "ESP:addSensor: \"Tmp_var%d\"\n", board_no);
     a1c:	1f 92       	push	r1
     a1e:	1f 93       	push	r17
     a20:	82 e9       	ldi	r24, 0x92	; 146
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	9f 93       	push	r25
     a26:	8f 93       	push	r24
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <sprintf>
	sendCommand(string_to_send);
     a30:	ce 01       	movw	r24, r28
     a32:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	PORTB=0xFF;
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	88 bb       	out	0x18, r24	; 24

	TCCR1B = 0x05; //CK/1024
     a3a:	85 e0       	ldi	r24, 0x05	; 5
     a3c:	8e bd       	out	0x2e, r24	; 46
	//TCNT1 = 3036; //8 seconds
	TCNT1 = 34286; //4s between interrupts
     a3e:	8e ee       	ldi	r24, 0xEE	; 238
     a40:	95 e8       	ldi	r25, 0x85	; 133
     a42:	9d bd       	out	0x2d, r25	; 45
     a44:	8c bd       	out	0x2c, r24	; 44
	TIMSK = 0x04; //enable overflow interrupt for TCNT1
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	89 bf       	out	0x39, r24	; 57
	sei();
     a4a:	78 94       	sei
     a4c:	8d b7       	in	r24, 0x3d	; 61
     a4e:	9e b7       	in	r25, 0x3e	; 62
     a50:	48 96       	adiw	r24, 0x18	; 24
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	9e bf       	out	0x3e, r25	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	8d bf       	out	0x3d, r24	; 61
     a5c:	ff cf       	rjmp	.-2      	; 0xa5c <main+0x136>

00000a5e <__subsf3>:
     a5e:	50 58       	subi	r21, 0x80	; 128

00000a60 <__addsf3>:
     a60:	bb 27       	eor	r27, r27
     a62:	aa 27       	eor	r26, r26
     a64:	0e 94 47 05 	call	0xa8e	; 0xa8e <__addsf3x>
     a68:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
     a6c:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
     a70:	38 f0       	brcs	.+14     	; 0xa80 <__addsf3+0x20>
     a72:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
     a76:	20 f0       	brcs	.+8      	; 0xa80 <__addsf3+0x20>
     a78:	39 f4       	brne	.+14     	; 0xa88 <__addsf3+0x28>
     a7a:	9f 3f       	cpi	r25, 0xFF	; 255
     a7c:	19 f4       	brne	.+6      	; 0xa84 <__addsf3+0x24>
     a7e:	26 f4       	brtc	.+8      	; 0xa88 <__addsf3+0x28>
     a80:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>
     a84:	0e f4       	brtc	.+2      	; 0xa88 <__addsf3+0x28>
     a86:	e0 95       	com	r30
     a88:	e7 fb       	bst	r30, 7
     a8a:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>

00000a8e <__addsf3x>:
     a8e:	e9 2f       	mov	r30, r25
     a90:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
     a94:	58 f3       	brcs	.-42     	; 0xa6c <__addsf3+0xc>
     a96:	ba 17       	cp	r27, r26
     a98:	62 07       	cpc	r22, r18
     a9a:	73 07       	cpc	r23, r19
     a9c:	84 07       	cpc	r24, r20
     a9e:	95 07       	cpc	r25, r21
     aa0:	20 f0       	brcs	.+8      	; 0xaaa <__addsf3x+0x1c>
     aa2:	79 f4       	brne	.+30     	; 0xac2 <__addsf3x+0x34>
     aa4:	a6 f5       	brtc	.+104    	; 0xb0e <__addsf3x+0x80>
     aa6:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_zero>
     aaa:	0e f4       	brtc	.+2      	; 0xaae <__addsf3x+0x20>
     aac:	e0 95       	com	r30
     aae:	0b 2e       	mov	r0, r27
     ab0:	ba 2f       	mov	r27, r26
     ab2:	a0 2d       	mov	r26, r0
     ab4:	0b 01       	movw	r0, r22
     ab6:	b9 01       	movw	r22, r18
     ab8:	90 01       	movw	r18, r0
     aba:	0c 01       	movw	r0, r24
     abc:	ca 01       	movw	r24, r20
     abe:	a0 01       	movw	r20, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	ff 27       	eor	r31, r31
     ac4:	59 1b       	sub	r21, r25
     ac6:	99 f0       	breq	.+38     	; 0xaee <__addsf3x+0x60>
     ac8:	59 3f       	cpi	r21, 0xF9	; 249
     aca:	50 f4       	brcc	.+20     	; 0xae0 <__addsf3x+0x52>
     acc:	50 3e       	cpi	r21, 0xE0	; 224
     ace:	68 f1       	brcs	.+90     	; 0xb2a <__addsf3x+0x9c>
     ad0:	1a 16       	cp	r1, r26
     ad2:	f0 40       	sbci	r31, 0x00	; 0
     ad4:	a2 2f       	mov	r26, r18
     ad6:	23 2f       	mov	r18, r19
     ad8:	34 2f       	mov	r19, r20
     ada:	44 27       	eor	r20, r20
     adc:	58 5f       	subi	r21, 0xF8	; 248
     ade:	f3 cf       	rjmp	.-26     	; 0xac6 <__addsf3x+0x38>
     ae0:	46 95       	lsr	r20
     ae2:	37 95       	ror	r19
     ae4:	27 95       	ror	r18
     ae6:	a7 95       	ror	r26
     ae8:	f0 40       	sbci	r31, 0x00	; 0
     aea:	53 95       	inc	r21
     aec:	c9 f7       	brne	.-14     	; 0xae0 <__addsf3x+0x52>
     aee:	7e f4       	brtc	.+30     	; 0xb0e <__addsf3x+0x80>
     af0:	1f 16       	cp	r1, r31
     af2:	ba 0b       	sbc	r27, r26
     af4:	62 0b       	sbc	r22, r18
     af6:	73 0b       	sbc	r23, r19
     af8:	84 0b       	sbc	r24, r20
     afa:	ba f0       	brmi	.+46     	; 0xb2a <__addsf3x+0x9c>
     afc:	91 50       	subi	r25, 0x01	; 1
     afe:	a1 f0       	breq	.+40     	; 0xb28 <__addsf3x+0x9a>
     b00:	ff 0f       	add	r31, r31
     b02:	bb 1f       	adc	r27, r27
     b04:	66 1f       	adc	r22, r22
     b06:	77 1f       	adc	r23, r23
     b08:	88 1f       	adc	r24, r24
     b0a:	c2 f7       	brpl	.-16     	; 0xafc <__addsf3x+0x6e>
     b0c:	0e c0       	rjmp	.+28     	; 0xb2a <__addsf3x+0x9c>
     b0e:	ba 0f       	add	r27, r26
     b10:	62 1f       	adc	r22, r18
     b12:	73 1f       	adc	r23, r19
     b14:	84 1f       	adc	r24, r20
     b16:	48 f4       	brcc	.+18     	; 0xb2a <__addsf3x+0x9c>
     b18:	87 95       	ror	r24
     b1a:	77 95       	ror	r23
     b1c:	67 95       	ror	r22
     b1e:	b7 95       	ror	r27
     b20:	f7 95       	ror	r31
     b22:	9e 3f       	cpi	r25, 0xFE	; 254
     b24:	08 f0       	brcs	.+2      	; 0xb28 <__addsf3x+0x9a>
     b26:	b0 cf       	rjmp	.-160    	; 0xa88 <__addsf3+0x28>
     b28:	93 95       	inc	r25
     b2a:	88 0f       	add	r24, r24
     b2c:	08 f0       	brcs	.+2      	; 0xb30 <__addsf3x+0xa2>
     b2e:	99 27       	eor	r25, r25
     b30:	ee 0f       	add	r30, r30
     b32:	97 95       	ror	r25
     b34:	87 95       	ror	r24
     b36:	08 95       	ret

00000b38 <__fixsfsi>:
     b38:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fixunssfsi>
     b3c:	68 94       	set
     b3e:	b1 11       	cpse	r27, r1
     b40:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
     b44:	08 95       	ret

00000b46 <__fixunssfsi>:
     b46:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__fp_splitA>
     b4a:	88 f0       	brcs	.+34     	; 0xb6e <__fixunssfsi+0x28>
     b4c:	9f 57       	subi	r25, 0x7F	; 127
     b4e:	98 f0       	brcs	.+38     	; 0xb76 <__fixunssfsi+0x30>
     b50:	b9 2f       	mov	r27, r25
     b52:	99 27       	eor	r25, r25
     b54:	b7 51       	subi	r27, 0x17	; 23
     b56:	b0 f0       	brcs	.+44     	; 0xb84 <__fixunssfsi+0x3e>
     b58:	e1 f0       	breq	.+56     	; 0xb92 <__fixunssfsi+0x4c>
     b5a:	66 0f       	add	r22, r22
     b5c:	77 1f       	adc	r23, r23
     b5e:	88 1f       	adc	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	1a f0       	brmi	.+6      	; 0xb6a <__fixunssfsi+0x24>
     b64:	ba 95       	dec	r27
     b66:	c9 f7       	brne	.-14     	; 0xb5a <__fixunssfsi+0x14>
     b68:	14 c0       	rjmp	.+40     	; 0xb92 <__fixunssfsi+0x4c>
     b6a:	b1 30       	cpi	r27, 0x01	; 1
     b6c:	91 f0       	breq	.+36     	; 0xb92 <__fixunssfsi+0x4c>
     b6e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_zero>
     b72:	b1 e0       	ldi	r27, 0x01	; 1
     b74:	08 95       	ret
     b76:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__fp_zero>
     b7a:	67 2f       	mov	r22, r23
     b7c:	78 2f       	mov	r23, r24
     b7e:	88 27       	eor	r24, r24
     b80:	b8 5f       	subi	r27, 0xF8	; 248
     b82:	39 f0       	breq	.+14     	; 0xb92 <__fixunssfsi+0x4c>
     b84:	b9 3f       	cpi	r27, 0xF9	; 249
     b86:	cc f3       	brlt	.-14     	; 0xb7a <__fixunssfsi+0x34>
     b88:	86 95       	lsr	r24
     b8a:	77 95       	ror	r23
     b8c:	67 95       	ror	r22
     b8e:	b3 95       	inc	r27
     b90:	d9 f7       	brne	.-10     	; 0xb88 <__fixunssfsi+0x42>
     b92:	3e f4       	brtc	.+14     	; 0xba2 <__fixunssfsi+0x5c>
     b94:	90 95       	com	r25
     b96:	80 95       	com	r24
     b98:	70 95       	com	r23
     b9a:	61 95       	neg	r22
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	08 95       	ret

00000ba4 <__floatunsisf>:
     ba4:	e8 94       	clt
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <__floatsisf+0x12>

00000ba8 <__floatsisf>:
     ba8:	97 fb       	bst	r25, 7
     baa:	3e f4       	brtc	.+14     	; 0xbba <__floatsisf+0x12>
     bac:	90 95       	com	r25
     bae:	80 95       	com	r24
     bb0:	70 95       	com	r23
     bb2:	61 95       	neg	r22
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	8f 4f       	sbci	r24, 0xFF	; 255
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	99 23       	and	r25, r25
     bbc:	a9 f0       	breq	.+42     	; 0xbe8 <__floatsisf+0x40>
     bbe:	f9 2f       	mov	r31, r25
     bc0:	96 e9       	ldi	r25, 0x96	; 150
     bc2:	bb 27       	eor	r27, r27
     bc4:	93 95       	inc	r25
     bc6:	f6 95       	lsr	r31
     bc8:	87 95       	ror	r24
     bca:	77 95       	ror	r23
     bcc:	67 95       	ror	r22
     bce:	b7 95       	ror	r27
     bd0:	f1 11       	cpse	r31, r1
     bd2:	f8 cf       	rjmp	.-16     	; 0xbc4 <__floatsisf+0x1c>
     bd4:	fa f4       	brpl	.+62     	; 0xc14 <__floatsisf+0x6c>
     bd6:	bb 0f       	add	r27, r27
     bd8:	11 f4       	brne	.+4      	; 0xbde <__floatsisf+0x36>
     bda:	60 ff       	sbrs	r22, 0
     bdc:	1b c0       	rjmp	.+54     	; 0xc14 <__floatsisf+0x6c>
     bde:	6f 5f       	subi	r22, 0xFF	; 255
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	8f 4f       	sbci	r24, 0xFF	; 255
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	16 c0       	rjmp	.+44     	; 0xc14 <__floatsisf+0x6c>
     be8:	88 23       	and	r24, r24
     bea:	11 f0       	breq	.+4      	; 0xbf0 <__floatsisf+0x48>
     bec:	96 e9       	ldi	r25, 0x96	; 150
     bee:	11 c0       	rjmp	.+34     	; 0xc12 <__floatsisf+0x6a>
     bf0:	77 23       	and	r23, r23
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__floatsisf+0x54>
     bf4:	9e e8       	ldi	r25, 0x8E	; 142
     bf6:	87 2f       	mov	r24, r23
     bf8:	76 2f       	mov	r23, r22
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <__floatsisf+0x5e>
     bfc:	66 23       	and	r22, r22
     bfe:	71 f0       	breq	.+28     	; 0xc1c <__floatsisf+0x74>
     c00:	96 e8       	ldi	r25, 0x86	; 134
     c02:	86 2f       	mov	r24, r22
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	2a f0       	brmi	.+10     	; 0xc14 <__floatsisf+0x6c>
     c0a:	9a 95       	dec	r25
     c0c:	66 0f       	add	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	88 1f       	adc	r24, r24
     c12:	da f7       	brpl	.-10     	; 0xc0a <__floatsisf+0x62>
     c14:	88 0f       	add	r24, r24
     c16:	96 95       	lsr	r25
     c18:	87 95       	ror	r24
     c1a:	97 f9       	bld	r25, 7
     c1c:	08 95       	ret

00000c1e <__fp_inf>:
     c1e:	97 f9       	bld	r25, 7
     c20:	9f 67       	ori	r25, 0x7F	; 127
     c22:	80 e8       	ldi	r24, 0x80	; 128
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	60 e0       	ldi	r22, 0x00	; 0
     c28:	08 95       	ret

00000c2a <__fp_nan>:
     c2a:	9f ef       	ldi	r25, 0xFF	; 255
     c2c:	80 ec       	ldi	r24, 0xC0	; 192
     c2e:	08 95       	ret

00000c30 <__fp_pscA>:
     c30:	00 24       	eor	r0, r0
     c32:	0a 94       	dec	r0
     c34:	16 16       	cp	r1, r22
     c36:	17 06       	cpc	r1, r23
     c38:	18 06       	cpc	r1, r24
     c3a:	09 06       	cpc	r0, r25
     c3c:	08 95       	ret

00000c3e <__fp_pscB>:
     c3e:	00 24       	eor	r0, r0
     c40:	0a 94       	dec	r0
     c42:	12 16       	cp	r1, r18
     c44:	13 06       	cpc	r1, r19
     c46:	14 06       	cpc	r1, r20
     c48:	05 06       	cpc	r0, r21
     c4a:	08 95       	ret

00000c4c <__fp_round>:
     c4c:	09 2e       	mov	r0, r25
     c4e:	03 94       	inc	r0
     c50:	00 0c       	add	r0, r0
     c52:	11 f4       	brne	.+4      	; 0xc58 <__fp_round+0xc>
     c54:	88 23       	and	r24, r24
     c56:	52 f0       	brmi	.+20     	; 0xc6c <__fp_round+0x20>
     c58:	bb 0f       	add	r27, r27
     c5a:	40 f4       	brcc	.+16     	; 0xc6c <__fp_round+0x20>
     c5c:	bf 2b       	or	r27, r31
     c5e:	11 f4       	brne	.+4      	; 0xc64 <__fp_round+0x18>
     c60:	60 ff       	sbrs	r22, 0
     c62:	04 c0       	rjmp	.+8      	; 0xc6c <__fp_round+0x20>
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	8f 4f       	sbci	r24, 0xFF	; 255
     c6a:	9f 4f       	sbci	r25, 0xFF	; 255
     c6c:	08 95       	ret

00000c6e <__fp_split3>:
     c6e:	57 fd       	sbrc	r21, 7
     c70:	90 58       	subi	r25, 0x80	; 128
     c72:	44 0f       	add	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	59 f0       	breq	.+22     	; 0xc8e <__fp_splitA+0x10>
     c78:	5f 3f       	cpi	r21, 0xFF	; 255
     c7a:	71 f0       	breq	.+28     	; 0xc98 <__fp_splitA+0x1a>
     c7c:	47 95       	ror	r20

00000c7e <__fp_splitA>:
     c7e:	88 0f       	add	r24, r24
     c80:	97 fb       	bst	r25, 7
     c82:	99 1f       	adc	r25, r25
     c84:	61 f0       	breq	.+24     	; 0xc9e <__fp_splitA+0x20>
     c86:	9f 3f       	cpi	r25, 0xFF	; 255
     c88:	79 f0       	breq	.+30     	; 0xca8 <__fp_splitA+0x2a>
     c8a:	87 95       	ror	r24
     c8c:	08 95       	ret
     c8e:	12 16       	cp	r1, r18
     c90:	13 06       	cpc	r1, r19
     c92:	14 06       	cpc	r1, r20
     c94:	55 1f       	adc	r21, r21
     c96:	f2 cf       	rjmp	.-28     	; 0xc7c <__fp_split3+0xe>
     c98:	46 95       	lsr	r20
     c9a:	f1 df       	rcall	.-30     	; 0xc7e <__fp_splitA>
     c9c:	08 c0       	rjmp	.+16     	; 0xcae <__fp_splitA+0x30>
     c9e:	16 16       	cp	r1, r22
     ca0:	17 06       	cpc	r1, r23
     ca2:	18 06       	cpc	r1, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	f1 cf       	rjmp	.-30     	; 0xc8a <__fp_splitA+0xc>
     ca8:	86 95       	lsr	r24
     caa:	71 05       	cpc	r23, r1
     cac:	61 05       	cpc	r22, r1
     cae:	08 94       	sec
     cb0:	08 95       	ret

00000cb2 <__fp_zero>:
     cb2:	e8 94       	clt

00000cb4 <__fp_szero>:
     cb4:	bb 27       	eor	r27, r27
     cb6:	66 27       	eor	r22, r22
     cb8:	77 27       	eor	r23, r23
     cba:	cb 01       	movw	r24, r22
     cbc:	97 f9       	bld	r25, 7
     cbe:	08 95       	ret

00000cc0 <__mulsf3>:
     cc0:	0e 94 73 06 	call	0xce6	; 0xce6 <__mulsf3x>
     cc4:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_round>
     cc8:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_pscA>
     ccc:	38 f0       	brcs	.+14     	; 0xcdc <__mulsf3+0x1c>
     cce:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__fp_pscB>
     cd2:	20 f0       	brcs	.+8      	; 0xcdc <__mulsf3+0x1c>
     cd4:	95 23       	and	r25, r21
     cd6:	11 f0       	breq	.+4      	; 0xcdc <__mulsf3+0x1c>
     cd8:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
     cdc:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__fp_nan>
     ce0:	11 24       	eor	r1, r1
     ce2:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>

00000ce6 <__mulsf3x>:
     ce6:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fp_split3>
     cea:	70 f3       	brcs	.-36     	; 0xcc8 <__mulsf3+0x8>

00000cec <__mulsf3_pse>:
     cec:	95 9f       	mul	r25, r21
     cee:	c1 f3       	breq	.-16     	; 0xce0 <__mulsf3+0x20>
     cf0:	95 0f       	add	r25, r21
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	55 1f       	adc	r21, r21
     cf6:	62 9f       	mul	r22, r18
     cf8:	f0 01       	movw	r30, r0
     cfa:	72 9f       	mul	r23, r18
     cfc:	bb 27       	eor	r27, r27
     cfe:	f0 0d       	add	r31, r0
     d00:	b1 1d       	adc	r27, r1
     d02:	63 9f       	mul	r22, r19
     d04:	aa 27       	eor	r26, r26
     d06:	f0 0d       	add	r31, r0
     d08:	b1 1d       	adc	r27, r1
     d0a:	aa 1f       	adc	r26, r26
     d0c:	64 9f       	mul	r22, r20
     d0e:	66 27       	eor	r22, r22
     d10:	b0 0d       	add	r27, r0
     d12:	a1 1d       	adc	r26, r1
     d14:	66 1f       	adc	r22, r22
     d16:	82 9f       	mul	r24, r18
     d18:	22 27       	eor	r18, r18
     d1a:	b0 0d       	add	r27, r0
     d1c:	a1 1d       	adc	r26, r1
     d1e:	62 1f       	adc	r22, r18
     d20:	73 9f       	mul	r23, r19
     d22:	b0 0d       	add	r27, r0
     d24:	a1 1d       	adc	r26, r1
     d26:	62 1f       	adc	r22, r18
     d28:	83 9f       	mul	r24, r19
     d2a:	a0 0d       	add	r26, r0
     d2c:	61 1d       	adc	r22, r1
     d2e:	22 1f       	adc	r18, r18
     d30:	74 9f       	mul	r23, r20
     d32:	33 27       	eor	r19, r19
     d34:	a0 0d       	add	r26, r0
     d36:	61 1d       	adc	r22, r1
     d38:	23 1f       	adc	r18, r19
     d3a:	84 9f       	mul	r24, r20
     d3c:	60 0d       	add	r22, r0
     d3e:	21 1d       	adc	r18, r1
     d40:	82 2f       	mov	r24, r18
     d42:	76 2f       	mov	r23, r22
     d44:	6a 2f       	mov	r22, r26
     d46:	11 24       	eor	r1, r1
     d48:	9f 57       	subi	r25, 0x7F	; 127
     d4a:	50 40       	sbci	r21, 0x00	; 0
     d4c:	9a f0       	brmi	.+38     	; 0xd74 <__mulsf3_pse+0x88>
     d4e:	f1 f0       	breq	.+60     	; 0xd8c <__mulsf3_pse+0xa0>
     d50:	88 23       	and	r24, r24
     d52:	4a f0       	brmi	.+18     	; 0xd66 <__mulsf3_pse+0x7a>
     d54:	ee 0f       	add	r30, r30
     d56:	ff 1f       	adc	r31, r31
     d58:	bb 1f       	adc	r27, r27
     d5a:	66 1f       	adc	r22, r22
     d5c:	77 1f       	adc	r23, r23
     d5e:	88 1f       	adc	r24, r24
     d60:	91 50       	subi	r25, 0x01	; 1
     d62:	50 40       	sbci	r21, 0x00	; 0
     d64:	a9 f7       	brne	.-22     	; 0xd50 <__mulsf3_pse+0x64>
     d66:	9e 3f       	cpi	r25, 0xFE	; 254
     d68:	51 05       	cpc	r21, r1
     d6a:	80 f0       	brcs	.+32     	; 0xd8c <__mulsf3_pse+0xa0>
     d6c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__fp_inf>
     d70:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__fp_szero>
     d74:	5f 3f       	cpi	r21, 0xFF	; 255
     d76:	e4 f3       	brlt	.-8      	; 0xd70 <__mulsf3_pse+0x84>
     d78:	98 3e       	cpi	r25, 0xE8	; 232
     d7a:	d4 f3       	brlt	.-12     	; 0xd70 <__mulsf3_pse+0x84>
     d7c:	86 95       	lsr	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b7 95       	ror	r27
     d84:	f7 95       	ror	r31
     d86:	e7 95       	ror	r30
     d88:	9f 5f       	subi	r25, 0xFF	; 255
     d8a:	c1 f7       	brne	.-16     	; 0xd7c <__mulsf3_pse+0x90>
     d8c:	fe 2b       	or	r31, r30
     d8e:	88 0f       	add	r24, r24
     d90:	91 1d       	adc	r25, r1
     d92:	96 95       	lsr	r25
     d94:	87 95       	ror	r24
     d96:	97 f9       	bld	r25, 7
     d98:	08 95       	ret

00000d9a <vfprintf>:
     d9a:	a0 e1       	ldi	r26, 0x10	; 16
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e3 ed       	ldi	r30, 0xD3	; 211
     da0:	f6 e0       	ldi	r31, 0x06	; 6
     da2:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__prologue_saves__>
     da6:	7c 01       	movw	r14, r24
     da8:	1b 01       	movw	r2, r22
     daa:	6a 01       	movw	r12, r20
     dac:	fc 01       	movw	r30, r24
     dae:	17 82       	std	Z+7, r1	; 0x07
     db0:	16 82       	std	Z+6, r1	; 0x06
     db2:	83 81       	ldd	r24, Z+3	; 0x03
     db4:	81 ff       	sbrs	r24, 1
     db6:	44 c3       	rjmp	.+1672   	; 0x1440 <vfprintf+0x6a6>
     db8:	9e 01       	movw	r18, r28
     dba:	2f 5f       	subi	r18, 0xFF	; 255
     dbc:	3f 4f       	sbci	r19, 0xFF	; 255
     dbe:	39 01       	movw	r6, r18
     dc0:	f7 01       	movw	r30, r14
     dc2:	93 81       	ldd	r25, Z+3	; 0x03
     dc4:	f1 01       	movw	r30, r2
     dc6:	93 fd       	sbrc	r25, 3
     dc8:	85 91       	lpm	r24, Z+
     dca:	93 ff       	sbrs	r25, 3
     dcc:	81 91       	ld	r24, Z+
     dce:	1f 01       	movw	r2, r30
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <vfprintf+0x3c>
     dd4:	31 c3       	rjmp	.+1634   	; 0x1438 <vfprintf+0x69e>
     dd6:	85 32       	cpi	r24, 0x25	; 37
     dd8:	39 f4       	brne	.+14     	; 0xde8 <vfprintf+0x4e>
     dda:	93 fd       	sbrc	r25, 3
     ddc:	85 91       	lpm	r24, Z+
     dde:	93 ff       	sbrs	r25, 3
     de0:	81 91       	ld	r24, Z+
     de2:	1f 01       	movw	r2, r30
     de4:	85 32       	cpi	r24, 0x25	; 37
     de6:	39 f4       	brne	.+14     	; 0xdf6 <vfprintf+0x5c>
     de8:	b7 01       	movw	r22, r14
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
     df0:	56 01       	movw	r10, r12
     df2:	65 01       	movw	r12, r10
     df4:	e5 cf       	rjmp	.-54     	; 0xdc0 <vfprintf+0x26>
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	51 2c       	mov	r5, r1
     dfa:	91 2c       	mov	r9, r1
     dfc:	ff e1       	ldi	r31, 0x1F	; 31
     dfe:	f9 15       	cp	r31, r9
     e00:	d8 f0       	brcs	.+54     	; 0xe38 <vfprintf+0x9e>
     e02:	8b 32       	cpi	r24, 0x2B	; 43
     e04:	79 f0       	breq	.+30     	; 0xe24 <vfprintf+0x8a>
     e06:	38 f4       	brcc	.+14     	; 0xe16 <vfprintf+0x7c>
     e08:	80 32       	cpi	r24, 0x20	; 32
     e0a:	79 f0       	breq	.+30     	; 0xe2a <vfprintf+0x90>
     e0c:	83 32       	cpi	r24, 0x23	; 35
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <vfprintf+0x9e>
     e10:	f9 2d       	mov	r31, r9
     e12:	f0 61       	ori	r31, 0x10	; 16
     e14:	2e c0       	rjmp	.+92     	; 0xe72 <vfprintf+0xd8>
     e16:	8d 32       	cpi	r24, 0x2D	; 45
     e18:	61 f0       	breq	.+24     	; 0xe32 <vfprintf+0x98>
     e1a:	80 33       	cpi	r24, 0x30	; 48
     e1c:	69 f4       	brne	.+26     	; 0xe38 <vfprintf+0x9e>
     e1e:	29 2d       	mov	r18, r9
     e20:	21 60       	ori	r18, 0x01	; 1
     e22:	2d c0       	rjmp	.+90     	; 0xe7e <vfprintf+0xe4>
     e24:	39 2d       	mov	r19, r9
     e26:	32 60       	ori	r19, 0x02	; 2
     e28:	93 2e       	mov	r9, r19
     e2a:	89 2d       	mov	r24, r9
     e2c:	84 60       	ori	r24, 0x04	; 4
     e2e:	98 2e       	mov	r9, r24
     e30:	2a c0       	rjmp	.+84     	; 0xe86 <vfprintf+0xec>
     e32:	e9 2d       	mov	r30, r9
     e34:	e8 60       	ori	r30, 0x08	; 8
     e36:	15 c0       	rjmp	.+42     	; 0xe62 <vfprintf+0xc8>
     e38:	97 fc       	sbrc	r9, 7
     e3a:	2d c0       	rjmp	.+90     	; 0xe96 <vfprintf+0xfc>
     e3c:	20 ed       	ldi	r18, 0xD0	; 208
     e3e:	28 0f       	add	r18, r24
     e40:	2a 30       	cpi	r18, 0x0A	; 10
     e42:	88 f4       	brcc	.+34     	; 0xe66 <vfprintf+0xcc>
     e44:	96 fe       	sbrs	r9, 6
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <vfprintf+0xba>
     e48:	3a e0       	ldi	r19, 0x0A	; 10
     e4a:	13 9f       	mul	r17, r19
     e4c:	20 0d       	add	r18, r0
     e4e:	11 24       	eor	r1, r1
     e50:	12 2f       	mov	r17, r18
     e52:	19 c0       	rjmp	.+50     	; 0xe86 <vfprintf+0xec>
     e54:	8a e0       	ldi	r24, 0x0A	; 10
     e56:	58 9e       	mul	r5, r24
     e58:	20 0d       	add	r18, r0
     e5a:	11 24       	eor	r1, r1
     e5c:	52 2e       	mov	r5, r18
     e5e:	e9 2d       	mov	r30, r9
     e60:	e0 62       	ori	r30, 0x20	; 32
     e62:	9e 2e       	mov	r9, r30
     e64:	10 c0       	rjmp	.+32     	; 0xe86 <vfprintf+0xec>
     e66:	8e 32       	cpi	r24, 0x2E	; 46
     e68:	31 f4       	brne	.+12     	; 0xe76 <vfprintf+0xdc>
     e6a:	96 fc       	sbrc	r9, 6
     e6c:	e5 c2       	rjmp	.+1482   	; 0x1438 <vfprintf+0x69e>
     e6e:	f9 2d       	mov	r31, r9
     e70:	f0 64       	ori	r31, 0x40	; 64
     e72:	9f 2e       	mov	r9, r31
     e74:	08 c0       	rjmp	.+16     	; 0xe86 <vfprintf+0xec>
     e76:	8c 36       	cpi	r24, 0x6C	; 108
     e78:	21 f4       	brne	.+8      	; 0xe82 <vfprintf+0xe8>
     e7a:	29 2d       	mov	r18, r9
     e7c:	20 68       	ori	r18, 0x80	; 128
     e7e:	92 2e       	mov	r9, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <vfprintf+0xec>
     e82:	88 36       	cpi	r24, 0x68	; 104
     e84:	41 f4       	brne	.+16     	; 0xe96 <vfprintf+0xfc>
     e86:	f1 01       	movw	r30, r2
     e88:	93 fd       	sbrc	r25, 3
     e8a:	85 91       	lpm	r24, Z+
     e8c:	93 ff       	sbrs	r25, 3
     e8e:	81 91       	ld	r24, Z+
     e90:	1f 01       	movw	r2, r30
     e92:	81 11       	cpse	r24, r1
     e94:	b3 cf       	rjmp	.-154    	; 0xdfc <vfprintf+0x62>
     e96:	9b eb       	ldi	r25, 0xBB	; 187
     e98:	98 0f       	add	r25, r24
     e9a:	93 30       	cpi	r25, 0x03	; 3
     e9c:	20 f4       	brcc	.+8      	; 0xea6 <vfprintf+0x10c>
     e9e:	99 2d       	mov	r25, r9
     ea0:	90 61       	ori	r25, 0x10	; 16
     ea2:	80 5e       	subi	r24, 0xE0	; 224
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <vfprintf+0x11a>
     ea6:	9b e9       	ldi	r25, 0x9B	; 155
     ea8:	98 0f       	add	r25, r24
     eaa:	93 30       	cpi	r25, 0x03	; 3
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <vfprintf+0x116>
     eae:	66 c1       	rjmp	.+716    	; 0x117c <vfprintf+0x3e2>
     eb0:	99 2d       	mov	r25, r9
     eb2:	9f 7e       	andi	r25, 0xEF	; 239
     eb4:	96 ff       	sbrs	r25, 6
     eb6:	16 e0       	ldi	r17, 0x06	; 6
     eb8:	9f 73       	andi	r25, 0x3F	; 63
     eba:	99 2e       	mov	r9, r25
     ebc:	85 36       	cpi	r24, 0x65	; 101
     ebe:	19 f4       	brne	.+6      	; 0xec6 <vfprintf+0x12c>
     ec0:	90 64       	ori	r25, 0x40	; 64
     ec2:	99 2e       	mov	r9, r25
     ec4:	08 c0       	rjmp	.+16     	; 0xed6 <vfprintf+0x13c>
     ec6:	86 36       	cpi	r24, 0x66	; 102
     ec8:	21 f4       	brne	.+8      	; 0xed2 <vfprintf+0x138>
     eca:	39 2f       	mov	r19, r25
     ecc:	30 68       	ori	r19, 0x80	; 128
     ece:	93 2e       	mov	r9, r19
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <vfprintf+0x13c>
     ed2:	11 11       	cpse	r17, r1
     ed4:	11 50       	subi	r17, 0x01	; 1
     ed6:	97 fe       	sbrs	r9, 7
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <vfprintf+0x14e>
     eda:	1c 33       	cpi	r17, 0x3C	; 60
     edc:	50 f4       	brcc	.+20     	; 0xef2 <vfprintf+0x158>
     ede:	44 24       	eor	r4, r4
     ee0:	43 94       	inc	r4
     ee2:	41 0e       	add	r4, r17
     ee4:	27 e0       	ldi	r18, 0x07	; 7
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <vfprintf+0x164>
     ee8:	18 30       	cpi	r17, 0x08	; 8
     eea:	38 f0       	brcs	.+14     	; 0xefa <vfprintf+0x160>
     eec:	27 e0       	ldi	r18, 0x07	; 7
     eee:	17 e0       	ldi	r17, 0x07	; 7
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <vfprintf+0x162>
     ef2:	27 e0       	ldi	r18, 0x07	; 7
     ef4:	9c e3       	ldi	r25, 0x3C	; 60
     ef6:	49 2e       	mov	r4, r25
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <vfprintf+0x164>
     efa:	21 2f       	mov	r18, r17
     efc:	41 2c       	mov	r4, r1
     efe:	56 01       	movw	r10, r12
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	a8 0e       	add	r10, r24
     f04:	b1 1c       	adc	r11, r1
     f06:	f6 01       	movw	r30, r12
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	04 2d       	mov	r16, r4
     f12:	a3 01       	movw	r20, r6
     f14:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__ftoa_engine>
     f18:	6c 01       	movw	r12, r24
     f1a:	f9 81       	ldd	r31, Y+1	; 0x01
     f1c:	fc 87       	std	Y+12, r31	; 0x0c
     f1e:	f0 ff       	sbrs	r31, 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <vfprintf+0x18c>
     f22:	f3 ff       	sbrs	r31, 3
     f24:	06 c0       	rjmp	.+12     	; 0xf32 <vfprintf+0x198>
     f26:	91 fc       	sbrc	r9, 1
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <vfprintf+0x19c>
     f2a:	92 fe       	sbrs	r9, 2
     f2c:	06 c0       	rjmp	.+12     	; 0xf3a <vfprintf+0x1a0>
     f2e:	00 e2       	ldi	r16, 0x20	; 32
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <vfprintf+0x1a2>
     f32:	0d e2       	ldi	r16, 0x2D	; 45
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <vfprintf+0x1a2>
     f36:	0b e2       	ldi	r16, 0x2B	; 43
     f38:	01 c0       	rjmp	.+2      	; 0xf3c <vfprintf+0x1a2>
     f3a:	00 e0       	ldi	r16, 0x00	; 0
     f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f3e:	8c 70       	andi	r24, 0x0C	; 12
     f40:	19 f0       	breq	.+6      	; 0xf48 <vfprintf+0x1ae>
     f42:	01 11       	cpse	r16, r1
     f44:	5a c2       	rjmp	.+1204   	; 0x13fa <vfprintf+0x660>
     f46:	9b c2       	rjmp	.+1334   	; 0x147e <vfprintf+0x6e4>
     f48:	97 fe       	sbrs	r9, 7
     f4a:	10 c0       	rjmp	.+32     	; 0xf6c <vfprintf+0x1d2>
     f4c:	4c 0c       	add	r4, r12
     f4e:	fc 85       	ldd	r31, Y+12	; 0x0c
     f50:	f4 ff       	sbrs	r31, 4
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <vfprintf+0x1c2>
     f54:	8a 81       	ldd	r24, Y+2	; 0x02
     f56:	81 33       	cpi	r24, 0x31	; 49
     f58:	09 f4       	brne	.+2      	; 0xf5c <vfprintf+0x1c2>
     f5a:	4a 94       	dec	r4
     f5c:	14 14       	cp	r1, r4
     f5e:	74 f5       	brge	.+92     	; 0xfbc <vfprintf+0x222>
     f60:	28 e0       	ldi	r18, 0x08	; 8
     f62:	24 15       	cp	r18, r4
     f64:	78 f5       	brcc	.+94     	; 0xfc4 <vfprintf+0x22a>
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	48 2e       	mov	r4, r24
     f6a:	2c c0       	rjmp	.+88     	; 0xfc4 <vfprintf+0x22a>
     f6c:	96 fc       	sbrc	r9, 6
     f6e:	2a c0       	rjmp	.+84     	; 0xfc4 <vfprintf+0x22a>
     f70:	81 2f       	mov	r24, r17
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	8c 15       	cp	r24, r12
     f76:	9d 05       	cpc	r25, r13
     f78:	9c f0       	brlt	.+38     	; 0xfa0 <vfprintf+0x206>
     f7a:	3c ef       	ldi	r19, 0xFC	; 252
     f7c:	c3 16       	cp	r12, r19
     f7e:	3f ef       	ldi	r19, 0xFF	; 255
     f80:	d3 06       	cpc	r13, r19
     f82:	74 f0       	brlt	.+28     	; 0xfa0 <vfprintf+0x206>
     f84:	89 2d       	mov	r24, r9
     f86:	80 68       	ori	r24, 0x80	; 128
     f88:	98 2e       	mov	r9, r24
     f8a:	0a c0       	rjmp	.+20     	; 0xfa0 <vfprintf+0x206>
     f8c:	e2 e0       	ldi	r30, 0x02	; 2
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ec 0f       	add	r30, r28
     f92:	fd 1f       	adc	r31, r29
     f94:	e1 0f       	add	r30, r17
     f96:	f1 1d       	adc	r31, r1
     f98:	80 81       	ld	r24, Z
     f9a:	80 33       	cpi	r24, 0x30	; 48
     f9c:	19 f4       	brne	.+6      	; 0xfa4 <vfprintf+0x20a>
     f9e:	11 50       	subi	r17, 0x01	; 1
     fa0:	11 11       	cpse	r17, r1
     fa2:	f4 cf       	rjmp	.-24     	; 0xf8c <vfprintf+0x1f2>
     fa4:	97 fe       	sbrs	r9, 7
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <vfprintf+0x22a>
     fa8:	44 24       	eor	r4, r4
     faa:	43 94       	inc	r4
     fac:	41 0e       	add	r4, r17
     fae:	81 2f       	mov	r24, r17
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	c8 16       	cp	r12, r24
     fb4:	d9 06       	cpc	r13, r25
     fb6:	2c f4       	brge	.+10     	; 0xfc2 <vfprintf+0x228>
     fb8:	1c 19       	sub	r17, r12
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <vfprintf+0x22a>
     fbc:	44 24       	eor	r4, r4
     fbe:	43 94       	inc	r4
     fc0:	01 c0       	rjmp	.+2      	; 0xfc4 <vfprintf+0x22a>
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	97 fe       	sbrs	r9, 7
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x23a>
     fc8:	1c 14       	cp	r1, r12
     fca:	1d 04       	cpc	r1, r13
     fcc:	34 f4       	brge	.+12     	; 0xfda <vfprintf+0x240>
     fce:	c6 01       	movw	r24, r12
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <vfprintf+0x244>
     fd4:	85 e0       	ldi	r24, 0x05	; 5
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x244>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	01 11       	cpse	r16, r1
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	11 23       	and	r17, r17
     fe4:	31 f0       	breq	.+12     	; 0xff2 <vfprintf+0x258>
     fe6:	21 2f       	mov	r18, r17
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	2f 5f       	subi	r18, 0xFF	; 255
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	25 2d       	mov	r18, r5
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	82 17       	cp	r24, r18
     ff8:	93 07       	cpc	r25, r19
     ffa:	14 f4       	brge	.+4      	; 0x1000 <vfprintf+0x266>
     ffc:	58 1a       	sub	r5, r24
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <vfprintf+0x268>
    1000:	51 2c       	mov	r5, r1
    1002:	89 2d       	mov	r24, r9
    1004:	89 70       	andi	r24, 0x09	; 9
    1006:	49 f4       	brne	.+18     	; 0x101a <vfprintf+0x280>
    1008:	55 20       	and	r5, r5
    100a:	39 f0       	breq	.+14     	; 0x101a <vfprintf+0x280>
    100c:	b7 01       	movw	r22, r14
    100e:	80 e2       	ldi	r24, 0x20	; 32
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1016:	5a 94       	dec	r5
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <vfprintf+0x26e>
    101a:	00 23       	and	r16, r16
    101c:	29 f0       	breq	.+10     	; 0x1028 <vfprintf+0x28e>
    101e:	b7 01       	movw	r22, r14
    1020:	80 2f       	mov	r24, r16
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1028:	93 fc       	sbrc	r9, 3
    102a:	09 c0       	rjmp	.+18     	; 0x103e <vfprintf+0x2a4>
    102c:	55 20       	and	r5, r5
    102e:	39 f0       	breq	.+14     	; 0x103e <vfprintf+0x2a4>
    1030:	b7 01       	movw	r22, r14
    1032:	80 e3       	ldi	r24, 0x30	; 48
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    103a:	5a 94       	dec	r5
    103c:	f7 cf       	rjmp	.-18     	; 0x102c <vfprintf+0x292>
    103e:	97 fe       	sbrs	r9, 7
    1040:	4c c0       	rjmp	.+152    	; 0x10da <vfprintf+0x340>
    1042:	46 01       	movw	r8, r12
    1044:	d7 fe       	sbrs	r13, 7
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x2b2>
    1048:	81 2c       	mov	r8, r1
    104a:	91 2c       	mov	r9, r1
    104c:	c6 01       	movw	r24, r12
    104e:	88 19       	sub	r24, r8
    1050:	99 09       	sbc	r25, r9
    1052:	f3 01       	movw	r30, r6
    1054:	e8 0f       	add	r30, r24
    1056:	f9 1f       	adc	r31, r25
    1058:	fe 87       	std	Y+14, r31	; 0x0e
    105a:	ed 87       	std	Y+13, r30	; 0x0d
    105c:	96 01       	movw	r18, r12
    105e:	24 19       	sub	r18, r4
    1060:	31 09       	sbc	r19, r1
    1062:	38 8b       	std	Y+16, r19	; 0x10
    1064:	2f 87       	std	Y+15, r18	; 0x0f
    1066:	01 2f       	mov	r16, r17
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	11 95       	neg	r17
    106c:	01 95       	neg	r16
    106e:	11 09       	sbc	r17, r1
    1070:	3f ef       	ldi	r19, 0xFF	; 255
    1072:	83 16       	cp	r8, r19
    1074:	93 06       	cpc	r9, r19
    1076:	29 f4       	brne	.+10     	; 0x1082 <vfprintf+0x2e8>
    1078:	b7 01       	movw	r22, r14
    107a:	8e e2       	ldi	r24, 0x2E	; 46
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1082:	c8 14       	cp	r12, r8
    1084:	d9 04       	cpc	r13, r9
    1086:	4c f0       	brlt	.+18     	; 0x109a <vfprintf+0x300>
    1088:	8f 85       	ldd	r24, Y+15	; 0x0f
    108a:	98 89       	ldd	r25, Y+16	; 0x10
    108c:	88 15       	cp	r24, r8
    108e:	99 05       	cpc	r25, r9
    1090:	24 f4       	brge	.+8      	; 0x109a <vfprintf+0x300>
    1092:	ed 85       	ldd	r30, Y+13	; 0x0d
    1094:	fe 85       	ldd	r31, Y+14	; 0x0e
    1096:	81 81       	ldd	r24, Z+1	; 0x01
    1098:	01 c0       	rjmp	.+2      	; 0x109c <vfprintf+0x302>
    109a:	80 e3       	ldi	r24, 0x30	; 48
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	8f 1a       	sub	r8, r31
    10a0:	91 08       	sbc	r9, r1
    10a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    10a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	3e 87       	std	Y+14, r19	; 0x0e
    10ac:	2d 87       	std	Y+13, r18	; 0x0d
    10ae:	80 16       	cp	r8, r16
    10b0:	91 06       	cpc	r9, r17
    10b2:	2c f0       	brlt	.+10     	; 0x10be <vfprintf+0x324>
    10b4:	b7 01       	movw	r22, r14
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    10bc:	d9 cf       	rjmp	.-78     	; 0x1070 <vfprintf+0x2d6>
    10be:	c8 14       	cp	r12, r8
    10c0:	d9 04       	cpc	r13, r9
    10c2:	41 f4       	brne	.+16     	; 0x10d4 <vfprintf+0x33a>
    10c4:	9a 81       	ldd	r25, Y+2	; 0x02
    10c6:	96 33       	cpi	r25, 0x36	; 54
    10c8:	20 f4       	brcc	.+8      	; 0x10d2 <vfprintf+0x338>
    10ca:	95 33       	cpi	r25, 0x35	; 53
    10cc:	19 f4       	brne	.+6      	; 0x10d4 <vfprintf+0x33a>
    10ce:	3c 85       	ldd	r19, Y+12	; 0x0c
    10d0:	34 ff       	sbrs	r19, 4
    10d2:	81 e3       	ldi	r24, 0x31	; 49
    10d4:	b7 01       	movw	r22, r14
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	4e c0       	rjmp	.+156    	; 0x1176 <vfprintf+0x3dc>
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	81 33       	cpi	r24, 0x31	; 49
    10de:	19 f0       	breq	.+6      	; 0x10e6 <vfprintf+0x34c>
    10e0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10e2:	9f 7e       	andi	r25, 0xEF	; 239
    10e4:	9c 87       	std	Y+12, r25	; 0x0c
    10e6:	b7 01       	movw	r22, r14
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    10ee:	11 11       	cpse	r17, r1
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <vfprintf+0x362>
    10f2:	94 fc       	sbrc	r9, 4
    10f4:	18 c0       	rjmp	.+48     	; 0x1126 <vfprintf+0x38c>
    10f6:	85 e6       	ldi	r24, 0x65	; 101
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	17 c0       	rjmp	.+46     	; 0x112a <vfprintf+0x390>
    10fc:	b7 01       	movw	r22, r14
    10fe:	8e e2       	ldi	r24, 0x2E	; 46
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1106:	1e 5f       	subi	r17, 0xFE	; 254
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	01 e0       	ldi	r16, 0x01	; 1
    110c:	08 0f       	add	r16, r24
    110e:	f3 01       	movw	r30, r6
    1110:	e8 0f       	add	r30, r24
    1112:	f1 1d       	adc	r31, r1
    1114:	80 81       	ld	r24, Z
    1116:	b7 01       	movw	r22, r14
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    111e:	80 2f       	mov	r24, r16
    1120:	01 13       	cpse	r16, r17
    1122:	f3 cf       	rjmp	.-26     	; 0x110a <vfprintf+0x370>
    1124:	e6 cf       	rjmp	.-52     	; 0x10f2 <vfprintf+0x358>
    1126:	85 e4       	ldi	r24, 0x45	; 69
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	b7 01       	movw	r22, r14
    112c:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1130:	d7 fc       	sbrc	r13, 7
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <vfprintf+0x3a6>
    1134:	c1 14       	cp	r12, r1
    1136:	d1 04       	cpc	r13, r1
    1138:	41 f4       	brne	.+16     	; 0x114a <vfprintf+0x3b0>
    113a:	ec 85       	ldd	r30, Y+12	; 0x0c
    113c:	e4 ff       	sbrs	r30, 4
    113e:	05 c0       	rjmp	.+10     	; 0x114a <vfprintf+0x3b0>
    1140:	d1 94       	neg	r13
    1142:	c1 94       	neg	r12
    1144:	d1 08       	sbc	r13, r1
    1146:	8d e2       	ldi	r24, 0x2D	; 45
    1148:	01 c0       	rjmp	.+2      	; 0x114c <vfprintf+0x3b2>
    114a:	8b e2       	ldi	r24, 0x2B	; 43
    114c:	b7 01       	movw	r22, r14
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1154:	80 e3       	ldi	r24, 0x30	; 48
    1156:	2a e0       	ldi	r18, 0x0A	; 10
    1158:	c2 16       	cp	r12, r18
    115a:	d1 04       	cpc	r13, r1
    115c:	2c f0       	brlt	.+10     	; 0x1168 <vfprintf+0x3ce>
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	fa e0       	ldi	r31, 0x0A	; 10
    1162:	cf 1a       	sub	r12, r31
    1164:	d1 08       	sbc	r13, r1
    1166:	f7 cf       	rjmp	.-18     	; 0x1156 <vfprintf+0x3bc>
    1168:	b7 01       	movw	r22, r14
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1170:	b7 01       	movw	r22, r14
    1172:	c6 01       	movw	r24, r12
    1174:	c0 96       	adiw	r24, 0x30	; 48
    1176:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    117a:	54 c1       	rjmp	.+680    	; 0x1424 <vfprintf+0x68a>
    117c:	83 36       	cpi	r24, 0x63	; 99
    117e:	31 f0       	breq	.+12     	; 0x118c <vfprintf+0x3f2>
    1180:	83 37       	cpi	r24, 0x73	; 115
    1182:	79 f0       	breq	.+30     	; 0x11a2 <vfprintf+0x408>
    1184:	83 35       	cpi	r24, 0x53	; 83
    1186:	09 f0       	breq	.+2      	; 0x118a <vfprintf+0x3f0>
    1188:	56 c0       	rjmp	.+172    	; 0x1236 <vfprintf+0x49c>
    118a:	20 c0       	rjmp	.+64     	; 0x11cc <vfprintf+0x432>
    118c:	56 01       	movw	r10, r12
    118e:	32 e0       	ldi	r19, 0x02	; 2
    1190:	a3 0e       	add	r10, r19
    1192:	b1 1c       	adc	r11, r1
    1194:	f6 01       	movw	r30, r12
    1196:	80 81       	ld	r24, Z
    1198:	89 83       	std	Y+1, r24	; 0x01
    119a:	01 e0       	ldi	r16, 0x01	; 1
    119c:	10 e0       	ldi	r17, 0x00	; 0
    119e:	63 01       	movw	r12, r6
    11a0:	12 c0       	rjmp	.+36     	; 0x11c6 <vfprintf+0x42c>
    11a2:	56 01       	movw	r10, r12
    11a4:	f2 e0       	ldi	r31, 0x02	; 2
    11a6:	af 0e       	add	r10, r31
    11a8:	b1 1c       	adc	r11, r1
    11aa:	f6 01       	movw	r30, r12
    11ac:	c0 80       	ld	r12, Z
    11ae:	d1 80       	ldd	r13, Z+1	; 0x01
    11b0:	96 fe       	sbrs	r9, 6
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <vfprintf+0x420>
    11b4:	61 2f       	mov	r22, r17
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <vfprintf+0x424>
    11ba:	6f ef       	ldi	r22, 0xFF	; 255
    11bc:	7f ef       	ldi	r23, 0xFF	; 255
    11be:	c6 01       	movw	r24, r12
    11c0:	0e 94 86 0b 	call	0x170c	; 0x170c <strnlen>
    11c4:	8c 01       	movw	r16, r24
    11c6:	f9 2d       	mov	r31, r9
    11c8:	ff 77       	andi	r31, 0x7F	; 127
    11ca:	14 c0       	rjmp	.+40     	; 0x11f4 <vfprintf+0x45a>
    11cc:	56 01       	movw	r10, r12
    11ce:	22 e0       	ldi	r18, 0x02	; 2
    11d0:	a2 0e       	add	r10, r18
    11d2:	b1 1c       	adc	r11, r1
    11d4:	f6 01       	movw	r30, r12
    11d6:	c0 80       	ld	r12, Z
    11d8:	d1 80       	ldd	r13, Z+1	; 0x01
    11da:	96 fe       	sbrs	r9, 6
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <vfprintf+0x44a>
    11de:	61 2f       	mov	r22, r17
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <vfprintf+0x44e>
    11e4:	6f ef       	ldi	r22, 0xFF	; 255
    11e6:	7f ef       	ldi	r23, 0xFF	; 255
    11e8:	c6 01       	movw	r24, r12
    11ea:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <strnlen_P>
    11ee:	8c 01       	movw	r16, r24
    11f0:	f9 2d       	mov	r31, r9
    11f2:	f0 68       	ori	r31, 0x80	; 128
    11f4:	9f 2e       	mov	r9, r31
    11f6:	f3 fd       	sbrc	r31, 3
    11f8:	1a c0       	rjmp	.+52     	; 0x122e <vfprintf+0x494>
    11fa:	85 2d       	mov	r24, r5
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	08 17       	cp	r16, r24
    1200:	19 07       	cpc	r17, r25
    1202:	a8 f4       	brcc	.+42     	; 0x122e <vfprintf+0x494>
    1204:	b7 01       	movw	r22, r14
    1206:	80 e2       	ldi	r24, 0x20	; 32
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    120e:	5a 94       	dec	r5
    1210:	f4 cf       	rjmp	.-24     	; 0x11fa <vfprintf+0x460>
    1212:	f6 01       	movw	r30, r12
    1214:	97 fc       	sbrc	r9, 7
    1216:	85 91       	lpm	r24, Z+
    1218:	97 fe       	sbrs	r9, 7
    121a:	81 91       	ld	r24, Z+
    121c:	6f 01       	movw	r12, r30
    121e:	b7 01       	movw	r22, r14
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1226:	51 10       	cpse	r5, r1
    1228:	5a 94       	dec	r5
    122a:	01 50       	subi	r16, 0x01	; 1
    122c:	11 09       	sbc	r17, r1
    122e:	01 15       	cp	r16, r1
    1230:	11 05       	cpc	r17, r1
    1232:	79 f7       	brne	.-34     	; 0x1212 <vfprintf+0x478>
    1234:	f7 c0       	rjmp	.+494    	; 0x1424 <vfprintf+0x68a>
    1236:	84 36       	cpi	r24, 0x64	; 100
    1238:	11 f0       	breq	.+4      	; 0x123e <vfprintf+0x4a4>
    123a:	89 36       	cpi	r24, 0x69	; 105
    123c:	61 f5       	brne	.+88     	; 0x1296 <vfprintf+0x4fc>
    123e:	56 01       	movw	r10, r12
    1240:	97 fe       	sbrs	r9, 7
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <vfprintf+0x4bc>
    1244:	24 e0       	ldi	r18, 0x04	; 4
    1246:	a2 0e       	add	r10, r18
    1248:	b1 1c       	adc	r11, r1
    124a:	f6 01       	movw	r30, r12
    124c:	60 81       	ld	r22, Z
    124e:	71 81       	ldd	r23, Z+1	; 0x01
    1250:	82 81       	ldd	r24, Z+2	; 0x02
    1252:	93 81       	ldd	r25, Z+3	; 0x03
    1254:	0a c0       	rjmp	.+20     	; 0x126a <vfprintf+0x4d0>
    1256:	f2 e0       	ldi	r31, 0x02	; 2
    1258:	af 0e       	add	r10, r31
    125a:	b1 1c       	adc	r11, r1
    125c:	f6 01       	movw	r30, r12
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	07 2e       	mov	r0, r23
    1264:	00 0c       	add	r0, r0
    1266:	88 0b       	sbc	r24, r24
    1268:	99 0b       	sbc	r25, r25
    126a:	f9 2d       	mov	r31, r9
    126c:	ff 76       	andi	r31, 0x6F	; 111
    126e:	9f 2e       	mov	r9, r31
    1270:	97 ff       	sbrs	r25, 7
    1272:	09 c0       	rjmp	.+18     	; 0x1286 <vfprintf+0x4ec>
    1274:	90 95       	com	r25
    1276:	80 95       	com	r24
    1278:	70 95       	com	r23
    127a:	61 95       	neg	r22
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	f0 68       	ori	r31, 0x80	; 128
    1284:	9f 2e       	mov	r9, r31
    1286:	2a e0       	ldi	r18, 0x0A	; 10
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	a3 01       	movw	r20, r6
    128c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__ultoa_invert>
    1290:	c8 2e       	mov	r12, r24
    1292:	c6 18       	sub	r12, r6
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <vfprintf+0x57a>
    1296:	09 2d       	mov	r16, r9
    1298:	85 37       	cpi	r24, 0x75	; 117
    129a:	21 f4       	brne	.+8      	; 0x12a4 <vfprintf+0x50a>
    129c:	0f 7e       	andi	r16, 0xEF	; 239
    129e:	2a e0       	ldi	r18, 0x0A	; 10
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	1d c0       	rjmp	.+58     	; 0x12de <vfprintf+0x544>
    12a4:	09 7f       	andi	r16, 0xF9	; 249
    12a6:	8f 36       	cpi	r24, 0x6F	; 111
    12a8:	91 f0       	breq	.+36     	; 0x12ce <vfprintf+0x534>
    12aa:	18 f4       	brcc	.+6      	; 0x12b2 <vfprintf+0x518>
    12ac:	88 35       	cpi	r24, 0x58	; 88
    12ae:	59 f0       	breq	.+22     	; 0x12c6 <vfprintf+0x52c>
    12b0:	c3 c0       	rjmp	.+390    	; 0x1438 <vfprintf+0x69e>
    12b2:	80 37       	cpi	r24, 0x70	; 112
    12b4:	19 f0       	breq	.+6      	; 0x12bc <vfprintf+0x522>
    12b6:	88 37       	cpi	r24, 0x78	; 120
    12b8:	11 f0       	breq	.+4      	; 0x12be <vfprintf+0x524>
    12ba:	be c0       	rjmp	.+380    	; 0x1438 <vfprintf+0x69e>
    12bc:	00 61       	ori	r16, 0x10	; 16
    12be:	04 ff       	sbrs	r16, 4
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <vfprintf+0x53a>
    12c2:	04 60       	ori	r16, 0x04	; 4
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <vfprintf+0x53a>
    12c6:	94 fe       	sbrs	r9, 4
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <vfprintf+0x540>
    12ca:	06 60       	ori	r16, 0x06	; 6
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <vfprintf+0x540>
    12ce:	28 e0       	ldi	r18, 0x08	; 8
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <vfprintf+0x544>
    12d4:	20 e1       	ldi	r18, 0x10	; 16
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x544>
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	32 e0       	ldi	r19, 0x02	; 2
    12de:	56 01       	movw	r10, r12
    12e0:	07 ff       	sbrs	r16, 7
    12e2:	09 c0       	rjmp	.+18     	; 0x12f6 <vfprintf+0x55c>
    12e4:	84 e0       	ldi	r24, 0x04	; 4
    12e6:	a8 0e       	add	r10, r24
    12e8:	b1 1c       	adc	r11, r1
    12ea:	f6 01       	movw	r30, r12
    12ec:	60 81       	ld	r22, Z
    12ee:	71 81       	ldd	r23, Z+1	; 0x01
    12f0:	82 81       	ldd	r24, Z+2	; 0x02
    12f2:	93 81       	ldd	r25, Z+3	; 0x03
    12f4:	08 c0       	rjmp	.+16     	; 0x1306 <vfprintf+0x56c>
    12f6:	f2 e0       	ldi	r31, 0x02	; 2
    12f8:	af 0e       	add	r10, r31
    12fa:	b1 1c       	adc	r11, r1
    12fc:	f6 01       	movw	r30, r12
    12fe:	60 81       	ld	r22, Z
    1300:	71 81       	ldd	r23, Z+1	; 0x01
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a3 01       	movw	r20, r6
    1308:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__ultoa_invert>
    130c:	c8 2e       	mov	r12, r24
    130e:	c6 18       	sub	r12, r6
    1310:	0f 77       	andi	r16, 0x7F	; 127
    1312:	90 2e       	mov	r9, r16
    1314:	96 fe       	sbrs	r9, 6
    1316:	0b c0       	rjmp	.+22     	; 0x132e <vfprintf+0x594>
    1318:	09 2d       	mov	r16, r9
    131a:	0e 7f       	andi	r16, 0xFE	; 254
    131c:	c1 16       	cp	r12, r17
    131e:	50 f4       	brcc	.+20     	; 0x1334 <vfprintf+0x59a>
    1320:	94 fe       	sbrs	r9, 4
    1322:	0a c0       	rjmp	.+20     	; 0x1338 <vfprintf+0x59e>
    1324:	92 fc       	sbrc	r9, 2
    1326:	08 c0       	rjmp	.+16     	; 0x1338 <vfprintf+0x59e>
    1328:	09 2d       	mov	r16, r9
    132a:	0e 7e       	andi	r16, 0xEE	; 238
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <vfprintf+0x59e>
    132e:	dc 2c       	mov	r13, r12
    1330:	09 2d       	mov	r16, r9
    1332:	03 c0       	rjmp	.+6      	; 0x133a <vfprintf+0x5a0>
    1334:	dc 2c       	mov	r13, r12
    1336:	01 c0       	rjmp	.+2      	; 0x133a <vfprintf+0x5a0>
    1338:	d1 2e       	mov	r13, r17
    133a:	04 ff       	sbrs	r16, 4
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <vfprintf+0x5be>
    133e:	fe 01       	movw	r30, r28
    1340:	ec 0d       	add	r30, r12
    1342:	f1 1d       	adc	r31, r1
    1344:	80 81       	ld	r24, Z
    1346:	80 33       	cpi	r24, 0x30	; 48
    1348:	11 f4       	brne	.+4      	; 0x134e <vfprintf+0x5b4>
    134a:	09 7e       	andi	r16, 0xE9	; 233
    134c:	09 c0       	rjmp	.+18     	; 0x1360 <vfprintf+0x5c6>
    134e:	02 ff       	sbrs	r16, 2
    1350:	06 c0       	rjmp	.+12     	; 0x135e <vfprintf+0x5c4>
    1352:	d3 94       	inc	r13
    1354:	d3 94       	inc	r13
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <vfprintf+0x5c6>
    1358:	80 2f       	mov	r24, r16
    135a:	86 78       	andi	r24, 0x86	; 134
    135c:	09 f0       	breq	.+2      	; 0x1360 <vfprintf+0x5c6>
    135e:	d3 94       	inc	r13
    1360:	03 fd       	sbrc	r16, 3
    1362:	11 c0       	rjmp	.+34     	; 0x1386 <vfprintf+0x5ec>
    1364:	00 ff       	sbrs	r16, 0
    1366:	06 c0       	rjmp	.+12     	; 0x1374 <vfprintf+0x5da>
    1368:	1c 2d       	mov	r17, r12
    136a:	d5 14       	cp	r13, r5
    136c:	80 f4       	brcc	.+32     	; 0x138e <vfprintf+0x5f4>
    136e:	15 0d       	add	r17, r5
    1370:	1d 19       	sub	r17, r13
    1372:	0d c0       	rjmp	.+26     	; 0x138e <vfprintf+0x5f4>
    1374:	d5 14       	cp	r13, r5
    1376:	58 f4       	brcc	.+22     	; 0x138e <vfprintf+0x5f4>
    1378:	b7 01       	movw	r22, r14
    137a:	80 e2       	ldi	r24, 0x20	; 32
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1382:	d3 94       	inc	r13
    1384:	f7 cf       	rjmp	.-18     	; 0x1374 <vfprintf+0x5da>
    1386:	d5 14       	cp	r13, r5
    1388:	10 f4       	brcc	.+4      	; 0x138e <vfprintf+0x5f4>
    138a:	5d 18       	sub	r5, r13
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfprintf+0x5f6>
    138e:	51 2c       	mov	r5, r1
    1390:	04 ff       	sbrs	r16, 4
    1392:	10 c0       	rjmp	.+32     	; 0x13b4 <vfprintf+0x61a>
    1394:	b7 01       	movw	r22, r14
    1396:	80 e3       	ldi	r24, 0x30	; 48
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    139e:	02 ff       	sbrs	r16, 2
    13a0:	17 c0       	rjmp	.+46     	; 0x13d0 <vfprintf+0x636>
    13a2:	01 fd       	sbrc	r16, 1
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <vfprintf+0x612>
    13a6:	88 e7       	ldi	r24, 0x78	; 120
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <vfprintf+0x616>
    13ac:	88 e5       	ldi	r24, 0x58	; 88
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	b7 01       	movw	r22, r14
    13b2:	0c c0       	rjmp	.+24     	; 0x13cc <vfprintf+0x632>
    13b4:	80 2f       	mov	r24, r16
    13b6:	86 78       	andi	r24, 0x86	; 134
    13b8:	59 f0       	breq	.+22     	; 0x13d0 <vfprintf+0x636>
    13ba:	01 ff       	sbrs	r16, 1
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <vfprintf+0x628>
    13be:	8b e2       	ldi	r24, 0x2B	; 43
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <vfprintf+0x62a>
    13c2:	80 e2       	ldi	r24, 0x20	; 32
    13c4:	07 fd       	sbrc	r16, 7
    13c6:	8d e2       	ldi	r24, 0x2D	; 45
    13c8:	b7 01       	movw	r22, r14
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    13d0:	c1 16       	cp	r12, r17
    13d2:	38 f4       	brcc	.+14     	; 0x13e2 <vfprintf+0x648>
    13d4:	b7 01       	movw	r22, r14
    13d6:	80 e3       	ldi	r24, 0x30	; 48
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    13de:	11 50       	subi	r17, 0x01	; 1
    13e0:	f7 cf       	rjmp	.-18     	; 0x13d0 <vfprintf+0x636>
    13e2:	ca 94       	dec	r12
    13e4:	f3 01       	movw	r30, r6
    13e6:	ec 0d       	add	r30, r12
    13e8:	f1 1d       	adc	r31, r1
    13ea:	80 81       	ld	r24, Z
    13ec:	b7 01       	movw	r22, r14
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    13f4:	c1 10       	cpse	r12, r1
    13f6:	f5 cf       	rjmp	.-22     	; 0x13e2 <vfprintf+0x648>
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <vfprintf+0x68a>
    13fa:	f4 e0       	ldi	r31, 0x04	; 4
    13fc:	f5 15       	cp	r31, r5
    13fe:	60 f5       	brcc	.+88     	; 0x1458 <vfprintf+0x6be>
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	58 1a       	sub	r5, r24
    1404:	93 fe       	sbrs	r9, 3
    1406:	1f c0       	rjmp	.+62     	; 0x1446 <vfprintf+0x6ac>
    1408:	01 11       	cpse	r16, r1
    140a:	27 c0       	rjmp	.+78     	; 0x145a <vfprintf+0x6c0>
    140c:	2c 85       	ldd	r18, Y+12	; 0x0c
    140e:	23 ff       	sbrs	r18, 3
    1410:	2a c0       	rjmp	.+84     	; 0x1466 <vfprintf+0x6cc>
    1412:	04 e5       	ldi	r16, 0x54	; 84
    1414:	10 e0       	ldi	r17, 0x00	; 0
    1416:	39 2d       	mov	r19, r9
    1418:	30 71       	andi	r19, 0x10	; 16
    141a:	93 2e       	mov	r9, r19
    141c:	f8 01       	movw	r30, r16
    141e:	84 91       	lpm	r24, Z
    1420:	81 11       	cpse	r24, r1
    1422:	24 c0       	rjmp	.+72     	; 0x146c <vfprintf+0x6d2>
    1424:	55 20       	and	r5, r5
    1426:	09 f4       	brne	.+2      	; 0x142a <vfprintf+0x690>
    1428:	e4 cc       	rjmp	.-1592   	; 0xdf2 <vfprintf+0x58>
    142a:	b7 01       	movw	r22, r14
    142c:	80 e2       	ldi	r24, 0x20	; 32
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1434:	5a 94       	dec	r5
    1436:	f6 cf       	rjmp	.-20     	; 0x1424 <vfprintf+0x68a>
    1438:	f7 01       	movw	r30, r14
    143a:	86 81       	ldd	r24, Z+6	; 0x06
    143c:	97 81       	ldd	r25, Z+7	; 0x07
    143e:	26 c0       	rjmp	.+76     	; 0x148c <vfprintf+0x6f2>
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	23 c0       	rjmp	.+70     	; 0x148c <vfprintf+0x6f2>
    1446:	b7 01       	movw	r22, r14
    1448:	80 e2       	ldi	r24, 0x20	; 32
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1450:	5a 94       	dec	r5
    1452:	51 10       	cpse	r5, r1
    1454:	f8 cf       	rjmp	.-16     	; 0x1446 <vfprintf+0x6ac>
    1456:	d8 cf       	rjmp	.-80     	; 0x1408 <vfprintf+0x66e>
    1458:	51 2c       	mov	r5, r1
    145a:	b7 01       	movw	r22, r14
    145c:	80 2f       	mov	r24, r16
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1464:	d3 cf       	rjmp	.-90     	; 0x140c <vfprintf+0x672>
    1466:	08 e5       	ldi	r16, 0x58	; 88
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	d5 cf       	rjmp	.-86     	; 0x1416 <vfprintf+0x67c>
    146c:	91 10       	cpse	r9, r1
    146e:	80 52       	subi	r24, 0x20	; 32
    1470:	b7 01       	movw	r22, r14
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 99 0b 	call	0x1732	; 0x1732 <fputc>
    1478:	0f 5f       	subi	r16, 0xFF	; 255
    147a:	1f 4f       	sbci	r17, 0xFF	; 255
    147c:	cf cf       	rjmp	.-98     	; 0x141c <vfprintf+0x682>
    147e:	23 e0       	ldi	r18, 0x03	; 3
    1480:	25 15       	cp	r18, r5
    1482:	10 f4       	brcc	.+4      	; 0x1488 <vfprintf+0x6ee>
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	bd cf       	rjmp	.-134    	; 0x1402 <vfprintf+0x668>
    1488:	51 2c       	mov	r5, r1
    148a:	c0 cf       	rjmp	.-128    	; 0x140c <vfprintf+0x672>
    148c:	60 96       	adiw	r28, 0x10	; 16
    148e:	e2 e1       	ldi	r30, 0x12	; 18
    1490:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__epilogue_restores__>

00001494 <__prologue_saves__>:
    1494:	2f 92       	push	r2
    1496:	3f 92       	push	r3
    1498:	4f 92       	push	r4
    149a:	5f 92       	push	r5
    149c:	6f 92       	push	r6
    149e:	7f 92       	push	r7
    14a0:	8f 92       	push	r8
    14a2:	9f 92       	push	r9
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	ca 1b       	sub	r28, r26
    14be:	db 0b       	sbc	r29, r27
    14c0:	0f b6       	in	r0, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	de bf       	out	0x3e, r29	; 62
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	cd bf       	out	0x3d, r28	; 61
    14ca:	09 94       	ijmp

000014cc <__epilogue_restores__>:
    14cc:	2a 88       	ldd	r2, Y+18	; 0x12
    14ce:	39 88       	ldd	r3, Y+17	; 0x11
    14d0:	48 88       	ldd	r4, Y+16	; 0x10
    14d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14da:	9b 84       	ldd	r9, Y+11	; 0x0b
    14dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    14de:	b9 84       	ldd	r11, Y+9	; 0x09
    14e0:	c8 84       	ldd	r12, Y+8	; 0x08
    14e2:	df 80       	ldd	r13, Y+7	; 0x07
    14e4:	ee 80       	ldd	r14, Y+6	; 0x06
    14e6:	fd 80       	ldd	r15, Y+5	; 0x05
    14e8:	0c 81       	ldd	r16, Y+4	; 0x04
    14ea:	1b 81       	ldd	r17, Y+3	; 0x03
    14ec:	aa 81       	ldd	r26, Y+2	; 0x02
    14ee:	b9 81       	ldd	r27, Y+1	; 0x01
    14f0:	ce 0f       	add	r28, r30
    14f2:	d1 1d       	adc	r29, r1
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	ed 01       	movw	r28, r26
    1500:	08 95       	ret

00001502 <atof>:
    1502:	66 27       	eor	r22, r22
    1504:	77 27       	eor	r23, r23
    1506:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <strtod>

0000150a <atoi>:
    150a:	fc 01       	movw	r30, r24
    150c:	88 27       	eor	r24, r24
    150e:	99 27       	eor	r25, r25
    1510:	e8 94       	clt
    1512:	21 91       	ld	r18, Z+
    1514:	20 32       	cpi	r18, 0x20	; 32
    1516:	e9 f3       	breq	.-6      	; 0x1512 <atoi+0x8>
    1518:	29 30       	cpi	r18, 0x09	; 9
    151a:	10 f0       	brcs	.+4      	; 0x1520 <atoi+0x16>
    151c:	2e 30       	cpi	r18, 0x0E	; 14
    151e:	c8 f3       	brcs	.-14     	; 0x1512 <atoi+0x8>
    1520:	2b 32       	cpi	r18, 0x2B	; 43
    1522:	41 f0       	breq	.+16     	; 0x1534 <atoi+0x2a>
    1524:	2d 32       	cpi	r18, 0x2D	; 45
    1526:	39 f4       	brne	.+14     	; 0x1536 <atoi+0x2c>
    1528:	68 94       	set
    152a:	04 c0       	rjmp	.+8      	; 0x1534 <atoi+0x2a>
    152c:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulhi_const_10>
    1530:	82 0f       	add	r24, r18
    1532:	91 1d       	adc	r25, r1
    1534:	21 91       	ld	r18, Z+
    1536:	20 53       	subi	r18, 0x30	; 48
    1538:	2a 30       	cpi	r18, 0x0A	; 10
    153a:	c0 f3       	brcs	.-16     	; 0x152c <atoi+0x22>
    153c:	1e f4       	brtc	.+6      	; 0x1544 <atoi+0x3a>
    153e:	90 95       	com	r25
    1540:	81 95       	neg	r24
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__ftoa_engine>:
    1546:	28 30       	cpi	r18, 0x08	; 8
    1548:	08 f0       	brcs	.+2      	; 0x154c <__ftoa_engine+0x6>
    154a:	27 e0       	ldi	r18, 0x07	; 7
    154c:	33 27       	eor	r19, r19
    154e:	da 01       	movw	r26, r20
    1550:	99 0f       	add	r25, r25
    1552:	31 1d       	adc	r19, r1
    1554:	87 fd       	sbrc	r24, 7
    1556:	91 60       	ori	r25, 0x01	; 1
    1558:	00 96       	adiw	r24, 0x00	; 0
    155a:	61 05       	cpc	r22, r1
    155c:	71 05       	cpc	r23, r1
    155e:	39 f4       	brne	.+14     	; 0x156e <__ftoa_engine+0x28>
    1560:	32 60       	ori	r19, 0x02	; 2
    1562:	2e 5f       	subi	r18, 0xFE	; 254
    1564:	3d 93       	st	X+, r19
    1566:	30 e3       	ldi	r19, 0x30	; 48
    1568:	2a 95       	dec	r18
    156a:	e1 f7       	brne	.-8      	; 0x1564 <__ftoa_engine+0x1e>
    156c:	08 95       	ret
    156e:	9f 3f       	cpi	r25, 0xFF	; 255
    1570:	30 f0       	brcs	.+12     	; 0x157e <__ftoa_engine+0x38>
    1572:	80 38       	cpi	r24, 0x80	; 128
    1574:	71 05       	cpc	r23, r1
    1576:	61 05       	cpc	r22, r1
    1578:	09 f0       	breq	.+2      	; 0x157c <__ftoa_engine+0x36>
    157a:	3c 5f       	subi	r19, 0xFC	; 252
    157c:	3c 5f       	subi	r19, 0xFC	; 252
    157e:	3d 93       	st	X+, r19
    1580:	91 30       	cpi	r25, 0x01	; 1
    1582:	08 f0       	brcs	.+2      	; 0x1586 <__ftoa_engine+0x40>
    1584:	80 68       	ori	r24, 0x80	; 128
    1586:	91 1d       	adc	r25, r1
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	1f 93       	push	r17
    158e:	0f 93       	push	r16
    1590:	ff 92       	push	r15
    1592:	ef 92       	push	r14
    1594:	19 2f       	mov	r17, r25
    1596:	98 7f       	andi	r25, 0xF8	; 248
    1598:	96 95       	lsr	r25
    159a:	e9 2f       	mov	r30, r25
    159c:	96 95       	lsr	r25
    159e:	96 95       	lsr	r25
    15a0:	e9 0f       	add	r30, r25
    15a2:	ff 27       	eor	r31, r31
    15a4:	ea 54       	subi	r30, 0x4A	; 74
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	99 27       	eor	r25, r25
    15aa:	33 27       	eor	r19, r19
    15ac:	ee 24       	eor	r14, r14
    15ae:	ff 24       	eor	r15, r15
    15b0:	a7 01       	movw	r20, r14
    15b2:	e7 01       	movw	r28, r14
    15b4:	05 90       	lpm	r0, Z+
    15b6:	08 94       	sec
    15b8:	07 94       	ror	r0
    15ba:	28 f4       	brcc	.+10     	; 0x15c6 <__ftoa_engine+0x80>
    15bc:	36 0f       	add	r19, r22
    15be:	e7 1e       	adc	r14, r23
    15c0:	f8 1e       	adc	r15, r24
    15c2:	49 1f       	adc	r20, r25
    15c4:	51 1d       	adc	r21, r1
    15c6:	66 0f       	add	r22, r22
    15c8:	77 1f       	adc	r23, r23
    15ca:	88 1f       	adc	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	06 94       	lsr	r0
    15d0:	a1 f7       	brne	.-24     	; 0x15ba <__ftoa_engine+0x74>
    15d2:	05 90       	lpm	r0, Z+
    15d4:	07 94       	ror	r0
    15d6:	28 f4       	brcc	.+10     	; 0x15e2 <__ftoa_engine+0x9c>
    15d8:	e7 0e       	add	r14, r23
    15da:	f8 1e       	adc	r15, r24
    15dc:	49 1f       	adc	r20, r25
    15de:	56 1f       	adc	r21, r22
    15e0:	c1 1d       	adc	r28, r1
    15e2:	77 0f       	add	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	66 1f       	adc	r22, r22
    15ea:	06 94       	lsr	r0
    15ec:	a1 f7       	brne	.-24     	; 0x15d6 <__ftoa_engine+0x90>
    15ee:	05 90       	lpm	r0, Z+
    15f0:	07 94       	ror	r0
    15f2:	28 f4       	brcc	.+10     	; 0x15fe <__ftoa_engine+0xb8>
    15f4:	f8 0e       	add	r15, r24
    15f6:	49 1f       	adc	r20, r25
    15f8:	56 1f       	adc	r21, r22
    15fa:	c7 1f       	adc	r28, r23
    15fc:	d1 1d       	adc	r29, r1
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	66 1f       	adc	r22, r22
    1604:	77 1f       	adc	r23, r23
    1606:	06 94       	lsr	r0
    1608:	a1 f7       	brne	.-24     	; 0x15f2 <__ftoa_engine+0xac>
    160a:	05 90       	lpm	r0, Z+
    160c:	07 94       	ror	r0
    160e:	20 f4       	brcc	.+8      	; 0x1618 <__ftoa_engine+0xd2>
    1610:	49 0f       	add	r20, r25
    1612:	56 1f       	adc	r21, r22
    1614:	c7 1f       	adc	r28, r23
    1616:	d8 1f       	adc	r29, r24
    1618:	99 0f       	add	r25, r25
    161a:	66 1f       	adc	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	06 94       	lsr	r0
    1622:	a9 f7       	brne	.-22     	; 0x160e <__ftoa_engine+0xc8>
    1624:	84 91       	lpm	r24, Z
    1626:	10 95       	com	r17
    1628:	17 70       	andi	r17, 0x07	; 7
    162a:	41 f0       	breq	.+16     	; 0x163c <__ftoa_engine+0xf6>
    162c:	d6 95       	lsr	r29
    162e:	c7 95       	ror	r28
    1630:	57 95       	ror	r21
    1632:	47 95       	ror	r20
    1634:	f7 94       	ror	r15
    1636:	e7 94       	ror	r14
    1638:	1a 95       	dec	r17
    163a:	c1 f7       	brne	.-16     	; 0x162c <__ftoa_engine+0xe6>
    163c:	ec e5       	ldi	r30, 0x5C	; 92
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	68 94       	set
    1642:	15 90       	lpm	r1, Z+
    1644:	15 91       	lpm	r17, Z+
    1646:	35 91       	lpm	r19, Z+
    1648:	65 91       	lpm	r22, Z+
    164a:	95 91       	lpm	r25, Z+
    164c:	05 90       	lpm	r0, Z+
    164e:	7f e2       	ldi	r23, 0x2F	; 47
    1650:	73 95       	inc	r23
    1652:	e1 18       	sub	r14, r1
    1654:	f1 0a       	sbc	r15, r17
    1656:	43 0b       	sbc	r20, r19
    1658:	56 0b       	sbc	r21, r22
    165a:	c9 0b       	sbc	r28, r25
    165c:	d0 09       	sbc	r29, r0
    165e:	c0 f7       	brcc	.-16     	; 0x1650 <__ftoa_engine+0x10a>
    1660:	e1 0c       	add	r14, r1
    1662:	f1 1e       	adc	r15, r17
    1664:	43 1f       	adc	r20, r19
    1666:	56 1f       	adc	r21, r22
    1668:	c9 1f       	adc	r28, r25
    166a:	d0 1d       	adc	r29, r0
    166c:	7e f4       	brtc	.+30     	; 0x168c <__ftoa_engine+0x146>
    166e:	70 33       	cpi	r23, 0x30	; 48
    1670:	11 f4       	brne	.+4      	; 0x1676 <__ftoa_engine+0x130>
    1672:	8a 95       	dec	r24
    1674:	e6 cf       	rjmp	.-52     	; 0x1642 <__ftoa_engine+0xfc>
    1676:	e8 94       	clt
    1678:	01 50       	subi	r16, 0x01	; 1
    167a:	30 f0       	brcs	.+12     	; 0x1688 <__ftoa_engine+0x142>
    167c:	08 0f       	add	r16, r24
    167e:	0a f4       	brpl	.+2      	; 0x1682 <__ftoa_engine+0x13c>
    1680:	00 27       	eor	r16, r16
    1682:	02 17       	cp	r16, r18
    1684:	08 f4       	brcc	.+2      	; 0x1688 <__ftoa_engine+0x142>
    1686:	20 2f       	mov	r18, r16
    1688:	23 95       	inc	r18
    168a:	02 2f       	mov	r16, r18
    168c:	7a 33       	cpi	r23, 0x3A	; 58
    168e:	28 f0       	brcs	.+10     	; 0x169a <__ftoa_engine+0x154>
    1690:	79 e3       	ldi	r23, 0x39	; 57
    1692:	7d 93       	st	X+, r23
    1694:	2a 95       	dec	r18
    1696:	e9 f7       	brne	.-6      	; 0x1692 <__ftoa_engine+0x14c>
    1698:	10 c0       	rjmp	.+32     	; 0x16ba <__ftoa_engine+0x174>
    169a:	7d 93       	st	X+, r23
    169c:	2a 95       	dec	r18
    169e:	89 f6       	brne	.-94     	; 0x1642 <__ftoa_engine+0xfc>
    16a0:	06 94       	lsr	r0
    16a2:	97 95       	ror	r25
    16a4:	67 95       	ror	r22
    16a6:	37 95       	ror	r19
    16a8:	17 95       	ror	r17
    16aa:	17 94       	ror	r1
    16ac:	e1 18       	sub	r14, r1
    16ae:	f1 0a       	sbc	r15, r17
    16b0:	43 0b       	sbc	r20, r19
    16b2:	56 0b       	sbc	r21, r22
    16b4:	c9 0b       	sbc	r28, r25
    16b6:	d0 09       	sbc	r29, r0
    16b8:	98 f0       	brcs	.+38     	; 0x16e0 <__ftoa_engine+0x19a>
    16ba:	23 95       	inc	r18
    16bc:	7e 91       	ld	r23, -X
    16be:	73 95       	inc	r23
    16c0:	7a 33       	cpi	r23, 0x3A	; 58
    16c2:	08 f0       	brcs	.+2      	; 0x16c6 <__ftoa_engine+0x180>
    16c4:	70 e3       	ldi	r23, 0x30	; 48
    16c6:	7c 93       	st	X, r23
    16c8:	20 13       	cpse	r18, r16
    16ca:	b8 f7       	brcc	.-18     	; 0x16ba <__ftoa_engine+0x174>
    16cc:	7e 91       	ld	r23, -X
    16ce:	70 61       	ori	r23, 0x10	; 16
    16d0:	7d 93       	st	X+, r23
    16d2:	30 f0       	brcs	.+12     	; 0x16e0 <__ftoa_engine+0x19a>
    16d4:	83 95       	inc	r24
    16d6:	71 e3       	ldi	r23, 0x31	; 49
    16d8:	7d 93       	st	X+, r23
    16da:	70 e3       	ldi	r23, 0x30	; 48
    16dc:	2a 95       	dec	r18
    16de:	e1 f7       	brne	.-8      	; 0x16d8 <__ftoa_engine+0x192>
    16e0:	11 24       	eor	r1, r1
    16e2:	ef 90       	pop	r14
    16e4:	ff 90       	pop	r15
    16e6:	0f 91       	pop	r16
    16e8:	1f 91       	pop	r17
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	99 27       	eor	r25, r25
    16f0:	87 fd       	sbrc	r24, 7
    16f2:	90 95       	com	r25
    16f4:	08 95       	ret

000016f6 <strnlen_P>:
    16f6:	fc 01       	movw	r30, r24
    16f8:	05 90       	lpm	r0, Z+
    16fa:	61 50       	subi	r22, 0x01	; 1
    16fc:	70 40       	sbci	r23, 0x00	; 0
    16fe:	01 10       	cpse	r0, r1
    1700:	d8 f7       	brcc	.-10     	; 0x16f8 <strnlen_P+0x2>
    1702:	80 95       	com	r24
    1704:	90 95       	com	r25
    1706:	8e 0f       	add	r24, r30
    1708:	9f 1f       	adc	r25, r31
    170a:	08 95       	ret

0000170c <strnlen>:
    170c:	fc 01       	movw	r30, r24
    170e:	61 50       	subi	r22, 0x01	; 1
    1710:	70 40       	sbci	r23, 0x00	; 0
    1712:	01 90       	ld	r0, Z+
    1714:	01 10       	cpse	r0, r1
    1716:	d8 f7       	brcc	.-10     	; 0x170e <strnlen+0x2>
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	8e 0f       	add	r24, r30
    171e:	9f 1f       	adc	r25, r31
    1720:	08 95       	ret

00001722 <__mulhi_const_10>:
    1722:	7a e0       	ldi	r23, 0x0A	; 10
    1724:	97 9f       	mul	r25, r23
    1726:	90 2d       	mov	r25, r0
    1728:	87 9f       	mul	r24, r23
    172a:	80 2d       	mov	r24, r0
    172c:	91 0d       	add	r25, r1
    172e:	11 24       	eor	r1, r1
    1730:	08 95       	ret

00001732 <fputc>:
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	fb 01       	movw	r30, r22
    173c:	23 81       	ldd	r18, Z+3	; 0x03
    173e:	21 fd       	sbrc	r18, 1
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <fputc+0x16>
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	9f ef       	ldi	r25, 0xFF	; 255
    1746:	2c c0       	rjmp	.+88     	; 0x17a0 <fputc+0x6e>
    1748:	22 ff       	sbrs	r18, 2
    174a:	16 c0       	rjmp	.+44     	; 0x1778 <fputc+0x46>
    174c:	46 81       	ldd	r20, Z+6	; 0x06
    174e:	57 81       	ldd	r21, Z+7	; 0x07
    1750:	24 81       	ldd	r18, Z+4	; 0x04
    1752:	35 81       	ldd	r19, Z+5	; 0x05
    1754:	42 17       	cp	r20, r18
    1756:	53 07       	cpc	r21, r19
    1758:	44 f4       	brge	.+16     	; 0x176a <fputc+0x38>
    175a:	a0 81       	ld	r26, Z
    175c:	b1 81       	ldd	r27, Z+1	; 0x01
    175e:	9d 01       	movw	r18, r26
    1760:	2f 5f       	subi	r18, 0xFF	; 255
    1762:	3f 4f       	sbci	r19, 0xFF	; 255
    1764:	31 83       	std	Z+1, r19	; 0x01
    1766:	20 83       	st	Z, r18
    1768:	8c 93       	st	X, r24
    176a:	26 81       	ldd	r18, Z+6	; 0x06
    176c:	37 81       	ldd	r19, Z+7	; 0x07
    176e:	2f 5f       	subi	r18, 0xFF	; 255
    1770:	3f 4f       	sbci	r19, 0xFF	; 255
    1772:	37 83       	std	Z+7, r19	; 0x07
    1774:	26 83       	std	Z+6, r18	; 0x06
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <fputc+0x6e>
    1778:	8b 01       	movw	r16, r22
    177a:	ec 01       	movw	r28, r24
    177c:	fb 01       	movw	r30, r22
    177e:	00 84       	ldd	r0, Z+8	; 0x08
    1780:	f1 85       	ldd	r31, Z+9	; 0x09
    1782:	e0 2d       	mov	r30, r0
    1784:	09 95       	icall
    1786:	89 2b       	or	r24, r25
    1788:	e1 f6       	brne	.-72     	; 0x1742 <fputc+0x10>
    178a:	d8 01       	movw	r26, r16
    178c:	16 96       	adiw	r26, 0x06	; 6
    178e:	8d 91       	ld	r24, X+
    1790:	9c 91       	ld	r25, X
    1792:	17 97       	sbiw	r26, 0x07	; 7
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	17 96       	adiw	r26, 0x07	; 7
    1798:	9c 93       	st	X, r25
    179a:	8e 93       	st	-X, r24
    179c:	16 97       	sbiw	r26, 0x06	; 6
    179e:	ce 01       	movw	r24, r28
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	08 95       	ret

000017aa <sprintf>:
    17aa:	ae e0       	ldi	r26, 0x0E	; 14
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb ed       	ldi	r30, 0xDB	; 219
    17b0:	fb e0       	ldi	r31, 0x0B	; 11
    17b2:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__prologue_saves__+0x1c>
    17b6:	0d 89       	ldd	r16, Y+21	; 0x15
    17b8:	1e 89       	ldd	r17, Y+22	; 0x16
    17ba:	86 e0       	ldi	r24, 0x06	; 6
    17bc:	8c 83       	std	Y+4, r24	; 0x04
    17be:	1a 83       	std	Y+2, r17	; 0x02
    17c0:	09 83       	std	Y+1, r16	; 0x01
    17c2:	8f ef       	ldi	r24, 0xFF	; 255
    17c4:	9f e7       	ldi	r25, 0x7F	; 127
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	ae 01       	movw	r20, r28
    17cc:	47 5e       	subi	r20, 0xE7	; 231
    17ce:	5f 4f       	sbci	r21, 0xFF	; 255
    17d0:	6f 89       	ldd	r22, Y+23	; 0x17
    17d2:	78 8d       	ldd	r23, Y+24	; 0x18
    17d4:	ce 01       	movw	r24, r28
    17d6:	01 96       	adiw	r24, 0x01	; 1
    17d8:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vfprintf>
    17dc:	ef 81       	ldd	r30, Y+7	; 0x07
    17de:	f8 85       	ldd	r31, Y+8	; 0x08
    17e0:	e0 0f       	add	r30, r16
    17e2:	f1 1f       	adc	r31, r17
    17e4:	10 82       	st	Z, r1
    17e6:	2e 96       	adiw	r28, 0x0e	; 14
    17e8:	e4 e0       	ldi	r30, 0x04	; 4
    17ea:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__epilogue_restores__+0x1c>

000017ee <__ultoa_invert>:
    17ee:	fa 01       	movw	r30, r20
    17f0:	aa 27       	eor	r26, r26
    17f2:	28 30       	cpi	r18, 0x08	; 8
    17f4:	51 f1       	breq	.+84     	; 0x184a <__ultoa_invert+0x5c>
    17f6:	20 31       	cpi	r18, 0x10	; 16
    17f8:	81 f1       	breq	.+96     	; 0x185a <__ultoa_invert+0x6c>
    17fa:	e8 94       	clt
    17fc:	6f 93       	push	r22
    17fe:	6e 7f       	andi	r22, 0xFE	; 254
    1800:	6e 5f       	subi	r22, 0xFE	; 254
    1802:	7f 4f       	sbci	r23, 0xFF	; 255
    1804:	8f 4f       	sbci	r24, 0xFF	; 255
    1806:	9f 4f       	sbci	r25, 0xFF	; 255
    1808:	af 4f       	sbci	r26, 0xFF	; 255
    180a:	b1 e0       	ldi	r27, 0x01	; 1
    180c:	3e d0       	rcall	.+124    	; 0x188a <__ultoa_invert+0x9c>
    180e:	b4 e0       	ldi	r27, 0x04	; 4
    1810:	3c d0       	rcall	.+120    	; 0x188a <__ultoa_invert+0x9c>
    1812:	67 0f       	add	r22, r23
    1814:	78 1f       	adc	r23, r24
    1816:	89 1f       	adc	r24, r25
    1818:	9a 1f       	adc	r25, r26
    181a:	a1 1d       	adc	r26, r1
    181c:	68 0f       	add	r22, r24
    181e:	79 1f       	adc	r23, r25
    1820:	8a 1f       	adc	r24, r26
    1822:	91 1d       	adc	r25, r1
    1824:	a1 1d       	adc	r26, r1
    1826:	6a 0f       	add	r22, r26
    1828:	71 1d       	adc	r23, r1
    182a:	81 1d       	adc	r24, r1
    182c:	91 1d       	adc	r25, r1
    182e:	a1 1d       	adc	r26, r1
    1830:	20 d0       	rcall	.+64     	; 0x1872 <__ultoa_invert+0x84>
    1832:	09 f4       	brne	.+2      	; 0x1836 <__ultoa_invert+0x48>
    1834:	68 94       	set
    1836:	3f 91       	pop	r19
    1838:	2a e0       	ldi	r18, 0x0A	; 10
    183a:	26 9f       	mul	r18, r22
    183c:	11 24       	eor	r1, r1
    183e:	30 19       	sub	r19, r0
    1840:	30 5d       	subi	r19, 0xD0	; 208
    1842:	31 93       	st	Z+, r19
    1844:	de f6       	brtc	.-74     	; 0x17fc <__ultoa_invert+0xe>
    1846:	cf 01       	movw	r24, r30
    1848:	08 95       	ret
    184a:	46 2f       	mov	r20, r22
    184c:	47 70       	andi	r20, 0x07	; 7
    184e:	40 5d       	subi	r20, 0xD0	; 208
    1850:	41 93       	st	Z+, r20
    1852:	b3 e0       	ldi	r27, 0x03	; 3
    1854:	0f d0       	rcall	.+30     	; 0x1874 <__ultoa_invert+0x86>
    1856:	c9 f7       	brne	.-14     	; 0x184a <__ultoa_invert+0x5c>
    1858:	f6 cf       	rjmp	.-20     	; 0x1846 <__ultoa_invert+0x58>
    185a:	46 2f       	mov	r20, r22
    185c:	4f 70       	andi	r20, 0x0F	; 15
    185e:	40 5d       	subi	r20, 0xD0	; 208
    1860:	4a 33       	cpi	r20, 0x3A	; 58
    1862:	18 f0       	brcs	.+6      	; 0x186a <__ultoa_invert+0x7c>
    1864:	49 5d       	subi	r20, 0xD9	; 217
    1866:	31 fd       	sbrc	r19, 1
    1868:	40 52       	subi	r20, 0x20	; 32
    186a:	41 93       	st	Z+, r20
    186c:	02 d0       	rcall	.+4      	; 0x1872 <__ultoa_invert+0x84>
    186e:	a9 f7       	brne	.-22     	; 0x185a <__ultoa_invert+0x6c>
    1870:	ea cf       	rjmp	.-44     	; 0x1846 <__ultoa_invert+0x58>
    1872:	b4 e0       	ldi	r27, 0x04	; 4
    1874:	a6 95       	lsr	r26
    1876:	97 95       	ror	r25
    1878:	87 95       	ror	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	ba 95       	dec	r27
    1880:	c9 f7       	brne	.-14     	; 0x1874 <__ultoa_invert+0x86>
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	61 05       	cpc	r22, r1
    1886:	71 05       	cpc	r23, r1
    1888:	08 95       	ret
    188a:	9b 01       	movw	r18, r22
    188c:	ac 01       	movw	r20, r24
    188e:	0a 2e       	mov	r0, r26
    1890:	06 94       	lsr	r0
    1892:	57 95       	ror	r21
    1894:	47 95       	ror	r20
    1896:	37 95       	ror	r19
    1898:	27 95       	ror	r18
    189a:	ba 95       	dec	r27
    189c:	c9 f7       	brne	.-14     	; 0x1890 <__ultoa_invert+0xa2>
    189e:	62 0f       	add	r22, r18
    18a0:	73 1f       	adc	r23, r19
    18a2:	84 1f       	adc	r24, r20
    18a4:	95 1f       	adc	r25, r21
    18a6:	a0 1d       	adc	r26, r0
    18a8:	08 95       	ret

000018aa <strtod>:
    18aa:	a0 e0       	ldi	r26, 0x00	; 0
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e5       	ldi	r30, 0x5B	; 91
    18b0:	fc e0       	ldi	r31, 0x0C	; 12
    18b2:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__prologue_saves__+0xc>
    18b6:	ec 01       	movw	r28, r24
    18b8:	6b 01       	movw	r12, r22
    18ba:	61 15       	cp	r22, r1
    18bc:	71 05       	cpc	r23, r1
    18be:	19 f0       	breq	.+6      	; 0x18c6 <strtod+0x1c>
    18c0:	fb 01       	movw	r30, r22
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
    18c6:	7e 01       	movw	r14, r28
    18c8:	ff ef       	ldi	r31, 0xFF	; 255
    18ca:	ef 1a       	sub	r14, r31
    18cc:	ff 0a       	sbc	r15, r31
    18ce:	08 81       	ld	r16, Y
    18d0:	80 2f       	mov	r24, r16
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <isspace>
    18d8:	89 2b       	or	r24, r25
    18da:	11 f0       	breq	.+4      	; 0x18e0 <strtod+0x36>
    18dc:	e7 01       	movw	r28, r14
    18de:	f3 cf       	rjmp	.-26     	; 0x18c6 <strtod+0x1c>
    18e0:	0d 32       	cpi	r16, 0x2D	; 45
    18e2:	39 f4       	brne	.+14     	; 0x18f2 <strtod+0x48>
    18e4:	7e 01       	movw	r14, r28
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	e8 0e       	add	r14, r24
    18ea:	f1 1c       	adc	r15, r1
    18ec:	09 81       	ldd	r16, Y+1	; 0x01
    18ee:	11 e0       	ldi	r17, 0x01	; 1
    18f0:	08 c0       	rjmp	.+16     	; 0x1902 <strtod+0x58>
    18f2:	0b 32       	cpi	r16, 0x2B	; 43
    18f4:	29 f4       	brne	.+10     	; 0x1900 <strtod+0x56>
    18f6:	7e 01       	movw	r14, r28
    18f8:	92 e0       	ldi	r25, 0x02	; 2
    18fa:	e9 0e       	add	r14, r25
    18fc:	f1 1c       	adc	r15, r1
    18fe:	09 81       	ldd	r16, Y+1	; 0x01
    1900:	10 e0       	ldi	r17, 0x00	; 0
    1902:	e7 01       	movw	r28, r14
    1904:	21 97       	sbiw	r28, 0x01	; 1
    1906:	43 e0       	ldi	r20, 0x03	; 3
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	6e e5       	ldi	r22, 0x5E	; 94
    190c:	71 e0       	ldi	r23, 0x01	; 1
    190e:	ce 01       	movw	r24, r28
    1910:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <strncasecmp_P>
    1914:	89 2b       	or	r24, r25
    1916:	c1 f4       	brne	.+48     	; 0x1948 <strtod+0x9e>
    1918:	23 96       	adiw	r28, 0x03	; 3
    191a:	45 e0       	ldi	r20, 0x05	; 5
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	69 e5       	ldi	r22, 0x59	; 89
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	ce 01       	movw	r24, r28
    1924:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <strncasecmp_P>
    1928:	89 2b       	or	r24, r25
    192a:	09 f4       	brne	.+2      	; 0x192e <strtod+0x84>
    192c:	25 96       	adiw	r28, 0x05	; 5
    192e:	c1 14       	cp	r12, r1
    1930:	d1 04       	cpc	r13, r1
    1932:	19 f0       	breq	.+6      	; 0x193a <strtod+0x90>
    1934:	f6 01       	movw	r30, r12
    1936:	d1 83       	std	Z+1, r29	; 0x01
    1938:	c0 83       	st	Z, r28
    193a:	11 11       	cpse	r17, r1
    193c:	f6 c0       	rjmp	.+492    	; 0x1b2a <strtod+0x280>
    193e:	60 e0       	ldi	r22, 0x00	; 0
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	80 e8       	ldi	r24, 0x80	; 128
    1944:	9f e7       	ldi	r25, 0x7F	; 127
    1946:	fa c0       	rjmp	.+500    	; 0x1b3c <strtod+0x292>
    1948:	43 e0       	ldi	r20, 0x03	; 3
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	66 e5       	ldi	r22, 0x56	; 86
    194e:	71 e0       	ldi	r23, 0x01	; 1
    1950:	ce 01       	movw	r24, r28
    1952:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <strncasecmp_P>
    1956:	89 2b       	or	r24, r25
    1958:	59 f4       	brne	.+22     	; 0x1970 <strtod+0xc6>
    195a:	c1 14       	cp	r12, r1
    195c:	d1 04       	cpc	r13, r1
    195e:	09 f4       	brne	.+2      	; 0x1962 <strtod+0xb8>
    1960:	e9 c0       	rjmp	.+466    	; 0x1b34 <strtod+0x28a>
    1962:	f2 e0       	ldi	r31, 0x02	; 2
    1964:	ef 0e       	add	r14, r31
    1966:	f1 1c       	adc	r15, r1
    1968:	f6 01       	movw	r30, r12
    196a:	f1 82       	std	Z+1, r15	; 0x01
    196c:	e0 82       	st	Z, r14
    196e:	e2 c0       	rjmp	.+452    	; 0x1b34 <strtod+0x28a>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	c0 e0       	ldi	r28, 0x00	; 0
    1978:	d0 e0       	ldi	r29, 0x00	; 0
    197a:	f7 01       	movw	r30, r14
    197c:	80 ed       	ldi	r24, 0xD0	; 208
    197e:	a8 2e       	mov	r10, r24
    1980:	a0 0e       	add	r10, r16
    1982:	89 e0       	ldi	r24, 0x09	; 9
    1984:	8a 15       	cp	r24, r10
    1986:	30 f1       	brcs	.+76     	; 0x19d4 <strtod+0x12a>
    1988:	91 2f       	mov	r25, r17
    198a:	92 60       	ori	r25, 0x02	; 2
    198c:	b9 2e       	mov	r11, r25
    198e:	81 2f       	mov	r24, r17
    1990:	88 70       	andi	r24, 0x08	; 8
    1992:	12 ff       	sbrs	r17, 2
    1994:	04 c0       	rjmp	.+8      	; 0x199e <strtod+0xf4>
    1996:	81 11       	cpse	r24, r1
    1998:	24 c0       	rjmp	.+72     	; 0x19e2 <strtod+0x138>
    199a:	21 96       	adiw	r28, 0x01	; 1
    199c:	22 c0       	rjmp	.+68     	; 0x19e2 <strtod+0x138>
    199e:	81 11       	cpse	r24, r1
    19a0:	21 97       	sbiw	r28, 0x01	; 1
    19a2:	a5 e0       	ldi	r26, 0x05	; 5
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__muluhisi3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	aa 1f       	adc	r26, r26
    19b4:	bb 1f       	adc	r27, r27
    19b6:	9c 01       	movw	r18, r24
    19b8:	ad 01       	movw	r20, r26
    19ba:	2a 0d       	add	r18, r10
    19bc:	31 1d       	adc	r19, r1
    19be:	41 1d       	adc	r20, r1
    19c0:	51 1d       	adc	r21, r1
    19c2:	28 39       	cpi	r18, 0x98	; 152
    19c4:	89 e9       	ldi	r24, 0x99	; 153
    19c6:	38 07       	cpc	r19, r24
    19c8:	48 07       	cpc	r20, r24
    19ca:	89 e1       	ldi	r24, 0x19	; 25
    19cc:	58 07       	cpc	r21, r24
    19ce:	48 f0       	brcs	.+18     	; 0x19e2 <strtod+0x138>
    19d0:	16 60       	ori	r17, 0x06	; 6
    19d2:	06 c0       	rjmp	.+12     	; 0x19e0 <strtod+0x136>
    19d4:	9e ef       	ldi	r25, 0xFE	; 254
    19d6:	a9 12       	cpse	r10, r25
    19d8:	0a c0       	rjmp	.+20     	; 0x19ee <strtod+0x144>
    19da:	13 fd       	sbrc	r17, 3
    19dc:	40 c0       	rjmp	.+128    	; 0x1a5e <strtod+0x1b4>
    19de:	18 60       	ori	r17, 0x08	; 8
    19e0:	b1 2e       	mov	r11, r17
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	e8 1a       	sub	r14, r24
    19e6:	f8 0a       	sbc	r15, r24
    19e8:	00 81       	ld	r16, Z
    19ea:	1b 2d       	mov	r17, r11
    19ec:	c6 cf       	rjmp	.-116    	; 0x197a <strtod+0xd0>
    19ee:	80 2f       	mov	r24, r16
    19f0:	8f 7d       	andi	r24, 0xDF	; 223
    19f2:	85 34       	cpi	r24, 0x45	; 69
    19f4:	a1 f5       	brne	.+104    	; 0x1a5e <strtod+0x1b4>
    19f6:	80 81       	ld	r24, Z
    19f8:	8d 32       	cpi	r24, 0x2D	; 45
    19fa:	11 f4       	brne	.+4      	; 0x1a00 <strtod+0x156>
    19fc:	10 61       	ori	r17, 0x10	; 16
    19fe:	06 c0       	rjmp	.+12     	; 0x1a0c <strtod+0x162>
    1a00:	8b 32       	cpi	r24, 0x2B	; 43
    1a02:	21 f0       	breq	.+8      	; 0x1a0c <strtod+0x162>
    1a04:	31 96       	adiw	r30, 0x01	; 1
    1a06:	61 e0       	ldi	r22, 0x01	; 1
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <strtod+0x16a>
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	32 96       	adiw	r30, 0x02	; 2
    1a10:	62 e0       	ldi	r22, 0x02	; 2
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	80 53       	subi	r24, 0x30	; 48
    1a16:	8a 30       	cpi	r24, 0x0A	; 10
    1a18:	18 f0       	brcs	.+6      	; 0x1a20 <strtod+0x176>
    1a1a:	e6 1b       	sub	r30, r22
    1a1c:	f7 0b       	sbc	r31, r23
    1a1e:	1f c0       	rjmp	.+62     	; 0x1a5e <strtod+0x1b4>
    1a20:	60 e0       	ldi	r22, 0x00	; 0
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	60 38       	cpi	r22, 0x80	; 128
    1a26:	9c e0       	ldi	r25, 0x0C	; 12
    1a28:	79 07       	cpc	r23, r25
    1a2a:	5c f4       	brge	.+22     	; 0x1a42 <strtod+0x198>
    1a2c:	db 01       	movw	r26, r22
    1a2e:	aa 0f       	add	r26, r26
    1a30:	bb 1f       	adc	r27, r27
    1a32:	aa 0f       	add	r26, r26
    1a34:	bb 1f       	adc	r27, r27
    1a36:	6a 0f       	add	r22, r26
    1a38:	7b 1f       	adc	r23, r27
    1a3a:	66 0f       	add	r22, r22
    1a3c:	77 1f       	adc	r23, r23
    1a3e:	68 0f       	add	r22, r24
    1a40:	71 1d       	adc	r23, r1
    1a42:	31 96       	adiw	r30, 0x01	; 1
    1a44:	df 01       	movw	r26, r30
    1a46:	11 97       	sbiw	r26, 0x01	; 1
    1a48:	8c 91       	ld	r24, X
    1a4a:	80 53       	subi	r24, 0x30	; 48
    1a4c:	8a 30       	cpi	r24, 0x0A	; 10
    1a4e:	50 f3       	brcs	.-44     	; 0x1a24 <strtod+0x17a>
    1a50:	14 ff       	sbrs	r17, 4
    1a52:	03 c0       	rjmp	.+6      	; 0x1a5a <strtod+0x1b0>
    1a54:	71 95       	neg	r23
    1a56:	61 95       	neg	r22
    1a58:	71 09       	sbc	r23, r1
    1a5a:	c6 0f       	add	r28, r22
    1a5c:	d7 1f       	adc	r29, r23
    1a5e:	11 ff       	sbrs	r17, 1
    1a60:	08 c0       	rjmp	.+16     	; 0x1a72 <strtod+0x1c8>
    1a62:	c1 14       	cp	r12, r1
    1a64:	d1 04       	cpc	r13, r1
    1a66:	29 f0       	breq	.+10     	; 0x1a72 <strtod+0x1c8>
    1a68:	cf 01       	movw	r24, r30
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f6 01       	movw	r30, r12
    1a6e:	91 83       	std	Z+1, r25	; 0x01
    1a70:	80 83       	st	Z, r24
    1a72:	ca 01       	movw	r24, r20
    1a74:	b9 01       	movw	r22, r18
    1a76:	0e 94 d2 05 	call	0xba4	; 0xba4 <__floatunsisf>
    1a7a:	21 2f       	mov	r18, r17
    1a7c:	23 70       	andi	r18, 0x03	; 3
    1a7e:	23 30       	cpi	r18, 0x03	; 3
    1a80:	19 f0       	breq	.+6      	; 0x1a88 <strtod+0x1de>
    1a82:	4b 01       	movw	r8, r22
    1a84:	5c 01       	movw	r10, r24
    1a86:	06 c0       	rjmp	.+12     	; 0x1a94 <strtod+0x1ea>
    1a88:	4b 01       	movw	r8, r22
    1a8a:	5c 01       	movw	r10, r24
    1a8c:	b7 fa       	bst	r11, 7
    1a8e:	b0 94       	com	r11
    1a90:	b7 f8       	bld	r11, 7
    1a92:	b0 94       	com	r11
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	a9 01       	movw	r20, r18
    1a9a:	c5 01       	movw	r24, r10
    1a9c:	b4 01       	movw	r22, r8
    1a9e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__cmpsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	09 f4       	brne	.+2      	; 0x1aa8 <strtod+0x1fe>
    1aa6:	3e c0       	rjmp	.+124    	; 0x1b24 <strtod+0x27a>
    1aa8:	d7 ff       	sbrs	r29, 7
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <strtod+0x20e>
    1aac:	d1 95       	neg	r29
    1aae:	c1 95       	neg	r28
    1ab0:	d1 09       	sbc	r29, r1
    1ab2:	05 e7       	ldi	r16, 0x75	; 117
    1ab4:	11 e0       	ldi	r17, 0x01	; 1
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <strtod+0x212>
    1ab8:	0d e8       	ldi	r16, 0x8D	; 141
    1aba:	11 e0       	ldi	r17, 0x01	; 1
    1abc:	68 01       	movw	r12, r16
    1abe:	f8 e1       	ldi	r31, 0x18	; 24
    1ac0:	cf 1a       	sub	r12, r31
    1ac2:	d1 08       	sbc	r13, r1
    1ac4:	90 e2       	ldi	r25, 0x20	; 32
    1ac6:	e9 2e       	mov	r14, r25
    1ac8:	f1 2c       	mov	r15, r1
    1aca:	ce 15       	cp	r28, r14
    1acc:	df 05       	cpc	r29, r15
    1ace:	74 f0       	brlt	.+28     	; 0x1aec <strtod+0x242>
    1ad0:	f8 01       	movw	r30, r16
    1ad2:	25 91       	lpm	r18, Z+
    1ad4:	35 91       	lpm	r19, Z+
    1ad6:	45 91       	lpm	r20, Z+
    1ad8:	54 91       	lpm	r21, Z
    1ada:	c5 01       	movw	r24, r10
    1adc:	b4 01       	movw	r22, r8
    1ade:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__mulsf3>
    1ae2:	4b 01       	movw	r8, r22
    1ae4:	5c 01       	movw	r10, r24
    1ae6:	ce 19       	sub	r28, r14
    1ae8:	df 09       	sbc	r29, r15
    1aea:	ef cf       	rjmp	.-34     	; 0x1aca <strtod+0x220>
    1aec:	04 50       	subi	r16, 0x04	; 4
    1aee:	11 09       	sbc	r17, r1
    1af0:	f5 94       	asr	r15
    1af2:	e7 94       	ror	r14
    1af4:	0c 15       	cp	r16, r12
    1af6:	1d 05       	cpc	r17, r13
    1af8:	41 f7       	brne	.-48     	; 0x1aca <strtod+0x220>
    1afa:	8a 2d       	mov	r24, r10
    1afc:	88 0f       	add	r24, r24
    1afe:	8b 2d       	mov	r24, r11
    1b00:	88 1f       	adc	r24, r24
    1b02:	8f 3f       	cpi	r24, 0xFF	; 255
    1b04:	49 f0       	breq	.+18     	; 0x1b18 <strtod+0x26e>
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	a9 01       	movw	r20, r18
    1b0c:	c5 01       	movw	r24, r10
    1b0e:	b4 01       	movw	r22, r8
    1b10:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <__cmpsf2>
    1b14:	81 11       	cpse	r24, r1
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <strtod+0x27a>
    1b18:	82 e2       	ldi	r24, 0x22	; 34
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <errno+0x1>
    1b20:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <errno>
    1b24:	c5 01       	movw	r24, r10
    1b26:	b4 01       	movw	r22, r8
    1b28:	09 c0       	rjmp	.+18     	; 0x1b3c <strtod+0x292>
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	80 e8       	ldi	r24, 0x80	; 128
    1b30:	9f ef       	ldi	r25, 0xFF	; 255
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <strtod+0x292>
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	80 ec       	ldi	r24, 0xC0	; 192
    1b3a:	9f e7       	ldi	r25, 0x7F	; 127
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	ec e0       	ldi	r30, 0x0C	; 12
    1b42:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__epilogue_restores__+0xc>

00001b46 <isspace>:
    1b46:	91 11       	cpse	r25, r1
    1b48:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__ctype_isfalse>
    1b4c:	80 32       	cpi	r24, 0x20	; 32
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <isspace+0x10>
    1b50:	89 50       	subi	r24, 0x09	; 9
    1b52:	85 50       	subi	r24, 0x05	; 5
    1b54:	c8 f7       	brcc	.-14     	; 0x1b48 <isspace+0x2>
    1b56:	08 95       	ret

00001b58 <strncasecmp_P>:
    1b58:	fb 01       	movw	r30, r22
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	41 50       	subi	r20, 0x01	; 1
    1b5e:	50 40       	sbci	r21, 0x00	; 0
    1b60:	88 f0       	brcs	.+34     	; 0x1b84 <strncasecmp_P+0x2c>
    1b62:	8d 91       	ld	r24, X+
    1b64:	81 34       	cpi	r24, 0x41	; 65
    1b66:	1c f0       	brlt	.+6      	; 0x1b6e <strncasecmp_P+0x16>
    1b68:	8b 35       	cpi	r24, 0x5B	; 91
    1b6a:	0c f4       	brge	.+2      	; 0x1b6e <strncasecmp_P+0x16>
    1b6c:	80 5e       	subi	r24, 0xE0	; 224
    1b6e:	65 91       	lpm	r22, Z+
    1b70:	61 34       	cpi	r22, 0x41	; 65
    1b72:	1c f0       	brlt	.+6      	; 0x1b7a <strncasecmp_P+0x22>
    1b74:	6b 35       	cpi	r22, 0x5B	; 91
    1b76:	0c f4       	brge	.+2      	; 0x1b7a <strncasecmp_P+0x22>
    1b78:	60 5e       	subi	r22, 0xE0	; 224
    1b7a:	86 1b       	sub	r24, r22
    1b7c:	61 11       	cpse	r22, r1
    1b7e:	71 f3       	breq	.-36     	; 0x1b5c <strncasecmp_P+0x4>
    1b80:	99 0b       	sbc	r25, r25
    1b82:	08 95       	ret
    1b84:	88 1b       	sub	r24, r24
    1b86:	fc cf       	rjmp	.-8      	; 0x1b80 <strncasecmp_P+0x28>

00001b88 <__cmpsf2>:
    1b88:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__fp_cmp>
    1b8c:	08 f4       	brcc	.+2      	; 0x1b90 <__cmpsf2+0x8>
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	08 95       	ret

00001b92 <__fp_cmp>:
    1b92:	99 0f       	add	r25, r25
    1b94:	00 08       	sbc	r0, r0
    1b96:	55 0f       	add	r21, r21
    1b98:	aa 0b       	sbc	r26, r26
    1b9a:	e0 e8       	ldi	r30, 0x80	; 128
    1b9c:	fe ef       	ldi	r31, 0xFE	; 254
    1b9e:	16 16       	cp	r1, r22
    1ba0:	17 06       	cpc	r1, r23
    1ba2:	e8 07       	cpc	r30, r24
    1ba4:	f9 07       	cpc	r31, r25
    1ba6:	c0 f0       	brcs	.+48     	; 0x1bd8 <__fp_cmp+0x46>
    1ba8:	12 16       	cp	r1, r18
    1baa:	13 06       	cpc	r1, r19
    1bac:	e4 07       	cpc	r30, r20
    1bae:	f5 07       	cpc	r31, r21
    1bb0:	98 f0       	brcs	.+38     	; 0x1bd8 <__fp_cmp+0x46>
    1bb2:	62 1b       	sub	r22, r18
    1bb4:	73 0b       	sbc	r23, r19
    1bb6:	84 0b       	sbc	r24, r20
    1bb8:	95 0b       	sbc	r25, r21
    1bba:	39 f4       	brne	.+14     	; 0x1bca <__fp_cmp+0x38>
    1bbc:	0a 26       	eor	r0, r26
    1bbe:	61 f0       	breq	.+24     	; 0x1bd8 <__fp_cmp+0x46>
    1bc0:	23 2b       	or	r18, r19
    1bc2:	24 2b       	or	r18, r20
    1bc4:	25 2b       	or	r18, r21
    1bc6:	21 f4       	brne	.+8      	; 0x1bd0 <__fp_cmp+0x3e>
    1bc8:	08 95       	ret
    1bca:	0a 26       	eor	r0, r26
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <__fp_cmp+0x3e>
    1bce:	a1 40       	sbci	r26, 0x01	; 1
    1bd0:	a6 95       	lsr	r26
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	81 1d       	adc	r24, r1
    1bd6:	81 1d       	adc	r24, r1
    1bd8:	08 95       	ret

00001bda <__ctype_isfalse>:
    1bda:	99 27       	eor	r25, r25
    1bdc:	88 27       	eor	r24, r24

00001bde <__ctype_istrue>:
    1bde:	08 95       	ret

00001be0 <__muluhisi3>:
    1be0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__umulhisi3>
    1be4:	a5 9f       	mul	r26, r21
    1be6:	90 0d       	add	r25, r0
    1be8:	b4 9f       	mul	r27, r20
    1bea:	90 0d       	add	r25, r0
    1bec:	a4 9f       	mul	r26, r20
    1bee:	80 0d       	add	r24, r0
    1bf0:	91 1d       	adc	r25, r1
    1bf2:	11 24       	eor	r1, r1
    1bf4:	08 95       	ret

00001bf6 <__umulhisi3>:
    1bf6:	a2 9f       	mul	r26, r18
    1bf8:	b0 01       	movw	r22, r0
    1bfa:	b3 9f       	mul	r27, r19
    1bfc:	c0 01       	movw	r24, r0
    1bfe:	a3 9f       	mul	r26, r19
    1c00:	70 0d       	add	r23, r0
    1c02:	81 1d       	adc	r24, r1
    1c04:	11 24       	eor	r1, r1
    1c06:	91 1d       	adc	r25, r1
    1c08:	b2 9f       	mul	r27, r18
    1c0a:	70 0d       	add	r23, r0
    1c0c:	81 1d       	adc	r24, r1
    1c0e:	11 24       	eor	r1, r1
    1c10:	91 1d       	adc	r25, r1
    1c12:	08 95       	ret

00001c14 <_exit>:
    1c14:	f8 94       	cli

00001c16 <__stop_program>:
    1c16:	ff cf       	rjmp	.-2      	; 0x1c16 <__stop_program>
