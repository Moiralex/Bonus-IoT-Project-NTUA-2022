
main_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ca  00800060  00001b28  00001bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000218  0080022a  0080022a  00001d86  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d86  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00001e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb7  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e6  00000000  00000000  00002a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b19  00000000  00000000  00003135  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00003c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fb  00000000  00000000  00003dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b4  00000000  00000000  000041e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000469b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
       4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      20:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_8>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 80 01 	jmp	0x300	; 0x300 <__vector_11>
      30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      34:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_13>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <pstr_nan>:
     156:	4e 41 4e                                            NAN

00000159 <pstr_inity>:
     159:	49 4e 49 54 59                                      INITY

0000015e <pstr_inf>:
     15e:	49 4e 46                                            INF

00000161 <pwr_m10>:
     161:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     171:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000179 <pwr_p10>:
     179:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     189:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000192 <__ctors_end>:
     192:	11 24       	eor	r1, r1
     194:	1f be       	out	0x3f, r1	; 63
     196:	cf e5       	ldi	r28, 0x5F	; 95
     198:	d4 e0       	ldi	r29, 0x04	; 4
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
     19e:	12 e0       	ldi	r17, 0x02	; 2
     1a0:	a0 e6       	ldi	r26, 0x60	; 96
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e8 e2       	ldi	r30, 0x28	; 40
     1a6:	fb e1       	ldi	r31, 0x1B	; 27
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x10>
     1aa:	05 90       	lpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	aa 32       	cpi	r26, 0x2A	; 42
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0xc>

000001b4 <__do_clear_bss>:
     1b4:	24 e0       	ldi	r18, 0x04	; 4
     1b6:	aa e2       	ldi	r26, 0x2A	; 42
     1b8:	b2 e0       	ldi	r27, 0x02	; 2
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a2 34       	cpi	r26, 0x42	; 66
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 c7 04 	call	0x98e	; 0x98e <main>
     1c8:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <lcd_init_sim>:
#define _SFR_ASM_COMPAT 1
#define __SFR_OFFSET 0

.global lcd_init_sim
lcd_init_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     1d0:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     1d2:	9f 93       	push	r25
ldi r24, 40 ; Όταν ο ελεγκτής της lcd τροφοδοτείται με
     1d4:	88 e2       	ldi	r24, 0x28	; 40
ldi r25, 0 ; ρεύμα εκτελεί την δική του αρχικοποίηση.
     1d6:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_msec ; Αναμονή 40 msec μέχρι αυτή να ολοκληρωθεί.
     1d8:	6c d0       	rcall	.+216    	; 0x2b2 <wait_msec>
ldi r24, 0x30
     1da:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1dc:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1de:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1e0:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1e2:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     1e6:	6f d0       	rcall	.+222    	; 0x2c6 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     1e8:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     1ea:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     1ec:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     1ee:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     1f0:	6a d0       	rcall	.+212    	; 0x2c6 <wait_usec>
pop r25
     1f2:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     1f4:	8f 91       	pop	r24
ldi r24, 0x30
     1f6:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1f8:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1fa:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1fc:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1fe:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     200:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     202:	61 d0       	rcall	.+194    	; 0x2c6 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     204:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     206:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     208:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     20a:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     20c:	5c d0       	rcall	.+184    	; 0x2c6 <wait_usec>
pop r25
     20e:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     210:	8f 91       	pop	r24
ldi r24,0x20 ; αλλαγή σε 4-bit mode
     212:	80 e2       	ldi	r24, 0x20	; 32
out PORTD, r24
     214:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     216:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     218:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     21a:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     21c:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     21e:	53 d0       	rcall	.+166    	; 0x2c6 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     220:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     222:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     224:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     226:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     228:	4e d0       	rcall	.+156    	; 0x2c6 <wait_usec>
pop r25
     22a:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     22c:	8f 91       	pop	r24
ldi r24,0x28 ; επιλογή χαρακτήρων μεγέθους 5x8 κουκίδων
     22e:	88 e2       	ldi	r24, 0x28	; 40
rcall lcd_command_sim ; και εμφάνιση δύο γραμμών στην οθόνη
     230:	0e d0       	rcall	.+28     	; 0x24e <lcd_command_sim>
ldi r24,0x0c ; ενεργοποίηση της οθόνης, απόκρυψη του κέρσορα
     232:	8c e0       	ldi	r24, 0x0C	; 12
rcall lcd_command_sim
     234:	0c d0       	rcall	.+24     	; 0x24e <lcd_command_sim>
ldi r24,0x01 ; καθαρισμός της οθόνης
     236:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     238:	0a d0       	rcall	.+20     	; 0x24e <lcd_command_sim>
ldi r24, lo8(1530)
     23a:	8a ef       	ldi	r24, 0xFA	; 250
ldi r25, hi8(1530)
     23c:	95 e0       	ldi	r25, 0x05	; 5
rcall wait_usec
     23e:	43 d0       	rcall	.+134    	; 0x2c6 <wait_usec>
ldi r24 ,0x06 ; ενεργοποίηση αυτόματης αύξησης κατά 1 της διεύθυνσης
     240:	86 e0       	ldi	r24, 0x06	; 6
rcall lcd_command_sim ; που είναι αποθηκευμένη στον μετρητή διευθύνσεων και
     242:	05 d0       	rcall	.+10     	; 0x24e <lcd_command_sim>
; απενεργοποίηση της ολίσθησης ολόκληρης της οθόνης
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     244:	9f 91       	pop	r25
pop r24
     246:	8f 91       	pop	r24
ret
     248:	08 95       	ret

0000024a <lcd_clear>:


.global lcd_clear
lcd_clear:
ldi r24,0x01 ; καθαρισμός της οθόνης
     24a:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     24c:	00 d0       	rcall	.+0      	; 0x24e <lcd_command_sim>

0000024e <lcd_command_sim>:

lcd_command_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     24e:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     250:	9f 93       	push	r25
cbi PORTD, PD2 ; επιλογή του καταχωρητή εντολών (PD2=0)
     252:	92 98       	cbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή της εντολής και αναμονή 39μsec
     254:	06 d0       	rcall	.+12     	; 0x262 <write_2_nibbles_sim>
ldi r24, 39 ; για την ολοκλήρωση της εκτέλεσης της από τον ελεγκτή της lcd.
     256:	87 e2       	ldi	r24, 0x27	; 39
ldi r25, 0 ; ΣΗΜ.: υπάρχουν δύο εντολές, οι clear display και return home,
     258:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec ; που απαιτούν σημαντικά μεγαλύτερο χρονικό διάστημα.
     25a:	35 d0       	rcall	.+106    	; 0x2c6 <wait_usec>
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     25c:	9f 91       	pop	r25
pop r24
     25e:	8f 91       	pop	r24
ret
     260:	08 95       	ret

00000262 <write_2_nibbles_sim>:

write_2_nibbles_sim:
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     262:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     264:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     266:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     268:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     26a:	2d d0       	rcall	.+90     	; 0x2c6 <wait_usec>
pop r25
     26c:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     26e:	8f 91       	pop	r24
push r24 ; στέλνει τα 4 MSB
     270:	8f 93       	push	r24
in r25, PIND ; διαβάζονται τα 4 LSB και τα ξαναστέλνουμε
     272:	90 b3       	in	r25, 0x10	; 16
andi r25, 0x0f ; για να μην χαλάσουμε την όποια προηγούμενη κατάσταση
     274:	9f 70       	andi	r25, 0x0F	; 15
andi r24, 0xf0 ; απομονώνονται τα 4 MSB και
     276:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25 ; συνδυάζονται με τα προϋπάρχοντα 4 LSB
     278:	89 0f       	add	r24, r25
out PORTD, r24 ; και δίνονται στην έξοδο
     27a:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; δημιουργείται παλμός Enable στον ακροδέκτη PD3
     27c:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3 ; PD3=1 και μετά PD3=0
     27e:	93 98       	cbi	0x12, 3	; 18
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     280:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     282:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     284:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     286:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     288:	1e d0       	rcall	.+60     	; 0x2c6 <wait_usec>
pop r25
     28a:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     28c:	8f 91       	pop	r24
pop r24 ; στέλνει τα 4 LSB. Ανακτάται το byte.
     28e:	8f 91       	pop	r24
swap r24 ; εναλλάσσονται τα 4 MSB με τα 4 LSB
     290:	82 95       	swap	r24
andi r24 ,0xf0 ; που με την σειρά τους αποστέλλονται
     292:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25
     294:	89 0f       	add	r24, r25
out PORTD, r24
     296:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; Νέος παλμός Enable
     298:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     29a:	93 98       	cbi	0x12, 3	; 18
ret
     29c:	08 95       	ret

0000029e <lcd_data_sim>:

lcd_data_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     29e:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     2a0:	9f 93       	push	r25
sbi PORTD, PD2 ; επιλογή του καταχωρητή δεδομένων (PD2=1)
     2a2:	92 9a       	sbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή του byte
     2a4:	de df       	rcall	.-68     	; 0x262 <write_2_nibbles_sim>
ldi r24 ,43 ; αναμονή 43μsec μέχρι να ολοκληρωθεί η λήψη
     2a6:	8b e2       	ldi	r24, 0x2B	; 43
ldi r25 ,0 ; των δεδομένων από τον ελεγκτή της lcd
     2a8:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     2aa:	0d d0       	rcall	.+26     	; 0x2c6 <wait_usec>
pop r25 ;επανάφερε τους καταχωρητές r25:r24
     2ac:	9f 91       	pop	r25
pop r24
     2ae:	8f 91       	pop	r24
ret
     2b0:	08 95       	ret

000002b2 <wait_msec>:

wait_msec:
push r24 ; 2 κύκλοι (0.250 μsec)
     2b2:	8f 93       	push	r24
push r25 ; 2 κύκλοι
     2b4:	9f 93       	push	r25
ldi r24 , lo8(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
     2b6:	86 ee       	ldi	r24, 0xE6	; 230
ldi r25 , hi8(998) ; 1 κύκλος (0.125 μsec)
     2b8:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
     2ba:	05 d0       	rcall	.+10     	; 0x2c6 <wait_usec>
pop r25 ; 2 κύκλοι (0.250 μsec)
     2bc:	9f 91       	pop	r25
pop r24 ; 2 κύκλοι
     2be:	8f 91       	pop	r24
sbiw r24 , 1 ; 2 κύκλοι
     2c0:	01 97       	sbiw	r24, 0x01	; 1
brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2c2:	b9 f7       	brne	.-18     	; 0x2b2 <wait_msec>
ret ; 4 κύκλοι (0.500 μsec)
     2c4:	08 95       	ret

000002c6 <wait_usec>:

wait_usec:
sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
     2c6:	01 97       	sbiw	r24, 0x01	; 1
	...
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2d0:	d1 f7       	brne	.-12     	; 0x2c6 <wait_usec>
ret ; 4 κύκλοι (0.500 μsec)
     2d2:	08 95       	ret

000002d4 <print>:


.global print
print:
     2d4:	e4 df       	rcall	.-56     	; 0x29e <lcd_data_sim>

000002d6 <getChar>:
void lcd_clear();
void print(char c);

char getChar(void) {
    char ret = '\0';
    if(rx_ReadPos!=rx_WritePos) {
     2d6:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <rx_ReadPos>
     2da:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <rx_WritePos>
     2de:	e8 17       	cp	r30, r24
     2e0:	69 f0       	breq	.+26     	; 0x2fc <getChar+0x26>
        ret = rx_buffer[rx_ReadPos++];
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	9e 0f       	add	r25, r30
     2e6:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <rx_ReadPos>
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	eb 54       	subi	r30, 0x4B	; 75
     2ee:	fd 4f       	sbci	r31, 0xFD	; 253
     2f0:	80 81       	ld	r24, Z
        if(rx_ReadPos >= rx_buffer_size)
     2f2:	99 23       	and	r25, r25
     2f4:	24 f4       	brge	.+8      	; 0x2fe <getChar+0x28>
            rx_ReadPos=0;
     2f6:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <rx_ReadPos>
     2fa:	08 95       	ret
void lcd_init_sim();
void lcd_clear();
void print(char c);

char getChar(void) {
    char ret = '\0';
     2fc:	80 e0       	ldi	r24, 0x00	; 0
        ret = rx_buffer[rx_ReadPos++];
        if(rx_ReadPos >= rx_buffer_size)
            rx_ReadPos=0;
    }
    return ret;
}
     2fe:	08 95       	ret

00000300 <__vector_11>:

ISR(USART_RXC_vect){
     300:	1f 92       	push	r1
     302:	0f 92       	push	r0
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	0f 92       	push	r0
     308:	11 24       	eor	r1, r1
     30a:	8f 93       	push	r24
     30c:	9f 93       	push	r25
     30e:	ef 93       	push	r30
     310:	ff 93       	push	r31
    rx_buffer[rx_WritePos++] = UDR;
     312:	e0 91 2c 02 	lds	r30, 0x022C	; 0x80022c <rx_WritePos>
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	8e 0f       	add	r24, r30
     31a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <rx_WritePos>
     31e:	f0 e0       	ldi	r31, 0x00	; 0
     320:	9c b1       	in	r25, 0x0c	; 12
     322:	eb 54       	subi	r30, 0x4B	; 75
     324:	fd 4f       	sbci	r31, 0xFD	; 253
     326:	90 83       	st	Z, r25

    if(rx_WritePos >= rx_buffer_size){
     328:	88 23       	and	r24, r24
     32a:	14 f4       	brge	.+4      	; 0x330 <__vector_11+0x30>
        rx_WritePos = 0;
     32c:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <rx_WritePos>
    }
}
     330:	ff 91       	pop	r31
     332:	ef 91       	pop	r30
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <appendSerial>:

void appendSerial(char c) { //write character to buffer
    tx_buffer[tx_WritePos++] = c;
     342:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__data_end>
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	9e 0f       	add	r25, r30
     34a:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <__data_end>
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	eb 5c       	subi	r30, 0xCB	; 203
     352:	fc 4f       	sbci	r31, 0xFC	; 252
     354:	80 83       	st	Z, r24
    if(tx_WritePos>=tx_buffer_size)
     356:	99 23       	and	r25, r25
     358:	14 f4       	brge	.+4      	; 0x35e <appendSerial+0x1c>
        tx_WritePos = 0;
     35a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
     35e:	08 95       	ret

00000360 <__vector_13>:
}

ISR(USART_TXC_vect){ //transmit single character
     360:	1f 92       	push	r1
     362:	0f 92       	push	r0
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	0f 92       	push	r0
     368:	11 24       	eor	r1, r1
     36a:	8f 93       	push	r24
     36c:	ef 93       	push	r30
     36e:	ff 93       	push	r31
    if(tx_ReadPos != tx_WritePos){
     370:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <tx_ReadPos>
     374:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <__data_end>
     378:	e8 17       	cp	r30, r24
     37a:	49 f0       	breq	.+18     	; 0x38e <__vector_13+0x2e>
        UDR = tx_buffer[tx_ReadPos++];
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	8e 0f       	add	r24, r30
     380:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <tx_ReadPos>
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	eb 5c       	subi	r30, 0xCB	; 203
     388:	fc 4f       	sbci	r31, 0xFC	; 252
     38a:	80 81       	ld	r24, Z
     38c:	8c b9       	out	0x0c, r24	; 12
    }
    if(tx_ReadPos >= tx_buffer_size){
     38e:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <tx_ReadPos>
     392:	88 23       	and	r24, r24
     394:	14 f4       	brge	.+4      	; 0x39a <__vector_13+0x3a>
        tx_ReadPos = 0;
     396:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <tx_ReadPos>
    }
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	8f 91       	pop	r24
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <serialWrite>:

void serialWrite(char c[]) {
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	ec 01       	movw	r28, r24
    for(uint8_t i=0; i<strlen(c); ++i) {
     3b2:	10 e0       	ldi	r17, 0x00	; 0
     3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <serialWrite+0x1a>
        appendSerial(c[i]); //write all characters to the buffer
     3b6:	fe 01       	movw	r30, r28
     3b8:	e8 0f       	add	r30, r24
     3ba:	f9 1f       	adc	r31, r25
     3bc:	80 81       	ld	r24, Z
     3be:	0e 94 a1 01 	call	0x342	; 0x342 <appendSerial>
        tx_ReadPos = 0;
    }
}

void serialWrite(char c[]) {
    for(uint8_t i=0; i<strlen(c); ++i) {
     3c2:	1f 5f       	subi	r17, 0xFF	; 255
     3c4:	81 2f       	mov	r24, r17
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fe 01       	movw	r30, r28
     3ca:	01 90       	ld	r0, Z+
     3cc:	00 20       	and	r0, r0
     3ce:	e9 f7       	brne	.-6      	; 0x3ca <serialWrite+0x20>
     3d0:	31 97       	sbiw	r30, 0x01	; 1
     3d2:	ec 1b       	sub	r30, r28
     3d4:	fd 0b       	sbc	r31, r29
     3d6:	8e 17       	cp	r24, r30
     3d8:	9f 07       	cpc	r25, r31
     3da:	68 f3       	brcs	.-38     	; 0x3b6 <serialWrite+0xc>
        appendSerial(c[i]); //write all characters to the buffer
    }
    if(UCSRA & (1<<UDRE)) //if buffer has been emptied reset the transmission by sending a null character
     3dc:	5d 99       	sbic	0x0b, 5	; 11
        UDR = 0;
     3de:	1c b8       	out	0x0c, r1	; 12
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	08 95       	ret

000003e8 <sendCommand>:

void sendCommand(char command[]) {
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	8c 01       	movw	r16, r24
    serialWrite(command);
     3f2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <serialWrite>
    char c;
    c=getChar();
     3f6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
    while(c!='S'){ //wait until "success" reply from esp
     3fa:	11 c0       	rjmp	.+34     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
        if(c=='F') { //if command execution failed re-transmit it
     3fc:	86 34       	cpi	r24, 0x46	; 70
     3fe:	69 f4       	brne	.+26     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
     400:	04 c0       	rjmp	.+8      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
            for(int i=0; i<5; ++i)
                getChar(); //flush fail out of read buffer
     402:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
    serialWrite(command);
    char c;
    c=getChar();
    while(c!='S'){ //wait until "success" reply from esp
        if(c=='F') { //if command execution failed re-transmit it
            for(int i=0; i<5; ++i)
     406:	21 96       	adiw	r28, 0x01	; 1
     408:	02 c0       	rjmp	.+4      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
     40a:	c0 e0       	ldi	r28, 0x00	; 0
     40c:	d0 e0       	ldi	r29, 0x00	; 0
     40e:	c5 30       	cpi	r28, 0x05	; 5
     410:	d1 05       	cpc	r29, r1
     412:	bc f3       	brlt	.-18     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
                getChar(); //flush fail out of read buffer
            serialWrite(command);
     414:	c8 01       	movw	r24, r16
     416:	0e 94 d5 01 	call	0x3aa	; 0x3aa <serialWrite>
        }
        c=getChar();
     41a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>

void sendCommand(char command[]) {
    serialWrite(command);
    char c;
    c=getChar();
    while(c!='S'){ //wait until "success" reply from esp
     41e:	83 35       	cpi	r24, 0x53	; 83
     420:	69 f7       	brne	.-38     	; 0x3fc <sendCommand+0x14>
     422:	c0 e0       	ldi	r28, 0x00	; 0
     424:	d0 e0       	ldi	r29, 0x00	; 0
     426:	03 c0       	rjmp	.+6      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
            serialWrite(command);
        }
        c=getChar();
    }
    for(int i=0; i<8; ++i)
        getChar(); //flush success out of read buffer
     428:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
                getChar(); //flush fail out of read buffer
            serialWrite(command);
        }
        c=getChar();
    }
    for(int i=0; i<8; ++i)
     42c:	21 96       	adiw	r28, 0x01	; 1
     42e:	c8 30       	cpi	r28, 0x08	; 8
     430:	d1 05       	cpc	r29, r1
     432:	d4 f3       	brlt	.-12     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
        getChar(); //flush success out of read buffer
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <__vector_8>:

ISR(TIMER1_OVF_vect) {
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	cf 92       	push	r12
     44a:	df 92       	push	r13
     44c:	ef 92       	push	r14
     44e:	ff 92       	push	r15
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ef 93       	push	r30
     46e:	ff 93       	push	r31
    int counter =0, watering_pot = 0, leds;
    

  

    if(!first) {
     470:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <first>
     474:	81 11       	cpse	r24, r1
     476:	6a c2       	rjmp	.+1236   	; 0x94c <__stack+0x4ed>
     478:	e1 2c       	mov	r14, r1
     47a:	f1 2c       	mov	r15, r1
     47c:	c0 e0       	ldi	r28, 0x00	; 0
     47e:	d0 e0       	ldi	r29, 0x00	; 0
     480:	ab c1       	rjmp	.+854    	; 0x7d8 <__stack+0x379>
            /*strcpy(string_to_send, "ESP:ssid:\"Middle_Board");
            itoa(k, conv_buffer, 10);
            strcat(string_to_send, conv_buffer);
            strcat(string_to_send, "\"\n");
            sendCommand(string_to_send);*/
            sprintf(string_to_send, "ESP:ssid:\"Middle_Board%d\"\n", k);
     482:	ff 92       	push	r15
     484:	ef 92       	push	r14
     486:	80 e6       	ldi	r24, 0x60	; 96
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	85 e3       	ldi	r24, 0x35	; 53
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <sprintf>


            strcpy(string_to_send, "ESP:password:\"awesomePassword\"\n");
     49a:	80 e2       	ldi	r24, 0x20	; 32
     49c:	eb e7       	ldi	r30, 0x7B	; 123
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	a5 e3       	ldi	r26, 0x35	; 53
     4a2:	b2 e0       	ldi	r27, 0x02	; 2
     4a4:	01 90       	ld	r0, Z+
     4a6:	0d 92       	st	X+, r0
     4a8:	8a 95       	dec	r24
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__stack+0x45>
            sendCommand(string_to_send);
     4ac:	85 e3       	ldi	r24, 0x35	; 53
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>
            strcpy(string_to_send, "ESP:sensorValue:\"Moist_avg\"[request]\n");
     4b4:	86 e2       	ldi	r24, 0x26	; 38
     4b6:	eb e9       	ldi	r30, 0x9B	; 155
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	a5 e3       	ldi	r26, 0x35	; 53
     4bc:	b2 e0       	ldi	r27, 0x02	; 2
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	8a 95       	dec	r24
     4c4:	e1 f7       	brne	.-8      	; 0x4be <__stack+0x5f>
            sendCommand(string_to_send);
     4c6:	85 e3       	ldi	r24, 0x35	; 53
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>
            strcpy(string_to_send, "ESP:sensorValue:\"Tmp_avg\"[request]\n");
     4ce:	84 e2       	ldi	r24, 0x24	; 36
     4d0:	e1 ec       	ldi	r30, 0xC1	; 193
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	a5 e3       	ldi	r26, 0x35	; 53
     4d6:	b2 e0       	ldi	r27, 0x02	; 2
     4d8:	01 90       	ld	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	8a 95       	dec	r24
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <__stack+0x79>
            sendCommand(string_to_send);
     4e0:	85 e3       	ldi	r24, 0x35	; 53
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>
            strcpy(string_to_send, "ESP:sensorValue:\"Moist_var\"[request]\n");
     4e8:	86 e2       	ldi	r24, 0x26	; 38
     4ea:	e5 ee       	ldi	r30, 0xE5	; 229
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	a5 e3       	ldi	r26, 0x35	; 53
     4f0:	b2 e0       	ldi	r27, 0x02	; 2
     4f2:	01 90       	ld	r0, Z+
     4f4:	0d 92       	st	X+, r0
     4f6:	8a 95       	dec	r24
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <__stack+0x93>
            sendCommand(string_to_send);
     4fa:	85 e3       	ldi	r24, 0x35	; 53
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>
            strcpy(string_to_send, "ESP:sensorValue:\"Tmp_var\"[request]\n");
     502:	84 e2       	ldi	r24, 0x24	; 36
     504:	eb e0       	ldi	r30, 0x0B	; 11
     506:	f1 e0       	ldi	r31, 0x01	; 1
     508:	a5 e3       	ldi	r26, 0x35	; 53
     50a:	b2 e0       	ldi	r27, 0x02	; 2
     50c:	01 90       	ld	r0, Z+
     50e:	0d 92       	st	X+, r0
     510:	8a 95       	dec	r24
     512:	e1 f7       	brne	.-8      	; 0x50c <__stack+0xad>
            sendCommand(string_to_send);
     514:	85 e3       	ldi	r24, 0x35	; 53
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>
            strcpy(string_to_send, "ESP:connect\n"); //will wait until it can connect
     51c:	8d e0       	ldi	r24, 0x0D	; 13
     51e:	ef e2       	ldi	r30, 0x2F	; 47
     520:	f1 e0       	ldi	r31, 0x01	; 1
     522:	a5 e3       	ldi	r26, 0x35	; 53
     524:	b2 e0       	ldi	r27, 0x02	; 2
     526:	01 90       	ld	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	8a 95       	dec	r24
     52c:	e1 f7       	brne	.-8      	; 0x526 <__stack+0xc7>
            sendCommand(string_to_send);
     52e:	85 e3       	ldi	r24, 0x35	; 53
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>
            strcpy(string_to_send, "ESP:clientTransmit\n");
     536:	84 e1       	ldi	r24, 0x14	; 20
     538:	ec e3       	ldi	r30, 0x3C	; 60
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	a5 e3       	ldi	r26, 0x35	; 53
     53e:	b2 e0       	ldi	r27, 0x02	; 2
     540:	01 90       	ld	r0, Z+
     542:	0d 92       	st	X+, r0
     544:	8a 95       	dec	r24
     546:	e1 f7       	brne	.-8      	; 0x540 <__stack+0xe1>
            sendCommand(string_to_send);
     548:	85 e3       	ldi	r24, 0x35	; 53
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>
            strcpy(string_to_send, "ESP:getAllValues\n");
     550:	82 e1       	ldi	r24, 0x12	; 18
     552:	e0 e5       	ldi	r30, 0x50	; 80
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	a5 e3       	ldi	r26, 0x35	; 53
     558:	b2 e0       	ldi	r27, 0x02	; 2
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <__stack+0xfb>
            serialWrite(string_to_send);
     562:	85 e3       	ldi	r24, 0x35	; 53
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 d5 01 	call	0x3aa	; 0x3aa <serialWrite>

            while(getChar() != '"') { //scan input till you find ". The number will follow
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
     576:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
     57a:	82 32       	cpi	r24, 0x22	; 34
     57c:	e1 f7       	brne	.-8      	; 0x576 <__stack+0x117>
               // c = getChar();
            }
            c=getChar();
     57e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(c=='F')
     582:	86 34       	cpi	r24, 0x46	; 70
     584:	11 f0       	breq	.+4      	; 0x58a <__stack+0x12b>

  

    if(!first) {
        for(int k=0; k<middle_boards; ++k){
            failed=false;
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	0c c0       	rjmp	.+24     	; 0x5a2 <__stack+0x143>
            while(getChar() != '"') { //scan input till you find ". The number will follow
               // c = getChar();
            }
            c=getChar();
            if(c=='F')
                failed=true;
     58a:	11 e0       	ldi	r17, 0x01	; 1
     58c:	0a c0       	rjmp	.+20     	; 0x5a2 <__stack+0x143>
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     58e:	6e 01       	movw	r12, r28
     590:	2f ef       	ldi	r18, 0xFF	; 255
     592:	c2 1a       	sub	r12, r18
     594:	d2 0a       	sbc	r13, r18
     596:	c6 5c       	subi	r28, 0xC6	; 198
     598:	db 4f       	sbci	r29, 0xFB	; 251
     59a:	88 83       	st	Y, r24
                c = getChar();
     59c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     5a0:	e6 01       	movw	r28, r12
               // c = getChar();
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
     5a2:	82 32       	cpi	r24, 0x22	; 34
     5a4:	11 f0       	breq	.+4      	; 0x5aa <__stack+0x14b>
     5a6:	11 23       	and	r17, r17
     5a8:	91 f3       	breq	.-28     	; 0x58e <__stack+0x12f>
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
     5aa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(!failed){ //fix failed case!!!!!!!!!
     5ae:	11 11       	cpse	r17, r1
     5b0:	2e c0       	rjmp	.+92     	; 0x60e <__stack+0x1af>
     5b2:	25 e0       	ldi	r18, 0x05	; 5
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	0c c0       	rjmp	.+24     	; 0x5d0 <__stack+0x171>
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
     5b8:	f9 01       	movw	r30, r18
     5ba:	e8 1b       	sub	r30, r24
     5bc:	f9 0b       	sbc	r31, r25
     5be:	e6 5c       	subi	r30, 0xC6	; 198
     5c0:	fb 4f       	sbci	r31, 0xFB	; 251
     5c2:	80 81       	ld	r24, Z
     5c4:	f9 01       	movw	r30, r18
     5c6:	e6 5c       	subi	r30, 0xC6	; 198
     5c8:	fb 4f       	sbci	r31, 0xFB	; 251
     5ca:	80 83       	st	Z, r24
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){ //fix failed case!!!!!!!!!
                for(int i=5; i>=6-counter; i--){
     5cc:	21 50       	subi	r18, 0x01	; 1
     5ce:	31 09       	sbc	r19, r1
     5d0:	86 e0       	ldi	r24, 0x06	; 6
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	8c 1b       	sub	r24, r28
     5d6:	9d 0b       	sbc	r25, r29
     5d8:	28 17       	cp	r18, r24
     5da:	39 07       	cpc	r19, r25
     5dc:	6c f7       	brge	.-38     	; 0x5b8 <__stack+0x159>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	07 c0       	rjmp	.+14     	; 0x5f2 <__stack+0x193>
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
                    conv_buffer[i] = '0';
     5e4:	f9 01       	movw	r30, r18
     5e6:	e6 5c       	subi	r30, 0xC6	; 198
     5e8:	fb 4f       	sbci	r31, 0xFB	; 251
     5ea:	40 e3       	ldi	r20, 0x30	; 48
     5ec:	40 83       	st	Z, r20
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){ //fix failed case!!!!!!!!!
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
     5ee:	2f 5f       	subi	r18, 0xFF	; 255
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
     5f2:	28 17       	cp	r18, r24
     5f4:	39 07       	cpc	r19, r25
     5f6:	b4 f3       	brlt	.-20     	; 0x5e4 <__stack+0x185>
                    conv_buffer[i] = '0';
                }
                moist_avgs[k]=atoi(conv_buffer);
     5f8:	8a e3       	ldi	r24, 0x3A	; 58
     5fa:	94 e0       	ldi	r25, 0x04	; 4
     5fc:	0e 94 12 09 	call	0x1224	; 0x1224 <atoi>
     600:	f7 01       	movw	r30, r14
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	e2 5d       	subi	r30, 0xD2	; 210
     608:	fd 4f       	sbci	r31, 0xFD	; 253
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	80 83       	st	Z, r24
            }
            

            while(getChar() != '"') { //scan input till you find ". The number will follow
     60e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
     612:	82 32       	cpi	r24, 0x22	; 34
     614:	e1 f7       	brne	.-8      	; 0x60e <__stack+0x1af>
               // c = getChar();
            }
            c=getChar();
     616:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(c=='F')
     61a:	86 34       	cpi	r24, 0x46	; 70
     61c:	61 f4       	brne	.+24     	; 0x636 <__stack+0x1d7>
                failed=true;
     61e:	11 e0       	ldi	r17, 0x01	; 1
     620:	0a c0       	rjmp	.+20     	; 0x636 <__stack+0x1d7>
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     622:	6e 01       	movw	r12, r28
     624:	9f ef       	ldi	r25, 0xFF	; 255
     626:	c9 1a       	sub	r12, r25
     628:	d9 0a       	sbc	r13, r25
     62a:	c6 5c       	subi	r28, 0xC6	; 198
     62c:	db 4f       	sbci	r29, 0xFB	; 251
     62e:	88 83       	st	Y, r24
                c = getChar();
     630:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     634:	e6 01       	movw	r28, r12
               // c = getChar();
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
     636:	82 32       	cpi	r24, 0x22	; 34
     638:	11 f0       	breq	.+4      	; 0x63e <__stack+0x1df>
     63a:	11 23       	and	r17, r17
     63c:	91 f3       	breq	.-28     	; 0x622 <__stack+0x1c3>
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
     63e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(!failed){
     642:	11 11       	cpse	r17, r1
     644:	32 c0       	rjmp	.+100    	; 0x6aa <__stack+0x24b>
     646:	25 e0       	ldi	r18, 0x05	; 5
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	0c c0       	rjmp	.+24     	; 0x664 <__stack+0x205>
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
     64c:	f9 01       	movw	r30, r18
     64e:	e8 1b       	sub	r30, r24
     650:	f9 0b       	sbc	r31, r25
     652:	e6 5c       	subi	r30, 0xC6	; 198
     654:	fb 4f       	sbci	r31, 0xFB	; 251
     656:	80 81       	ld	r24, Z
     658:	f9 01       	movw	r30, r18
     65a:	e6 5c       	subi	r30, 0xC6	; 198
     65c:	fb 4f       	sbci	r31, 0xFB	; 251
     65e:	80 83       	st	Z, r24
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){
                for(int i=5; i>=6-counter; i--){
     660:	21 50       	subi	r18, 0x01	; 1
     662:	31 09       	sbc	r19, r1
     664:	86 e0       	ldi	r24, 0x06	; 6
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	8c 1b       	sub	r24, r28
     66a:	9d 0b       	sbc	r25, r29
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	6c f7       	brge	.-38     	; 0x64c <__stack+0x1ed>
     672:	20 e0       	ldi	r18, 0x00	; 0
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	07 c0       	rjmp	.+14     	; 0x686 <__stack+0x227>
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
                    conv_buffer[i] = '0';
     678:	f9 01       	movw	r30, r18
     67a:	e6 5c       	subi	r30, 0xC6	; 198
     67c:	fb 4f       	sbci	r31, 0xFB	; 251
     67e:	40 e3       	ldi	r20, 0x30	; 48
     680:	40 83       	st	Z, r20
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
     682:	2f 5f       	subi	r18, 0xFF	; 255
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	b4 f3       	brlt	.-20     	; 0x678 <__stack+0x219>
                    conv_buffer[i] = '0';
                }
                tmp_avgs[k]=atof(conv_buffer);
     68c:	8a e3       	ldi	r24, 0x3A	; 58
     68e:	94 e0       	ldi	r25, 0x04	; 4
     690:	0e 94 0e 09 	call	0x121c	; 0x121c <atof>
     694:	f7 01       	movw	r30, r14
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	eb 54       	subi	r30, 0x4B	; 75
     6a0:	fc 4f       	sbci	r31, 0xFC	; 252
     6a2:	60 83       	st	Z, r22
     6a4:	71 83       	std	Z+1, r23	; 0x01
     6a6:	82 83       	std	Z+2, r24	; 0x02
     6a8:	93 83       	std	Z+3, r25	; 0x03
            }
            
            
            while(getChar() != '"') { //scan input till you find ". The number will follow
     6aa:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
     6ae:	82 32       	cpi	r24, 0x22	; 34
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <__stack+0x24b>
               // c = getChar();
            }
            c=getChar();
     6b2:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(c=='F')
     6b6:	86 34       	cpi	r24, 0x46	; 70
     6b8:	61 f4       	brne	.+24     	; 0x6d2 <__stack+0x273>
                failed=true;
     6ba:	11 e0       	ldi	r17, 0x01	; 1
     6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <__stack+0x273>
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     6be:	6e 01       	movw	r12, r28
     6c0:	2f ef       	ldi	r18, 0xFF	; 255
     6c2:	c2 1a       	sub	r12, r18
     6c4:	d2 0a       	sbc	r13, r18
     6c6:	c6 5c       	subi	r28, 0xC6	; 198
     6c8:	db 4f       	sbci	r29, 0xFB	; 251
     6ca:	88 83       	st	Y, r24
                c = getChar();
     6cc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     6d0:	e6 01       	movw	r28, r12
               // c = getChar();
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
     6d2:	82 32       	cpi	r24, 0x22	; 34
     6d4:	11 f0       	breq	.+4      	; 0x6da <__stack+0x27b>
     6d6:	11 23       	and	r17, r17
     6d8:	91 f3       	breq	.-28     	; 0x6be <__stack+0x25f>
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
     6da:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(!failed){
     6de:	11 11       	cpse	r17, r1
     6e0:	2e c0       	rjmp	.+92     	; 0x73e <__stack+0x2df>
     6e2:	25 e0       	ldi	r18, 0x05	; 5
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	0c c0       	rjmp	.+24     	; 0x700 <__stack+0x2a1>
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
     6e8:	f9 01       	movw	r30, r18
     6ea:	e8 1b       	sub	r30, r24
     6ec:	f9 0b       	sbc	r31, r25
     6ee:	e6 5c       	subi	r30, 0xC6	; 198
     6f0:	fb 4f       	sbci	r31, 0xFB	; 251
     6f2:	80 81       	ld	r24, Z
     6f4:	f9 01       	movw	r30, r18
     6f6:	e6 5c       	subi	r30, 0xC6	; 198
     6f8:	fb 4f       	sbci	r31, 0xFB	; 251
     6fa:	80 83       	st	Z, r24
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){
                for(int i=5; i>=6-counter; i--){
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	31 09       	sbc	r19, r1
     700:	86 e0       	ldi	r24, 0x06	; 6
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	8c 1b       	sub	r24, r28
     706:	9d 0b       	sbc	r25, r29
     708:	28 17       	cp	r18, r24
     70a:	39 07       	cpc	r19, r25
     70c:	6c f7       	brge	.-38     	; 0x6e8 <__stack+0x289>
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	07 c0       	rjmp	.+14     	; 0x722 <__stack+0x2c3>
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
                    conv_buffer[i] = '0';
     714:	f9 01       	movw	r30, r18
     716:	e6 5c       	subi	r30, 0xC6	; 198
     718:	fb 4f       	sbci	r31, 0xFB	; 251
     71a:	40 e3       	ldi	r20, 0x30	; 48
     71c:	40 83       	st	Z, r20
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
     71e:	2f 5f       	subi	r18, 0xFF	; 255
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	28 17       	cp	r18, r24
     724:	39 07       	cpc	r19, r25
     726:	b4 f3       	brlt	.-20     	; 0x714 <__stack+0x2b5>
                    conv_buffer[i] = '0';
                }
                moist_vars[k]=atoi(conv_buffer);
     728:	8a e3       	ldi	r24, 0x3A	; 58
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	0e 94 12 09 	call	0x1224	; 0x1224 <atoi>
     730:	f7 01       	movw	r30, r14
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	ee 5c       	subi	r30, 0xCE	; 206
     738:	fd 4f       	sbci	r31, 0xFD	; 253
     73a:	91 83       	std	Z+1, r25	; 0x01
     73c:	80 83       	st	Z, r24
            }
            

            while(getChar() != '"') { //scan input till you find ". The number will follow
     73e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
     742:	82 32       	cpi	r24, 0x22	; 34
     744:	e1 f7       	brne	.-8      	; 0x73e <__stack+0x2df>
               // c = getChar();
            }
            c=getChar();
     746:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(c=='F')
     74a:	86 34       	cpi	r24, 0x46	; 70
     74c:	61 f4       	brne	.+24     	; 0x766 <__stack+0x307>
                failed=true;
     74e:	11 e0       	ldi	r17, 0x01	; 1
     750:	0a c0       	rjmp	.+20     	; 0x766 <__stack+0x307>
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     752:	6e 01       	movw	r12, r28
     754:	9f ef       	ldi	r25, 0xFF	; 255
     756:	c9 1a       	sub	r12, r25
     758:	d9 0a       	sbc	r13, r25
     75a:	c6 5c       	subi	r28, 0xC6	; 198
     75c:	db 4f       	sbci	r29, 0xFB	; 251
     75e:	88 83       	st	Y, r24
                c = getChar();
     760:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
                conv_buffer[counter++]=c;
     764:	e6 01       	movw	r28, r12
               // c = getChar();
            }
            c=getChar();
            if(c=='F')
                failed=true;
            while(c != '"' && !failed){
     766:	82 32       	cpi	r24, 0x22	; 34
     768:	11 f0       	breq	.+4      	; 0x76e <__stack+0x30f>
     76a:	11 23       	and	r17, r17
     76c:	91 f3       	breq	.-28     	; 0x752 <__stack+0x2f3>
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
     76e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getChar>
            if(!failed){
     772:	11 11       	cpse	r17, r1
     774:	2e c0       	rjmp	.+92     	; 0x7d2 <__stack+0x373>
     776:	25 e0       	ldi	r18, 0x05	; 5
     778:	30 e0       	ldi	r19, 0x00	; 0
     77a:	0c c0       	rjmp	.+24     	; 0x794 <__stack+0x335>
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
     77c:	f9 01       	movw	r30, r18
     77e:	e8 1b       	sub	r30, r24
     780:	f9 0b       	sbc	r31, r25
     782:	e6 5c       	subi	r30, 0xC6	; 198
     784:	fb 4f       	sbci	r31, 0xFB	; 251
     786:	80 81       	ld	r24, Z
     788:	f9 01       	movw	r30, r18
     78a:	e6 5c       	subi	r30, 0xC6	; 198
     78c:	fb 4f       	sbci	r31, 0xFB	; 251
     78e:	80 83       	st	Z, r24
                conv_buffer[counter++]=c;
                c = getChar();
            }
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){
                for(int i=5; i>=6-counter; i--){
     790:	21 50       	subi	r18, 0x01	; 1
     792:	31 09       	sbc	r19, r1
     794:	86 e0       	ldi	r24, 0x06	; 6
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	8c 1b       	sub	r24, r28
     79a:	9d 0b       	sbc	r25, r29
     79c:	28 17       	cp	r18, r24
     79e:	39 07       	cpc	r19, r25
     7a0:	6c f7       	brge	.-38     	; 0x77c <__stack+0x31d>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <__stack+0x357>
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
                    conv_buffer[i] = '0';
     7a8:	f9 01       	movw	r30, r18
     7aa:	e6 5c       	subi	r30, 0xC6	; 198
     7ac:	fb 4f       	sbci	r31, 0xFB	; 251
     7ae:	40 e3       	ldi	r20, 0x30	; 48
     7b0:	40 83       	st	Z, r20
            c = getChar(); // also flush '\n' out of read buffer
            if(!failed){
                for(int i=5; i>=6-counter; i--){
                    conv_buffer[i] = conv_buffer[i - (6-counter)];
                }
                for(int i=0; i<(6-counter); i++){
     7b2:	2f 5f       	subi	r18, 0xFF	; 255
     7b4:	3f 4f       	sbci	r19, 0xFF	; 255
     7b6:	28 17       	cp	r18, r24
     7b8:	39 07       	cpc	r19, r25
     7ba:	b4 f3       	brlt	.-20     	; 0x7a8 <__stack+0x349>
                    conv_buffer[i] = '0';
                }
                tmp_vars[k]=atoi(conv_buffer);
     7bc:	8a e3       	ldi	r24, 0x3A	; 58
     7be:	94 e0       	ldi	r25, 0x04	; 4
     7c0:	0e 94 12 09 	call	0x1224	; 0x1224 <atoi>
     7c4:	f7 01       	movw	r30, r14
     7c6:	ee 0f       	add	r30, r30
     7c8:	ff 1f       	adc	r31, r31
     7ca:	e0 5d       	subi	r30, 0xD0	; 208
     7cc:	fd 4f       	sbci	r31, 0xFD	; 253
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24
    

  

    if(!first) {
        for(int k=0; k<middle_boards; ++k){
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	e2 1a       	sub	r14, r18
     7d6:	f2 0a       	sbc	r15, r18
     7d8:	1e 14       	cp	r1, r14
     7da:	1f 04       	cpc	r1, r15
     7dc:	0c f0       	brlt	.+2      	; 0x7e0 <__stack+0x381>
     7de:	51 ce       	rjmp	.-862    	; 0x482 <__stack+0x23>
                    conv_buffer[i] = '0';
                }
                tmp_vars[k]=atoi(conv_buffer);
            }
        }
        if(!failed) {
     7e0:	11 11       	cpse	r17, r1
     7e2:	b6 c0       	rjmp	.+364    	; 0x950 <__stack+0x4f1>
            lcd_clear();
     7e4:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_clear>
            leds = 1;
            watering_pot=0;
            for(int k=0; k<middle_boards; ++k){//fix temperature!!!!!!
     7e8:	00 e0       	ldi	r16, 0x00	; 0
     7ea:	10 e0       	ldi	r17, 0x00	; 0
                tmp_vars[k]=atoi(conv_buffer);
            }
        }
        if(!failed) {
            lcd_clear();
            leds = 1;
     7ec:	ee 24       	eor	r14, r14
     7ee:	e3 94       	inc	r14
     7f0:	f1 2c       	mov	r15, r1
            watering_pot=0;
     7f2:	c1 2c       	mov	r12, r1
     7f4:	d1 2c       	mov	r13, r1
            for(int k=0; k<middle_boards; ++k){//fix temperature!!!!!!
     7f6:	a4 c0       	rjmp	.+328    	; 0x940 <__stack+0x4e1>
                sprintf(string_to_print, "T %d: %.1f ", k, tmp_avgs[k]);
     7f8:	f8 01       	movw	r30, r16
     7fa:	ee 0f       	add	r30, r30
     7fc:	ff 1f       	adc	r31, r31
     7fe:	ee 0f       	add	r30, r30
     800:	ff 1f       	adc	r31, r31
     802:	eb 54       	subi	r30, 0x4B	; 75
     804:	fc 4f       	sbci	r31, 0xFC	; 252
     806:	80 81       	ld	r24, Z
     808:	91 81       	ldd	r25, Z+1	; 0x01
     80a:	22 81       	ldd	r18, Z+2	; 0x02
     80c:	33 81       	ldd	r19, Z+3	; 0x03
     80e:	3f 93       	push	r19
     810:	2f 93       	push	r18
     812:	9f 93       	push	r25
     814:	8f 93       	push	r24
     816:	1f 93       	push	r17
     818:	0f 93       	push	r16
     81a:	82 e6       	ldi	r24, 0x62	; 98
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	9f 93       	push	r25
     820:	8f 93       	push	r24
     822:	89 eb       	ldi	r24, 0xB9	; 185
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	9f 93       	push	r25
     828:	8f 93       	push	r24
     82a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <sprintf>

                for(int m=0; m<strlen(string_to_print); ++m)
     82e:	8d b7       	in	r24, 0x3d	; 61
     830:	9e b7       	in	r25, 0x3e	; 62
     832:	0a 96       	adiw	r24, 0x0a	; 10
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	9e bf       	out	0x3e, r25	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	8d bf       	out	0x3d, r24	; 61
     83e:	c0 e0       	ldi	r28, 0x00	; 0
     840:	d0 e0       	ldi	r29, 0x00	; 0
     842:	07 c0       	rjmp	.+14     	; 0x852 <__stack+0x3f3>
                    print(string_to_print[m]);
     844:	fe 01       	movw	r30, r28
     846:	e7 54       	subi	r30, 0x47	; 71
     848:	fc 4f       	sbci	r31, 0xFC	; 252
     84a:	80 81       	ld	r24, Z
     84c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <print>
            leds = 1;
            watering_pot=0;
            for(int k=0; k<middle_boards; ++k){//fix temperature!!!!!!
                sprintf(string_to_print, "T %d: %.1f ", k, tmp_avgs[k]);

                for(int m=0; m<strlen(string_to_print); ++m)
     850:	21 96       	adiw	r28, 0x01	; 1
     852:	e9 eb       	ldi	r30, 0xB9	; 185
     854:	f3 e0       	ldi	r31, 0x03	; 3
     856:	01 90       	ld	r0, Z+
     858:	00 20       	and	r0, r0
     85a:	e9 f7       	brne	.-6      	; 0x856 <__stack+0x3f7>
     85c:	31 97       	sbiw	r30, 0x01	; 1
     85e:	e9 5b       	subi	r30, 0xB9	; 185
     860:	f3 40       	sbci	r31, 0x03	; 3
     862:	ce 17       	cp	r28, r30
     864:	df 07       	cpc	r29, r31
     866:	70 f3       	brcs	.-36     	; 0x844 <__stack+0x3e5>
                    print(string_to_print[m]);

                if(moist_avgs[k]>=800){
     868:	f8 01       	movw	r30, r16
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	e2 5d       	subi	r30, 0xD2	; 210
     870:	fd 4f       	sbci	r31, 0xFD	; 253
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	80 32       	cpi	r24, 0x20	; 32
     878:	23 e0       	ldi	r18, 0x03	; 3
     87a:	92 07       	cpc	r25, r18
     87c:	7c f0       	brlt	.+30     	; 0x89c <__stack+0x43d>
                    strcpy(string_to_print, "VDRY ");
     87e:	86 e0       	ldi	r24, 0x06	; 6
     880:	ee e6       	ldi	r30, 0x6E	; 110
     882:	f1 e0       	ldi	r31, 0x01	; 1
     884:	a9 eb       	ldi	r26, 0xB9	; 185
     886:	b3 e0       	ldi	r27, 0x03	; 3
     888:	01 90       	ld	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	8a 95       	dec	r24
     88e:	e1 f7       	brne	.-8      	; 0x888 <__stack+0x429>
                    dry[k]=1;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	f8 01       	movw	r30, r16
     894:	ec 5c       	subi	r30, 0xCC	; 204
     896:	fd 4f       	sbci	r31, 0xFD	; 253
     898:	80 83       	st	Z, r24
     89a:	23 c0       	rjmp	.+70     	; 0x8e2 <__stack+0x483>
                }
                else if(moist_avgs[k]>=600){
     89c:	88 35       	cpi	r24, 0x58	; 88
     89e:	22 e0       	ldi	r18, 0x02	; 2
     8a0:	92 07       	cpc	r25, r18
     8a2:	7c f0       	brlt	.+30     	; 0x8c2 <__stack+0x463>
                    dry[k]=1;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	f8 01       	movw	r30, r16
     8a8:	ec 5c       	subi	r30, 0xCC	; 204
     8aa:	fd 4f       	sbci	r31, 0xFD	; 253
     8ac:	80 83       	st	Z, r24
                    strcpy(string_to_print, "DRY ");
     8ae:	85 e0       	ldi	r24, 0x05	; 5
     8b0:	ef e6       	ldi	r30, 0x6F	; 111
     8b2:	f1 e0       	ldi	r31, 0x01	; 1
     8b4:	a9 eb       	ldi	r26, 0xB9	; 185
     8b6:	b3 e0       	ldi	r27, 0x03	; 3
     8b8:	01 90       	ld	r0, Z+
     8ba:	0d 92       	st	X+, r0
     8bc:	8a 95       	dec	r24
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <__stack+0x459>
     8c0:	10 c0       	rjmp	.+32     	; 0x8e2 <__stack+0x483>
                }
                else if(moist_avgs[k]>=370) {
     8c2:	82 37       	cpi	r24, 0x72	; 114
     8c4:	91 40       	sbci	r25, 0x01	; 1
     8c6:	84 f0       	brlt	.+32     	; 0x8e8 <__stack+0x489>
                    dry[k]=0;
     8c8:	f8 01       	movw	r30, r16
     8ca:	ec 5c       	subi	r30, 0xCC	; 204
     8cc:	fd 4f       	sbci	r31, 0xFD	; 253
     8ce:	10 82       	st	Z, r1
                    strcpy(string_to_print, "HUM ");
     8d0:	85 e0       	ldi	r24, 0x05	; 5
     8d2:	e5 e7       	ldi	r30, 0x75	; 117
     8d4:	f1 e0       	ldi	r31, 0x01	; 1
     8d6:	a9 eb       	ldi	r26, 0xB9	; 185
     8d8:	b3 e0       	ldi	r27, 0x03	; 3
     8da:	01 90       	ld	r0, Z+
     8dc:	0d 92       	st	X+, r0
     8de:	8a 95       	dec	r24
     8e0:	e1 f7       	brne	.-8      	; 0x8da <__stack+0x47b>
            leds = 1;
            watering_pot=0;
            for(int k=0; k<middle_boards; ++k){//fix temperature!!!!!!
                sprintf(string_to_print, "T %d: %.1f ", k, tmp_avgs[k]);

                for(int m=0; m<strlen(string_to_print); ++m)
     8e2:	c0 e0       	ldi	r28, 0x00	; 0
     8e4:	d0 e0       	ldi	r29, 0x00	; 0
     8e6:	15 c0       	rjmp	.+42     	; 0x912 <__stack+0x4b3>
                else if(moist_avgs[k]>=370) {
                    dry[k]=0;
                    strcpy(string_to_print, "HUM ");
                }
                else{
                    dry[k]=0;
     8e8:	f8 01       	movw	r30, r16
     8ea:	ec 5c       	subi	r30, 0xCC	; 204
     8ec:	fd 4f       	sbci	r31, 0xFD	; 253
     8ee:	10 82       	st	Z, r1
                    strcpy(string_to_print, "VHUM ");
     8f0:	86 e0       	ldi	r24, 0x06	; 6
     8f2:	e4 e7       	ldi	r30, 0x74	; 116
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
     8f6:	a9 eb       	ldi	r26, 0xB9	; 185
     8f8:	b3 e0       	ldi	r27, 0x03	; 3
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	8a 95       	dec	r24
     900:	e1 f7       	brne	.-8      	; 0x8fa <__stack+0x49b>
     902:	ef cf       	rjmp	.-34     	; 0x8e2 <__stack+0x483>
                }

                for(int m=0; m<strlen(string_to_print); ++m)
                    print(string_to_print[m]);
     904:	fe 01       	movw	r30, r28
     906:	e7 54       	subi	r30, 0x47	; 71
     908:	fc 4f       	sbci	r31, 0xFC	; 252
     90a:	80 81       	ld	r24, Z
     90c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <print>
                else{
                    dry[k]=0;
                    strcpy(string_to_print, "VHUM ");
                }

                for(int m=0; m<strlen(string_to_print); ++m)
     910:	21 96       	adiw	r28, 0x01	; 1
     912:	e9 eb       	ldi	r30, 0xB9	; 185
     914:	f3 e0       	ldi	r31, 0x03	; 3
     916:	01 90       	ld	r0, Z+
     918:	00 20       	and	r0, r0
     91a:	e9 f7       	brne	.-6      	; 0x916 <__stack+0x4b7>
     91c:	31 97       	sbiw	r30, 0x01	; 1
     91e:	e9 5b       	subi	r30, 0xB9	; 185
     920:	f3 40       	sbci	r31, 0x03	; 3
     922:	ce 17       	cp	r28, r30
     924:	df 07       	cpc	r29, r31
     926:	70 f3       	brcs	.-36     	; 0x904 <__stack+0x4a5>
                    print(string_to_print[m]);
                
                if(dry[k])
     928:	f8 01       	movw	r30, r16
     92a:	ec 5c       	subi	r30, 0xCC	; 204
     92c:	fd 4f       	sbci	r31, 0xFD	; 253
     92e:	80 81       	ld	r24, Z
     930:	88 23       	and	r24, r24
     932:	11 f0       	breq	.+4      	; 0x938 <__stack+0x4d9>
                    watering_pot = watering_pot | leds;
     934:	ce 28       	or	r12, r14
     936:	df 28       	or	r13, r15
                leds = leds << 1;
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
        }
        if(!failed) {
            lcd_clear();
            leds = 1;
            watering_pot=0;
            for(int k=0; k<middle_boards; ++k){//fix temperature!!!!!!
     93c:	0f 5f       	subi	r16, 0xFF	; 255
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	10 16       	cp	r1, r16
     942:	11 06       	cpc	r1, r17
     944:	0c f0       	brlt	.+2      	; 0x948 <__stack+0x4e9>
     946:	58 cf       	rjmp	.-336    	; 0x7f8 <__stack+0x399>
                
                if(dry[k])
                    watering_pot = watering_pot | leds;
                leds = leds << 1;
            }
            PORTB = watering_pot;
     948:	c8 ba       	out	0x18, r12	; 24
     94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0x4f1>
        }
    }
    else
        first=false;
     94c:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <first>
    lcd_clear();
     950:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_clear>
    TCNT1 = 3036;
     954:	8c ed       	ldi	r24, 0xDC	; 220
     956:	9b e0       	ldi	r25, 0x0B	; 11
     958:	9d bd       	out	0x2d, r25	; 45
     95a:	8c bd       	out	0x2c, r24	; 44
}
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	bf 91       	pop	r27
     966:	af 91       	pop	r26
     968:	9f 91       	pop	r25
     96a:	8f 91       	pop	r24
     96c:	7f 91       	pop	r23
     96e:	6f 91       	pop	r22
     970:	5f 91       	pop	r21
     972:	4f 91       	pop	r20
     974:	3f 91       	pop	r19
     976:	2f 91       	pop	r18
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	0f 90       	pop	r0
     986:	0f be       	out	0x3f, r0	; 63
     988:	0f 90       	pop	r0
     98a:	1f 90       	pop	r1
     98c:	18 95       	reti

0000098e <main>:


int main() {
    UBRRH = (ubrr_content >> 8); //set USART Baud Rate Register
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	80 bd       	out	0x20, r24	; 32
    UBRRL = ubrr_content;
     992:	92 e6       	ldi	r25, 0x62	; 98
     994:	99 b9       	out	0x09, r25	; 9

    //Receiver and Transmitter Enable, RX_interrupt enable, TX_interrupt enable
    first = true;
     996:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <first>
    UCSRB = (1 << TXEN) | (1 << TXCIE) | (1 << RXEN) | (1 << RXCIE);
     99a:	88 ed       	ldi	r24, 0xD8	; 216
     99c:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); //Char size(8 bits)
     99e:	86 e0       	ldi	r24, 0x06	; 6
     9a0:	80 bd       	out	0x20, r24	; 32

    for(int i=0; i<middle_boards; ++i) { //initialize_values
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	1e c0       	rjmp	.+60     	; 0x9e4 <main+0x56>
        moist_avgs[i]=0;
     9a8:	9c 01       	movw	r18, r24
     9aa:	22 0f       	add	r18, r18
     9ac:	33 1f       	adc	r19, r19
     9ae:	f9 01       	movw	r30, r18
     9b0:	e2 5d       	subi	r30, 0xD2	; 210
     9b2:	fd 4f       	sbci	r31, 0xFD	; 253
     9b4:	11 82       	std	Z+1, r1	; 0x01
     9b6:	10 82       	st	Z, r1
        tmp_avgs[i]=0.0;
     9b8:	fc 01       	movw	r30, r24
     9ba:	ee 0f       	add	r30, r30
     9bc:	ff 1f       	adc	r31, r31
     9be:	ee 0f       	add	r30, r30
     9c0:	ff 1f       	adc	r31, r31
     9c2:	eb 54       	subi	r30, 0x4B	; 75
     9c4:	fc 4f       	sbci	r31, 0xFC	; 252
     9c6:	10 82       	st	Z, r1
     9c8:	11 82       	std	Z+1, r1	; 0x01
     9ca:	12 82       	std	Z+2, r1	; 0x02
     9cc:	13 82       	std	Z+3, r1	; 0x03
        moist_vars[i]=0;
     9ce:	f9 01       	movw	r30, r18
     9d0:	ee 5c       	subi	r30, 0xCE	; 206
     9d2:	fd 4f       	sbci	r31, 0xFD	; 253
     9d4:	11 82       	std	Z+1, r1	; 0x01
     9d6:	10 82       	st	Z, r1
        tmp_vars[i]=0;
     9d8:	f9 01       	movw	r30, r18
     9da:	e0 5d       	subi	r30, 0xD0	; 208
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	11 82       	std	Z+1, r1	; 0x01
     9e0:	10 82       	st	Z, r1
    //Receiver and Transmitter Enable, RX_interrupt enable, TX_interrupt enable
    first = true;
    UCSRB = (1 << TXEN) | (1 << TXCIE) | (1 << RXEN) | (1 << RXCIE);
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); //Char size(8 bits)

    for(int i=0; i<middle_boards; ++i) { //initialize_values
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	18 16       	cp	r1, r24
     9e6:	19 06       	cpc	r1, r25
     9e8:	fc f6       	brge	.-66     	; 0x9a8 <main+0x1a>
        tmp_avgs[i]=0.0;
        moist_vars[i]=0;
        tmp_vars[i]=0;
    }

    strcpy(string_to_send, "ESP:restart\n");
     9ea:	8d e0       	ldi	r24, 0x0D	; 13
     9ec:	ea e7       	ldi	r30, 0x7A	; 122
     9ee:	f1 e0       	ldi	r31, 0x01	; 1
     9f0:	a5 e3       	ldi	r26, 0x35	; 53
     9f2:	b2 e0       	ldi	r27, 0x02	; 2
     9f4:	01 90       	ld	r0, Z+
     9f6:	0d 92       	st	X+, r0
     9f8:	8a 95       	dec	r24
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <main+0x66>
    sendCommand(string_to_send);
     9fc:	85 e3       	ldi	r24, 0x35	; 53
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>

    strcpy(string_to_send, "ESP:addSensor:\"Moist_Sensor\"\n");
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	e7 e8       	ldi	r30, 0x87	; 135
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	a5 e3       	ldi	r26, 0x35	; 53
     a0c:	b2 e0       	ldi	r27, 0x02	; 2
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <main+0x80>
    sendCommand(string_to_send);
     a16:	85 e3       	ldi	r24, 0x35	; 53
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>

    strcpy(string_to_send, "ESP:addSensor:\"Tmp_Sensor\"\n");
     a1e:	8c e1       	ldi	r24, 0x1C	; 28
     a20:	e5 ea       	ldi	r30, 0xA5	; 165
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	a5 e3       	ldi	r26, 0x35	; 53
     a26:	b2 e0       	ldi	r27, 0x02	; 2
     a28:	01 90       	ld	r0, Z+
     a2a:	0d 92       	st	X+, r0
     a2c:	8a 95       	dec	r24
     a2e:	e1 f7       	brne	.-8      	; 0xa28 <main+0x9a>
    sendCommand(string_to_send);
     a30:	85 e3       	ldi	r24, 0x35	; 53
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>

    strcpy(string_to_send, "ESP:addSensor:\"Moist_avg\"\n");
     a38:	8b e1       	ldi	r24, 0x1B	; 27
     a3a:	e1 ec       	ldi	r30, 0xC1	; 193
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	a5 e3       	ldi	r26, 0x35	; 53
     a40:	b2 e0       	ldi	r27, 0x02	; 2
     a42:	01 90       	ld	r0, Z+
     a44:	0d 92       	st	X+, r0
     a46:	8a 95       	dec	r24
     a48:	e1 f7       	brne	.-8      	; 0xa42 <main+0xb4>
    sendCommand(string_to_send);
     a4a:	85 e3       	ldi	r24, 0x35	; 53
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>

    strcpy(string_to_send, "ESP:addSensor:\"Tmp_avg\"\n");
     a52:	89 e1       	ldi	r24, 0x19	; 25
     a54:	ec ed       	ldi	r30, 0xDC	; 220
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	a5 e3       	ldi	r26, 0x35	; 53
     a5a:	b2 e0       	ldi	r27, 0x02	; 2
     a5c:	01 90       	ld	r0, Z+
     a5e:	0d 92       	st	X+, r0
     a60:	8a 95       	dec	r24
     a62:	e1 f7       	brne	.-8      	; 0xa5c <main+0xce>
    sendCommand(string_to_send);
     a64:	85 e3       	ldi	r24, 0x35	; 53
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>

    strcpy(string_to_send, "ESP:addSensor:\"Moist_var\"\n");
     a6c:	8b e1       	ldi	r24, 0x1B	; 27
     a6e:	e5 ef       	ldi	r30, 0xF5	; 245
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	a5 e3       	ldi	r26, 0x35	; 53
     a74:	b2 e0       	ldi	r27, 0x02	; 2
     a76:	01 90       	ld	r0, Z+
     a78:	0d 92       	st	X+, r0
     a7a:	8a 95       	dec	r24
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <main+0xe8>
    sendCommand(string_to_send);
     a7e:	85 e3       	ldi	r24, 0x35	; 53
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>

    strcpy(string_to_send, "ESP:addSensor:\"Tmp_var\"\n");
     a86:	89 e1       	ldi	r24, 0x19	; 25
     a88:	e0 e1       	ldi	r30, 0x10	; 16
     a8a:	f2 e0       	ldi	r31, 0x02	; 2
     a8c:	a5 e3       	ldi	r26, 0x35	; 53
     a8e:	b2 e0       	ldi	r27, 0x02	; 2
     a90:	01 90       	ld	r0, Z+
     a92:	0d 92       	st	X+, r0
     a94:	8a 95       	dec	r24
     a96:	e1 f7       	brne	.-8      	; 0xa90 <main+0x102>
    sendCommand(string_to_send);
     a98:	85 e3       	ldi	r24, 0x35	; 53
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sendCommand>

    TCCR1B = 0x05; //CK/1024
     aa0:	85 e0       	ldi	r24, 0x05	; 5
     aa2:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 3036; //8 seconds
     aa4:	8c ed       	ldi	r24, 0xDC	; 220
     aa6:	9b e0       	ldi	r25, 0x0B	; 11
     aa8:	9d bd       	out	0x2d, r25	; 45
     aaa:	8c bd       	out	0x2c, r24	; 44
	TIMSK = 0x04; //enable overflow interrupt for TCNT1
     aac:	84 e0       	ldi	r24, 0x04	; 4
     aae:	89 bf       	out	0x39, r24	; 57
    sei();
     ab0:	78 94       	sei
     ab2:	ff cf       	rjmp	.-2      	; 0xab2 <main+0x124>

00000ab4 <vfprintf>:
     ab4:	a0 e1       	ldi	r26, 0x10	; 16
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e0 e6       	ldi	r30, 0x60	; 96
     aba:	f5 e0       	ldi	r31, 0x05	; 5
     abc:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__prologue_saves__>
     ac0:	7c 01       	movw	r14, r24
     ac2:	1b 01       	movw	r2, r22
     ac4:	6a 01       	movw	r12, r20
     ac6:	fc 01       	movw	r30, r24
     ac8:	17 82       	std	Z+7, r1	; 0x07
     aca:	16 82       	std	Z+6, r1	; 0x06
     acc:	83 81       	ldd	r24, Z+3	; 0x03
     ace:	81 ff       	sbrs	r24, 1
     ad0:	44 c3       	rjmp	.+1672   	; 0x115a <vfprintf+0x6a6>
     ad2:	9e 01       	movw	r18, r28
     ad4:	2f 5f       	subi	r18, 0xFF	; 255
     ad6:	3f 4f       	sbci	r19, 0xFF	; 255
     ad8:	39 01       	movw	r6, r18
     ada:	f7 01       	movw	r30, r14
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	f1 01       	movw	r30, r2
     ae0:	93 fd       	sbrc	r25, 3
     ae2:	85 91       	lpm	r24, Z+
     ae4:	93 ff       	sbrs	r25, 3
     ae6:	81 91       	ld	r24, Z+
     ae8:	1f 01       	movw	r2, r30
     aea:	88 23       	and	r24, r24
     aec:	09 f4       	brne	.+2      	; 0xaf0 <vfprintf+0x3c>
     aee:	31 c3       	rjmp	.+1634   	; 0x1152 <vfprintf+0x69e>
     af0:	85 32       	cpi	r24, 0x25	; 37
     af2:	39 f4       	brne	.+14     	; 0xb02 <vfprintf+0x4e>
     af4:	93 fd       	sbrc	r25, 3
     af6:	85 91       	lpm	r24, Z+
     af8:	93 ff       	sbrs	r25, 3
     afa:	81 91       	ld	r24, Z+
     afc:	1f 01       	movw	r2, r30
     afe:	85 32       	cpi	r24, 0x25	; 37
     b00:	39 f4       	brne	.+14     	; 0xb10 <vfprintf+0x5c>
     b02:	b7 01       	movw	r22, r14
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     b0a:	56 01       	movw	r10, r12
     b0c:	65 01       	movw	r12, r10
     b0e:	e5 cf       	rjmp	.-54     	; 0xada <vfprintf+0x26>
     b10:	10 e0       	ldi	r17, 0x00	; 0
     b12:	51 2c       	mov	r5, r1
     b14:	91 2c       	mov	r9, r1
     b16:	ff e1       	ldi	r31, 0x1F	; 31
     b18:	f9 15       	cp	r31, r9
     b1a:	d8 f0       	brcs	.+54     	; 0xb52 <vfprintf+0x9e>
     b1c:	8b 32       	cpi	r24, 0x2B	; 43
     b1e:	79 f0       	breq	.+30     	; 0xb3e <vfprintf+0x8a>
     b20:	38 f4       	brcc	.+14     	; 0xb30 <vfprintf+0x7c>
     b22:	80 32       	cpi	r24, 0x20	; 32
     b24:	79 f0       	breq	.+30     	; 0xb44 <vfprintf+0x90>
     b26:	83 32       	cpi	r24, 0x23	; 35
     b28:	a1 f4       	brne	.+40     	; 0xb52 <vfprintf+0x9e>
     b2a:	f9 2d       	mov	r31, r9
     b2c:	f0 61       	ori	r31, 0x10	; 16
     b2e:	2e c0       	rjmp	.+92     	; 0xb8c <vfprintf+0xd8>
     b30:	8d 32       	cpi	r24, 0x2D	; 45
     b32:	61 f0       	breq	.+24     	; 0xb4c <vfprintf+0x98>
     b34:	80 33       	cpi	r24, 0x30	; 48
     b36:	69 f4       	brne	.+26     	; 0xb52 <vfprintf+0x9e>
     b38:	29 2d       	mov	r18, r9
     b3a:	21 60       	ori	r18, 0x01	; 1
     b3c:	2d c0       	rjmp	.+90     	; 0xb98 <vfprintf+0xe4>
     b3e:	39 2d       	mov	r19, r9
     b40:	32 60       	ori	r19, 0x02	; 2
     b42:	93 2e       	mov	r9, r19
     b44:	89 2d       	mov	r24, r9
     b46:	84 60       	ori	r24, 0x04	; 4
     b48:	98 2e       	mov	r9, r24
     b4a:	2a c0       	rjmp	.+84     	; 0xba0 <vfprintf+0xec>
     b4c:	e9 2d       	mov	r30, r9
     b4e:	e8 60       	ori	r30, 0x08	; 8
     b50:	15 c0       	rjmp	.+42     	; 0xb7c <vfprintf+0xc8>
     b52:	97 fc       	sbrc	r9, 7
     b54:	2d c0       	rjmp	.+90     	; 0xbb0 <vfprintf+0xfc>
     b56:	20 ed       	ldi	r18, 0xD0	; 208
     b58:	28 0f       	add	r18, r24
     b5a:	2a 30       	cpi	r18, 0x0A	; 10
     b5c:	88 f4       	brcc	.+34     	; 0xb80 <vfprintf+0xcc>
     b5e:	96 fe       	sbrs	r9, 6
     b60:	06 c0       	rjmp	.+12     	; 0xb6e <vfprintf+0xba>
     b62:	3a e0       	ldi	r19, 0x0A	; 10
     b64:	13 9f       	mul	r17, r19
     b66:	20 0d       	add	r18, r0
     b68:	11 24       	eor	r1, r1
     b6a:	12 2f       	mov	r17, r18
     b6c:	19 c0       	rjmp	.+50     	; 0xba0 <vfprintf+0xec>
     b6e:	8a e0       	ldi	r24, 0x0A	; 10
     b70:	58 9e       	mul	r5, r24
     b72:	20 0d       	add	r18, r0
     b74:	11 24       	eor	r1, r1
     b76:	52 2e       	mov	r5, r18
     b78:	e9 2d       	mov	r30, r9
     b7a:	e0 62       	ori	r30, 0x20	; 32
     b7c:	9e 2e       	mov	r9, r30
     b7e:	10 c0       	rjmp	.+32     	; 0xba0 <vfprintf+0xec>
     b80:	8e 32       	cpi	r24, 0x2E	; 46
     b82:	31 f4       	brne	.+12     	; 0xb90 <vfprintf+0xdc>
     b84:	96 fc       	sbrc	r9, 6
     b86:	e5 c2       	rjmp	.+1482   	; 0x1152 <vfprintf+0x69e>
     b88:	f9 2d       	mov	r31, r9
     b8a:	f0 64       	ori	r31, 0x40	; 64
     b8c:	9f 2e       	mov	r9, r31
     b8e:	08 c0       	rjmp	.+16     	; 0xba0 <vfprintf+0xec>
     b90:	8c 36       	cpi	r24, 0x6C	; 108
     b92:	21 f4       	brne	.+8      	; 0xb9c <vfprintf+0xe8>
     b94:	29 2d       	mov	r18, r9
     b96:	20 68       	ori	r18, 0x80	; 128
     b98:	92 2e       	mov	r9, r18
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <vfprintf+0xec>
     b9c:	88 36       	cpi	r24, 0x68	; 104
     b9e:	41 f4       	brne	.+16     	; 0xbb0 <vfprintf+0xfc>
     ba0:	f1 01       	movw	r30, r2
     ba2:	93 fd       	sbrc	r25, 3
     ba4:	85 91       	lpm	r24, Z+
     ba6:	93 ff       	sbrs	r25, 3
     ba8:	81 91       	ld	r24, Z+
     baa:	1f 01       	movw	r2, r30
     bac:	81 11       	cpse	r24, r1
     bae:	b3 cf       	rjmp	.-154    	; 0xb16 <vfprintf+0x62>
     bb0:	9b eb       	ldi	r25, 0xBB	; 187
     bb2:	98 0f       	add	r25, r24
     bb4:	93 30       	cpi	r25, 0x03	; 3
     bb6:	20 f4       	brcc	.+8      	; 0xbc0 <vfprintf+0x10c>
     bb8:	99 2d       	mov	r25, r9
     bba:	90 61       	ori	r25, 0x10	; 16
     bbc:	80 5e       	subi	r24, 0xE0	; 224
     bbe:	07 c0       	rjmp	.+14     	; 0xbce <vfprintf+0x11a>
     bc0:	9b e9       	ldi	r25, 0x9B	; 155
     bc2:	98 0f       	add	r25, r24
     bc4:	93 30       	cpi	r25, 0x03	; 3
     bc6:	08 f0       	brcs	.+2      	; 0xbca <vfprintf+0x116>
     bc8:	66 c1       	rjmp	.+716    	; 0xe96 <vfprintf+0x3e2>
     bca:	99 2d       	mov	r25, r9
     bcc:	9f 7e       	andi	r25, 0xEF	; 239
     bce:	96 ff       	sbrs	r25, 6
     bd0:	16 e0       	ldi	r17, 0x06	; 6
     bd2:	9f 73       	andi	r25, 0x3F	; 63
     bd4:	99 2e       	mov	r9, r25
     bd6:	85 36       	cpi	r24, 0x65	; 101
     bd8:	19 f4       	brne	.+6      	; 0xbe0 <vfprintf+0x12c>
     bda:	90 64       	ori	r25, 0x40	; 64
     bdc:	99 2e       	mov	r9, r25
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <vfprintf+0x13c>
     be0:	86 36       	cpi	r24, 0x66	; 102
     be2:	21 f4       	brne	.+8      	; 0xbec <vfprintf+0x138>
     be4:	39 2f       	mov	r19, r25
     be6:	30 68       	ori	r19, 0x80	; 128
     be8:	93 2e       	mov	r9, r19
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0x13c>
     bec:	11 11       	cpse	r17, r1
     bee:	11 50       	subi	r17, 0x01	; 1
     bf0:	97 fe       	sbrs	r9, 7
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <vfprintf+0x14e>
     bf4:	1c 33       	cpi	r17, 0x3C	; 60
     bf6:	50 f4       	brcc	.+20     	; 0xc0c <vfprintf+0x158>
     bf8:	44 24       	eor	r4, r4
     bfa:	43 94       	inc	r4
     bfc:	41 0e       	add	r4, r17
     bfe:	27 e0       	ldi	r18, 0x07	; 7
     c00:	0b c0       	rjmp	.+22     	; 0xc18 <vfprintf+0x164>
     c02:	18 30       	cpi	r17, 0x08	; 8
     c04:	38 f0       	brcs	.+14     	; 0xc14 <vfprintf+0x160>
     c06:	27 e0       	ldi	r18, 0x07	; 7
     c08:	17 e0       	ldi	r17, 0x07	; 7
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <vfprintf+0x162>
     c0c:	27 e0       	ldi	r18, 0x07	; 7
     c0e:	9c e3       	ldi	r25, 0x3C	; 60
     c10:	49 2e       	mov	r4, r25
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <vfprintf+0x164>
     c14:	21 2f       	mov	r18, r17
     c16:	41 2c       	mov	r4, r1
     c18:	56 01       	movw	r10, r12
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	a8 0e       	add	r10, r24
     c1e:	b1 1c       	adc	r11, r1
     c20:	f6 01       	movw	r30, r12
     c22:	60 81       	ld	r22, Z
     c24:	71 81       	ldd	r23, Z+1	; 0x01
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	04 2d       	mov	r16, r4
     c2c:	a3 01       	movw	r20, r6
     c2e:	0e 94 30 09 	call	0x1260	; 0x1260 <__ftoa_engine>
     c32:	6c 01       	movw	r12, r24
     c34:	f9 81       	ldd	r31, Y+1	; 0x01
     c36:	fc 87       	std	Y+12, r31	; 0x0c
     c38:	f0 ff       	sbrs	r31, 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <vfprintf+0x18c>
     c3c:	f3 ff       	sbrs	r31, 3
     c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x198>
     c40:	91 fc       	sbrc	r9, 1
     c42:	06 c0       	rjmp	.+12     	; 0xc50 <vfprintf+0x19c>
     c44:	92 fe       	sbrs	r9, 2
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <vfprintf+0x1a0>
     c48:	00 e2       	ldi	r16, 0x20	; 32
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <vfprintf+0x1a2>
     c4c:	0d e2       	ldi	r16, 0x2D	; 45
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <vfprintf+0x1a2>
     c50:	0b e2       	ldi	r16, 0x2B	; 43
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <vfprintf+0x1a2>
     c54:	00 e0       	ldi	r16, 0x00	; 0
     c56:	8c 85       	ldd	r24, Y+12	; 0x0c
     c58:	8c 70       	andi	r24, 0x0C	; 12
     c5a:	19 f0       	breq	.+6      	; 0xc62 <vfprintf+0x1ae>
     c5c:	01 11       	cpse	r16, r1
     c5e:	5a c2       	rjmp	.+1204   	; 0x1114 <vfprintf+0x660>
     c60:	9b c2       	rjmp	.+1334   	; 0x1198 <vfprintf+0x6e4>
     c62:	97 fe       	sbrs	r9, 7
     c64:	10 c0       	rjmp	.+32     	; 0xc86 <vfprintf+0x1d2>
     c66:	4c 0c       	add	r4, r12
     c68:	fc 85       	ldd	r31, Y+12	; 0x0c
     c6a:	f4 ff       	sbrs	r31, 4
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <vfprintf+0x1c2>
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	81 33       	cpi	r24, 0x31	; 49
     c72:	09 f4       	brne	.+2      	; 0xc76 <vfprintf+0x1c2>
     c74:	4a 94       	dec	r4
     c76:	14 14       	cp	r1, r4
     c78:	74 f5       	brge	.+92     	; 0xcd6 <vfprintf+0x222>
     c7a:	28 e0       	ldi	r18, 0x08	; 8
     c7c:	24 15       	cp	r18, r4
     c7e:	78 f5       	brcc	.+94     	; 0xcde <vfprintf+0x22a>
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	48 2e       	mov	r4, r24
     c84:	2c c0       	rjmp	.+88     	; 0xcde <vfprintf+0x22a>
     c86:	96 fc       	sbrc	r9, 6
     c88:	2a c0       	rjmp	.+84     	; 0xcde <vfprintf+0x22a>
     c8a:	81 2f       	mov	r24, r17
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	8c 15       	cp	r24, r12
     c90:	9d 05       	cpc	r25, r13
     c92:	9c f0       	brlt	.+38     	; 0xcba <vfprintf+0x206>
     c94:	3c ef       	ldi	r19, 0xFC	; 252
     c96:	c3 16       	cp	r12, r19
     c98:	3f ef       	ldi	r19, 0xFF	; 255
     c9a:	d3 06       	cpc	r13, r19
     c9c:	74 f0       	brlt	.+28     	; 0xcba <vfprintf+0x206>
     c9e:	89 2d       	mov	r24, r9
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	98 2e       	mov	r9, r24
     ca4:	0a c0       	rjmp	.+20     	; 0xcba <vfprintf+0x206>
     ca6:	e2 e0       	ldi	r30, 0x02	; 2
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ec 0f       	add	r30, r28
     cac:	fd 1f       	adc	r31, r29
     cae:	e1 0f       	add	r30, r17
     cb0:	f1 1d       	adc	r31, r1
     cb2:	80 81       	ld	r24, Z
     cb4:	80 33       	cpi	r24, 0x30	; 48
     cb6:	19 f4       	brne	.+6      	; 0xcbe <vfprintf+0x20a>
     cb8:	11 50       	subi	r17, 0x01	; 1
     cba:	11 11       	cpse	r17, r1
     cbc:	f4 cf       	rjmp	.-24     	; 0xca6 <vfprintf+0x1f2>
     cbe:	97 fe       	sbrs	r9, 7
     cc0:	0e c0       	rjmp	.+28     	; 0xcde <vfprintf+0x22a>
     cc2:	44 24       	eor	r4, r4
     cc4:	43 94       	inc	r4
     cc6:	41 0e       	add	r4, r17
     cc8:	81 2f       	mov	r24, r17
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	c8 16       	cp	r12, r24
     cce:	d9 06       	cpc	r13, r25
     cd0:	2c f4       	brge	.+10     	; 0xcdc <vfprintf+0x228>
     cd2:	1c 19       	sub	r17, r12
     cd4:	04 c0       	rjmp	.+8      	; 0xcde <vfprintf+0x22a>
     cd6:	44 24       	eor	r4, r4
     cd8:	43 94       	inc	r4
     cda:	01 c0       	rjmp	.+2      	; 0xcde <vfprintf+0x22a>
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	97 fe       	sbrs	r9, 7
     ce0:	06 c0       	rjmp	.+12     	; 0xcee <vfprintf+0x23a>
     ce2:	1c 14       	cp	r1, r12
     ce4:	1d 04       	cpc	r1, r13
     ce6:	34 f4       	brge	.+12     	; 0xcf4 <vfprintf+0x240>
     ce8:	c6 01       	movw	r24, r12
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <vfprintf+0x244>
     cee:	85 e0       	ldi	r24, 0x05	; 5
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x244>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	01 11       	cpse	r16, r1
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	11 23       	and	r17, r17
     cfe:	31 f0       	breq	.+12     	; 0xd0c <vfprintf+0x258>
     d00:	21 2f       	mov	r18, r17
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	82 0f       	add	r24, r18
     d0a:	93 1f       	adc	r25, r19
     d0c:	25 2d       	mov	r18, r5
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	82 17       	cp	r24, r18
     d12:	93 07       	cpc	r25, r19
     d14:	14 f4       	brge	.+4      	; 0xd1a <vfprintf+0x266>
     d16:	58 1a       	sub	r5, r24
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <vfprintf+0x268>
     d1a:	51 2c       	mov	r5, r1
     d1c:	89 2d       	mov	r24, r9
     d1e:	89 70       	andi	r24, 0x09	; 9
     d20:	49 f4       	brne	.+18     	; 0xd34 <vfprintf+0x280>
     d22:	55 20       	and	r5, r5
     d24:	39 f0       	breq	.+14     	; 0xd34 <vfprintf+0x280>
     d26:	b7 01       	movw	r22, r14
     d28:	80 e2       	ldi	r24, 0x20	; 32
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     d30:	5a 94       	dec	r5
     d32:	f7 cf       	rjmp	.-18     	; 0xd22 <vfprintf+0x26e>
     d34:	00 23       	and	r16, r16
     d36:	29 f0       	breq	.+10     	; 0xd42 <vfprintf+0x28e>
     d38:	b7 01       	movw	r22, r14
     d3a:	80 2f       	mov	r24, r16
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     d42:	93 fc       	sbrc	r9, 3
     d44:	09 c0       	rjmp	.+18     	; 0xd58 <vfprintf+0x2a4>
     d46:	55 20       	and	r5, r5
     d48:	39 f0       	breq	.+14     	; 0xd58 <vfprintf+0x2a4>
     d4a:	b7 01       	movw	r22, r14
     d4c:	80 e3       	ldi	r24, 0x30	; 48
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     d54:	5a 94       	dec	r5
     d56:	f7 cf       	rjmp	.-18     	; 0xd46 <vfprintf+0x292>
     d58:	97 fe       	sbrs	r9, 7
     d5a:	4c c0       	rjmp	.+152    	; 0xdf4 <vfprintf+0x340>
     d5c:	46 01       	movw	r8, r12
     d5e:	d7 fe       	sbrs	r13, 7
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <vfprintf+0x2b2>
     d62:	81 2c       	mov	r8, r1
     d64:	91 2c       	mov	r9, r1
     d66:	c6 01       	movw	r24, r12
     d68:	88 19       	sub	r24, r8
     d6a:	99 09       	sbc	r25, r9
     d6c:	f3 01       	movw	r30, r6
     d6e:	e8 0f       	add	r30, r24
     d70:	f9 1f       	adc	r31, r25
     d72:	fe 87       	std	Y+14, r31	; 0x0e
     d74:	ed 87       	std	Y+13, r30	; 0x0d
     d76:	96 01       	movw	r18, r12
     d78:	24 19       	sub	r18, r4
     d7a:	31 09       	sbc	r19, r1
     d7c:	38 8b       	std	Y+16, r19	; 0x10
     d7e:	2f 87       	std	Y+15, r18	; 0x0f
     d80:	01 2f       	mov	r16, r17
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	11 95       	neg	r17
     d86:	01 95       	neg	r16
     d88:	11 09       	sbc	r17, r1
     d8a:	3f ef       	ldi	r19, 0xFF	; 255
     d8c:	83 16       	cp	r8, r19
     d8e:	93 06       	cpc	r9, r19
     d90:	29 f4       	brne	.+10     	; 0xd9c <vfprintf+0x2e8>
     d92:	b7 01       	movw	r22, r14
     d94:	8e e2       	ldi	r24, 0x2E	; 46
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     d9c:	c8 14       	cp	r12, r8
     d9e:	d9 04       	cpc	r13, r9
     da0:	4c f0       	brlt	.+18     	; 0xdb4 <vfprintf+0x300>
     da2:	8f 85       	ldd	r24, Y+15	; 0x0f
     da4:	98 89       	ldd	r25, Y+16	; 0x10
     da6:	88 15       	cp	r24, r8
     da8:	99 05       	cpc	r25, r9
     daa:	24 f4       	brge	.+8      	; 0xdb4 <vfprintf+0x300>
     dac:	ed 85       	ldd	r30, Y+13	; 0x0d
     dae:	fe 85       	ldd	r31, Y+14	; 0x0e
     db0:	81 81       	ldd	r24, Z+1	; 0x01
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <vfprintf+0x302>
     db4:	80 e3       	ldi	r24, 0x30	; 48
     db6:	f1 e0       	ldi	r31, 0x01	; 1
     db8:	8f 1a       	sub	r8, r31
     dba:	91 08       	sbc	r9, r1
     dbc:	2d 85       	ldd	r18, Y+13	; 0x0d
     dbe:	3e 85       	ldd	r19, Y+14	; 0x0e
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	3e 87       	std	Y+14, r19	; 0x0e
     dc6:	2d 87       	std	Y+13, r18	; 0x0d
     dc8:	80 16       	cp	r8, r16
     dca:	91 06       	cpc	r9, r17
     dcc:	2c f0       	brlt	.+10     	; 0xdd8 <vfprintf+0x324>
     dce:	b7 01       	movw	r22, r14
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     dd6:	d9 cf       	rjmp	.-78     	; 0xd8a <vfprintf+0x2d6>
     dd8:	c8 14       	cp	r12, r8
     dda:	d9 04       	cpc	r13, r9
     ddc:	41 f4       	brne	.+16     	; 0xdee <vfprintf+0x33a>
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	96 33       	cpi	r25, 0x36	; 54
     de2:	20 f4       	brcc	.+8      	; 0xdec <vfprintf+0x338>
     de4:	95 33       	cpi	r25, 0x35	; 53
     de6:	19 f4       	brne	.+6      	; 0xdee <vfprintf+0x33a>
     de8:	3c 85       	ldd	r19, Y+12	; 0x0c
     dea:	34 ff       	sbrs	r19, 4
     dec:	81 e3       	ldi	r24, 0x31	; 49
     dee:	b7 01       	movw	r22, r14
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	4e c0       	rjmp	.+156    	; 0xe90 <vfprintf+0x3dc>
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	81 33       	cpi	r24, 0x31	; 49
     df8:	19 f0       	breq	.+6      	; 0xe00 <vfprintf+0x34c>
     dfa:	9c 85       	ldd	r25, Y+12	; 0x0c
     dfc:	9f 7e       	andi	r25, 0xEF	; 239
     dfe:	9c 87       	std	Y+12, r25	; 0x0c
     e00:	b7 01       	movw	r22, r14
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     e08:	11 11       	cpse	r17, r1
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <vfprintf+0x362>
     e0c:	94 fc       	sbrc	r9, 4
     e0e:	18 c0       	rjmp	.+48     	; 0xe40 <vfprintf+0x38c>
     e10:	85 e6       	ldi	r24, 0x65	; 101
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	17 c0       	rjmp	.+46     	; 0xe44 <vfprintf+0x390>
     e16:	b7 01       	movw	r22, r14
     e18:	8e e2       	ldi	r24, 0x2E	; 46
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     e20:	1e 5f       	subi	r17, 0xFE	; 254
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	01 e0       	ldi	r16, 0x01	; 1
     e26:	08 0f       	add	r16, r24
     e28:	f3 01       	movw	r30, r6
     e2a:	e8 0f       	add	r30, r24
     e2c:	f1 1d       	adc	r31, r1
     e2e:	80 81       	ld	r24, Z
     e30:	b7 01       	movw	r22, r14
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     e38:	80 2f       	mov	r24, r16
     e3a:	01 13       	cpse	r16, r17
     e3c:	f3 cf       	rjmp	.-26     	; 0xe24 <vfprintf+0x370>
     e3e:	e6 cf       	rjmp	.-52     	; 0xe0c <vfprintf+0x358>
     e40:	85 e4       	ldi	r24, 0x45	; 69
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	b7 01       	movw	r22, r14
     e46:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     e4a:	d7 fc       	sbrc	r13, 7
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <vfprintf+0x3a6>
     e4e:	c1 14       	cp	r12, r1
     e50:	d1 04       	cpc	r13, r1
     e52:	41 f4       	brne	.+16     	; 0xe64 <vfprintf+0x3b0>
     e54:	ec 85       	ldd	r30, Y+12	; 0x0c
     e56:	e4 ff       	sbrs	r30, 4
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <vfprintf+0x3b0>
     e5a:	d1 94       	neg	r13
     e5c:	c1 94       	neg	r12
     e5e:	d1 08       	sbc	r13, r1
     e60:	8d e2       	ldi	r24, 0x2D	; 45
     e62:	01 c0       	rjmp	.+2      	; 0xe66 <vfprintf+0x3b2>
     e64:	8b e2       	ldi	r24, 0x2B	; 43
     e66:	b7 01       	movw	r22, r14
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	2a e0       	ldi	r18, 0x0A	; 10
     e72:	c2 16       	cp	r12, r18
     e74:	d1 04       	cpc	r13, r1
     e76:	2c f0       	brlt	.+10     	; 0xe82 <vfprintf+0x3ce>
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	fa e0       	ldi	r31, 0x0A	; 10
     e7c:	cf 1a       	sub	r12, r31
     e7e:	d1 08       	sbc	r13, r1
     e80:	f7 cf       	rjmp	.-18     	; 0xe70 <vfprintf+0x3bc>
     e82:	b7 01       	movw	r22, r14
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     e8a:	b7 01       	movw	r22, r14
     e8c:	c6 01       	movw	r24, r12
     e8e:	c0 96       	adiw	r24, 0x30	; 48
     e90:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     e94:	54 c1       	rjmp	.+680    	; 0x113e <vfprintf+0x68a>
     e96:	83 36       	cpi	r24, 0x63	; 99
     e98:	31 f0       	breq	.+12     	; 0xea6 <vfprintf+0x3f2>
     e9a:	83 37       	cpi	r24, 0x73	; 115
     e9c:	79 f0       	breq	.+30     	; 0xebc <vfprintf+0x408>
     e9e:	83 35       	cpi	r24, 0x53	; 83
     ea0:	09 f0       	breq	.+2      	; 0xea4 <vfprintf+0x3f0>
     ea2:	56 c0       	rjmp	.+172    	; 0xf50 <vfprintf+0x49c>
     ea4:	20 c0       	rjmp	.+64     	; 0xee6 <vfprintf+0x432>
     ea6:	56 01       	movw	r10, r12
     ea8:	32 e0       	ldi	r19, 0x02	; 2
     eaa:	a3 0e       	add	r10, r19
     eac:	b1 1c       	adc	r11, r1
     eae:	f6 01       	movw	r30, r12
     eb0:	80 81       	ld	r24, Z
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	01 e0       	ldi	r16, 0x01	; 1
     eb6:	10 e0       	ldi	r17, 0x00	; 0
     eb8:	63 01       	movw	r12, r6
     eba:	12 c0       	rjmp	.+36     	; 0xee0 <vfprintf+0x42c>
     ebc:	56 01       	movw	r10, r12
     ebe:	f2 e0       	ldi	r31, 0x02	; 2
     ec0:	af 0e       	add	r10, r31
     ec2:	b1 1c       	adc	r11, r1
     ec4:	f6 01       	movw	r30, r12
     ec6:	c0 80       	ld	r12, Z
     ec8:	d1 80       	ldd	r13, Z+1	; 0x01
     eca:	96 fe       	sbrs	r9, 6
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <vfprintf+0x420>
     ece:	61 2f       	mov	r22, r17
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x424>
     ed4:	6f ef       	ldi	r22, 0xFF	; 255
     ed6:	7f ef       	ldi	r23, 0xFF	; 255
     ed8:	c6 01       	movw	r24, r12
     eda:	0e 94 13 0a 	call	0x1426	; 0x1426 <strnlen>
     ede:	8c 01       	movw	r16, r24
     ee0:	f9 2d       	mov	r31, r9
     ee2:	ff 77       	andi	r31, 0x7F	; 127
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <vfprintf+0x45a>
     ee6:	56 01       	movw	r10, r12
     ee8:	22 e0       	ldi	r18, 0x02	; 2
     eea:	a2 0e       	add	r10, r18
     eec:	b1 1c       	adc	r11, r1
     eee:	f6 01       	movw	r30, r12
     ef0:	c0 80       	ld	r12, Z
     ef2:	d1 80       	ldd	r13, Z+1	; 0x01
     ef4:	96 fe       	sbrs	r9, 6
     ef6:	03 c0       	rjmp	.+6      	; 0xefe <vfprintf+0x44a>
     ef8:	61 2f       	mov	r22, r17
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <vfprintf+0x44e>
     efe:	6f ef       	ldi	r22, 0xFF	; 255
     f00:	7f ef       	ldi	r23, 0xFF	; 255
     f02:	c6 01       	movw	r24, r12
     f04:	0e 94 08 0a 	call	0x1410	; 0x1410 <strnlen_P>
     f08:	8c 01       	movw	r16, r24
     f0a:	f9 2d       	mov	r31, r9
     f0c:	f0 68       	ori	r31, 0x80	; 128
     f0e:	9f 2e       	mov	r9, r31
     f10:	f3 fd       	sbrc	r31, 3
     f12:	1a c0       	rjmp	.+52     	; 0xf48 <vfprintf+0x494>
     f14:	85 2d       	mov	r24, r5
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	08 17       	cp	r16, r24
     f1a:	19 07       	cpc	r17, r25
     f1c:	a8 f4       	brcc	.+42     	; 0xf48 <vfprintf+0x494>
     f1e:	b7 01       	movw	r22, r14
     f20:	80 e2       	ldi	r24, 0x20	; 32
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     f28:	5a 94       	dec	r5
     f2a:	f4 cf       	rjmp	.-24     	; 0xf14 <vfprintf+0x460>
     f2c:	f6 01       	movw	r30, r12
     f2e:	97 fc       	sbrc	r9, 7
     f30:	85 91       	lpm	r24, Z+
     f32:	97 fe       	sbrs	r9, 7
     f34:	81 91       	ld	r24, Z+
     f36:	6f 01       	movw	r12, r30
     f38:	b7 01       	movw	r22, r14
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
     f40:	51 10       	cpse	r5, r1
     f42:	5a 94       	dec	r5
     f44:	01 50       	subi	r16, 0x01	; 1
     f46:	11 09       	sbc	r17, r1
     f48:	01 15       	cp	r16, r1
     f4a:	11 05       	cpc	r17, r1
     f4c:	79 f7       	brne	.-34     	; 0xf2c <vfprintf+0x478>
     f4e:	f7 c0       	rjmp	.+494    	; 0x113e <vfprintf+0x68a>
     f50:	84 36       	cpi	r24, 0x64	; 100
     f52:	11 f0       	breq	.+4      	; 0xf58 <vfprintf+0x4a4>
     f54:	89 36       	cpi	r24, 0x69	; 105
     f56:	61 f5       	brne	.+88     	; 0xfb0 <vfprintf+0x4fc>
     f58:	56 01       	movw	r10, r12
     f5a:	97 fe       	sbrs	r9, 7
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <vfprintf+0x4bc>
     f5e:	24 e0       	ldi	r18, 0x04	; 4
     f60:	a2 0e       	add	r10, r18
     f62:	b1 1c       	adc	r11, r1
     f64:	f6 01       	movw	r30, r12
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	0a c0       	rjmp	.+20     	; 0xf84 <vfprintf+0x4d0>
     f70:	f2 e0       	ldi	r31, 0x02	; 2
     f72:	af 0e       	add	r10, r31
     f74:	b1 1c       	adc	r11, r1
     f76:	f6 01       	movw	r30, r12
     f78:	60 81       	ld	r22, Z
     f7a:	71 81       	ldd	r23, Z+1	; 0x01
     f7c:	07 2e       	mov	r0, r23
     f7e:	00 0c       	add	r0, r0
     f80:	88 0b       	sbc	r24, r24
     f82:	99 0b       	sbc	r25, r25
     f84:	f9 2d       	mov	r31, r9
     f86:	ff 76       	andi	r31, 0x6F	; 111
     f88:	9f 2e       	mov	r9, r31
     f8a:	97 ff       	sbrs	r25, 7
     f8c:	09 c0       	rjmp	.+18     	; 0xfa0 <vfprintf+0x4ec>
     f8e:	90 95       	com	r25
     f90:	80 95       	com	r24
     f92:	70 95       	com	r23
     f94:	61 95       	neg	r22
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	f0 68       	ori	r31, 0x80	; 128
     f9e:	9f 2e       	mov	r9, r31
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	a3 01       	movw	r20, r6
     fa6:	0e 94 84 0a 	call	0x1508	; 0x1508 <__ultoa_invert>
     faa:	c8 2e       	mov	r12, r24
     fac:	c6 18       	sub	r12, r6
     fae:	3f c0       	rjmp	.+126    	; 0x102e <vfprintf+0x57a>
     fb0:	09 2d       	mov	r16, r9
     fb2:	85 37       	cpi	r24, 0x75	; 117
     fb4:	21 f4       	brne	.+8      	; 0xfbe <vfprintf+0x50a>
     fb6:	0f 7e       	andi	r16, 0xEF	; 239
     fb8:	2a e0       	ldi	r18, 0x0A	; 10
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	1d c0       	rjmp	.+58     	; 0xff8 <vfprintf+0x544>
     fbe:	09 7f       	andi	r16, 0xF9	; 249
     fc0:	8f 36       	cpi	r24, 0x6F	; 111
     fc2:	91 f0       	breq	.+36     	; 0xfe8 <vfprintf+0x534>
     fc4:	18 f4       	brcc	.+6      	; 0xfcc <vfprintf+0x518>
     fc6:	88 35       	cpi	r24, 0x58	; 88
     fc8:	59 f0       	breq	.+22     	; 0xfe0 <vfprintf+0x52c>
     fca:	c3 c0       	rjmp	.+390    	; 0x1152 <vfprintf+0x69e>
     fcc:	80 37       	cpi	r24, 0x70	; 112
     fce:	19 f0       	breq	.+6      	; 0xfd6 <vfprintf+0x522>
     fd0:	88 37       	cpi	r24, 0x78	; 120
     fd2:	11 f0       	breq	.+4      	; 0xfd8 <vfprintf+0x524>
     fd4:	be c0       	rjmp	.+380    	; 0x1152 <vfprintf+0x69e>
     fd6:	00 61       	ori	r16, 0x10	; 16
     fd8:	04 ff       	sbrs	r16, 4
     fda:	09 c0       	rjmp	.+18     	; 0xfee <vfprintf+0x53a>
     fdc:	04 60       	ori	r16, 0x04	; 4
     fde:	07 c0       	rjmp	.+14     	; 0xfee <vfprintf+0x53a>
     fe0:	94 fe       	sbrs	r9, 4
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <vfprintf+0x540>
     fe4:	06 60       	ori	r16, 0x06	; 6
     fe6:	06 c0       	rjmp	.+12     	; 0xff4 <vfprintf+0x540>
     fe8:	28 e0       	ldi	r18, 0x08	; 8
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	05 c0       	rjmp	.+10     	; 0xff8 <vfprintf+0x544>
     fee:	20 e1       	ldi	r18, 0x10	; 16
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x544>
     ff4:	20 e1       	ldi	r18, 0x10	; 16
     ff6:	32 e0       	ldi	r19, 0x02	; 2
     ff8:	56 01       	movw	r10, r12
     ffa:	07 ff       	sbrs	r16, 7
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <vfprintf+0x55c>
     ffe:	84 e0       	ldi	r24, 0x04	; 4
    1000:	a8 0e       	add	r10, r24
    1002:	b1 1c       	adc	r11, r1
    1004:	f6 01       	movw	r30, r12
    1006:	60 81       	ld	r22, Z
    1008:	71 81       	ldd	r23, Z+1	; 0x01
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	93 81       	ldd	r25, Z+3	; 0x03
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <vfprintf+0x56c>
    1010:	f2 e0       	ldi	r31, 0x02	; 2
    1012:	af 0e       	add	r10, r31
    1014:	b1 1c       	adc	r11, r1
    1016:	f6 01       	movw	r30, r12
    1018:	60 81       	ld	r22, Z
    101a:	71 81       	ldd	r23, Z+1	; 0x01
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	a3 01       	movw	r20, r6
    1022:	0e 94 84 0a 	call	0x1508	; 0x1508 <__ultoa_invert>
    1026:	c8 2e       	mov	r12, r24
    1028:	c6 18       	sub	r12, r6
    102a:	0f 77       	andi	r16, 0x7F	; 127
    102c:	90 2e       	mov	r9, r16
    102e:	96 fe       	sbrs	r9, 6
    1030:	0b c0       	rjmp	.+22     	; 0x1048 <vfprintf+0x594>
    1032:	09 2d       	mov	r16, r9
    1034:	0e 7f       	andi	r16, 0xFE	; 254
    1036:	c1 16       	cp	r12, r17
    1038:	50 f4       	brcc	.+20     	; 0x104e <vfprintf+0x59a>
    103a:	94 fe       	sbrs	r9, 4
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <vfprintf+0x59e>
    103e:	92 fc       	sbrc	r9, 2
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <vfprintf+0x59e>
    1042:	09 2d       	mov	r16, r9
    1044:	0e 7e       	andi	r16, 0xEE	; 238
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <vfprintf+0x59e>
    1048:	dc 2c       	mov	r13, r12
    104a:	09 2d       	mov	r16, r9
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <vfprintf+0x5a0>
    104e:	dc 2c       	mov	r13, r12
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <vfprintf+0x5a0>
    1052:	d1 2e       	mov	r13, r17
    1054:	04 ff       	sbrs	r16, 4
    1056:	0d c0       	rjmp	.+26     	; 0x1072 <vfprintf+0x5be>
    1058:	fe 01       	movw	r30, r28
    105a:	ec 0d       	add	r30, r12
    105c:	f1 1d       	adc	r31, r1
    105e:	80 81       	ld	r24, Z
    1060:	80 33       	cpi	r24, 0x30	; 48
    1062:	11 f4       	brne	.+4      	; 0x1068 <vfprintf+0x5b4>
    1064:	09 7e       	andi	r16, 0xE9	; 233
    1066:	09 c0       	rjmp	.+18     	; 0x107a <vfprintf+0x5c6>
    1068:	02 ff       	sbrs	r16, 2
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfprintf+0x5c4>
    106c:	d3 94       	inc	r13
    106e:	d3 94       	inc	r13
    1070:	04 c0       	rjmp	.+8      	; 0x107a <vfprintf+0x5c6>
    1072:	80 2f       	mov	r24, r16
    1074:	86 78       	andi	r24, 0x86	; 134
    1076:	09 f0       	breq	.+2      	; 0x107a <vfprintf+0x5c6>
    1078:	d3 94       	inc	r13
    107a:	03 fd       	sbrc	r16, 3
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <vfprintf+0x5ec>
    107e:	00 ff       	sbrs	r16, 0
    1080:	06 c0       	rjmp	.+12     	; 0x108e <vfprintf+0x5da>
    1082:	1c 2d       	mov	r17, r12
    1084:	d5 14       	cp	r13, r5
    1086:	80 f4       	brcc	.+32     	; 0x10a8 <vfprintf+0x5f4>
    1088:	15 0d       	add	r17, r5
    108a:	1d 19       	sub	r17, r13
    108c:	0d c0       	rjmp	.+26     	; 0x10a8 <vfprintf+0x5f4>
    108e:	d5 14       	cp	r13, r5
    1090:	58 f4       	brcc	.+22     	; 0x10a8 <vfprintf+0x5f4>
    1092:	b7 01       	movw	r22, r14
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    109c:	d3 94       	inc	r13
    109e:	f7 cf       	rjmp	.-18     	; 0x108e <vfprintf+0x5da>
    10a0:	d5 14       	cp	r13, r5
    10a2:	10 f4       	brcc	.+4      	; 0x10a8 <vfprintf+0x5f4>
    10a4:	5d 18       	sub	r5, r13
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <vfprintf+0x5f6>
    10a8:	51 2c       	mov	r5, r1
    10aa:	04 ff       	sbrs	r16, 4
    10ac:	10 c0       	rjmp	.+32     	; 0x10ce <vfprintf+0x61a>
    10ae:	b7 01       	movw	r22, r14
    10b0:	80 e3       	ldi	r24, 0x30	; 48
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    10b8:	02 ff       	sbrs	r16, 2
    10ba:	17 c0       	rjmp	.+46     	; 0x10ea <vfprintf+0x636>
    10bc:	01 fd       	sbrc	r16, 1
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <vfprintf+0x612>
    10c0:	88 e7       	ldi	r24, 0x78	; 120
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <vfprintf+0x616>
    10c6:	88 e5       	ldi	r24, 0x58	; 88
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	b7 01       	movw	r22, r14
    10cc:	0c c0       	rjmp	.+24     	; 0x10e6 <vfprintf+0x632>
    10ce:	80 2f       	mov	r24, r16
    10d0:	86 78       	andi	r24, 0x86	; 134
    10d2:	59 f0       	breq	.+22     	; 0x10ea <vfprintf+0x636>
    10d4:	01 ff       	sbrs	r16, 1
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <vfprintf+0x628>
    10d8:	8b e2       	ldi	r24, 0x2B	; 43
    10da:	01 c0       	rjmp	.+2      	; 0x10de <vfprintf+0x62a>
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	07 fd       	sbrc	r16, 7
    10e0:	8d e2       	ldi	r24, 0x2D	; 45
    10e2:	b7 01       	movw	r22, r14
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    10ea:	c1 16       	cp	r12, r17
    10ec:	38 f4       	brcc	.+14     	; 0x10fc <vfprintf+0x648>
    10ee:	b7 01       	movw	r22, r14
    10f0:	80 e3       	ldi	r24, 0x30	; 48
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    10f8:	11 50       	subi	r17, 0x01	; 1
    10fa:	f7 cf       	rjmp	.-18     	; 0x10ea <vfprintf+0x636>
    10fc:	ca 94       	dec	r12
    10fe:	f3 01       	movw	r30, r6
    1100:	ec 0d       	add	r30, r12
    1102:	f1 1d       	adc	r31, r1
    1104:	80 81       	ld	r24, Z
    1106:	b7 01       	movw	r22, r14
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    110e:	c1 10       	cpse	r12, r1
    1110:	f5 cf       	rjmp	.-22     	; 0x10fc <vfprintf+0x648>
    1112:	15 c0       	rjmp	.+42     	; 0x113e <vfprintf+0x68a>
    1114:	f4 e0       	ldi	r31, 0x04	; 4
    1116:	f5 15       	cp	r31, r5
    1118:	60 f5       	brcc	.+88     	; 0x1172 <vfprintf+0x6be>
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	58 1a       	sub	r5, r24
    111e:	93 fe       	sbrs	r9, 3
    1120:	1f c0       	rjmp	.+62     	; 0x1160 <vfprintf+0x6ac>
    1122:	01 11       	cpse	r16, r1
    1124:	27 c0       	rjmp	.+78     	; 0x1174 <vfprintf+0x6c0>
    1126:	2c 85       	ldd	r18, Y+12	; 0x0c
    1128:	23 ff       	sbrs	r18, 3
    112a:	2a c0       	rjmp	.+84     	; 0x1180 <vfprintf+0x6cc>
    112c:	04 e5       	ldi	r16, 0x54	; 84
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	39 2d       	mov	r19, r9
    1132:	30 71       	andi	r19, 0x10	; 16
    1134:	93 2e       	mov	r9, r19
    1136:	f8 01       	movw	r30, r16
    1138:	84 91       	lpm	r24, Z
    113a:	81 11       	cpse	r24, r1
    113c:	24 c0       	rjmp	.+72     	; 0x1186 <vfprintf+0x6d2>
    113e:	55 20       	and	r5, r5
    1140:	09 f4       	brne	.+2      	; 0x1144 <vfprintf+0x690>
    1142:	e4 cc       	rjmp	.-1592   	; 0xb0c <vfprintf+0x58>
    1144:	b7 01       	movw	r22, r14
    1146:	80 e2       	ldi	r24, 0x20	; 32
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    114e:	5a 94       	dec	r5
    1150:	f6 cf       	rjmp	.-20     	; 0x113e <vfprintf+0x68a>
    1152:	f7 01       	movw	r30, r14
    1154:	86 81       	ldd	r24, Z+6	; 0x06
    1156:	97 81       	ldd	r25, Z+7	; 0x07
    1158:	26 c0       	rjmp	.+76     	; 0x11a6 <vfprintf+0x6f2>
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	23 c0       	rjmp	.+70     	; 0x11a6 <vfprintf+0x6f2>
    1160:	b7 01       	movw	r22, r14
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    116a:	5a 94       	dec	r5
    116c:	51 10       	cpse	r5, r1
    116e:	f8 cf       	rjmp	.-16     	; 0x1160 <vfprintf+0x6ac>
    1170:	d8 cf       	rjmp	.-80     	; 0x1122 <vfprintf+0x66e>
    1172:	51 2c       	mov	r5, r1
    1174:	b7 01       	movw	r22, r14
    1176:	80 2f       	mov	r24, r16
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    117e:	d3 cf       	rjmp	.-90     	; 0x1126 <vfprintf+0x672>
    1180:	08 e5       	ldi	r16, 0x58	; 88
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	d5 cf       	rjmp	.-86     	; 0x1130 <vfprintf+0x67c>
    1186:	91 10       	cpse	r9, r1
    1188:	80 52       	subi	r24, 0x20	; 32
    118a:	b7 01       	movw	r22, r14
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 26 0a 	call	0x144c	; 0x144c <fputc>
    1192:	0f 5f       	subi	r16, 0xFF	; 255
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	cf cf       	rjmp	.-98     	; 0x1136 <vfprintf+0x682>
    1198:	23 e0       	ldi	r18, 0x03	; 3
    119a:	25 15       	cp	r18, r5
    119c:	10 f4       	brcc	.+4      	; 0x11a2 <vfprintf+0x6ee>
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	bd cf       	rjmp	.-134    	; 0x111c <vfprintf+0x668>
    11a2:	51 2c       	mov	r5, r1
    11a4:	c0 cf       	rjmp	.-128    	; 0x1126 <vfprintf+0x672>
    11a6:	60 96       	adiw	r28, 0x10	; 16
    11a8:	e2 e1       	ldi	r30, 0x12	; 18
    11aa:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__epilogue_restores__>

000011ae <__prologue_saves__>:
    11ae:	2f 92       	push	r2
    11b0:	3f 92       	push	r3
    11b2:	4f 92       	push	r4
    11b4:	5f 92       	push	r5
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	ca 1b       	sub	r28, r26
    11d8:	db 0b       	sbc	r29, r27
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	09 94       	ijmp

000011e6 <__epilogue_restores__>:
    11e6:	2a 88       	ldd	r2, Y+18	; 0x12
    11e8:	39 88       	ldd	r3, Y+17	; 0x11
    11ea:	48 88       	ldd	r4, Y+16	; 0x10
    11ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    11ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    11f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    11f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    11f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    11f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    11f8:	b9 84       	ldd	r11, Y+9	; 0x09
    11fa:	c8 84       	ldd	r12, Y+8	; 0x08
    11fc:	df 80       	ldd	r13, Y+7	; 0x07
    11fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1200:	fd 80       	ldd	r15, Y+5	; 0x05
    1202:	0c 81       	ldd	r16, Y+4	; 0x04
    1204:	1b 81       	ldd	r17, Y+3	; 0x03
    1206:	aa 81       	ldd	r26, Y+2	; 0x02
    1208:	b9 81       	ldd	r27, Y+1	; 0x01
    120a:	ce 0f       	add	r28, r30
    120c:	d1 1d       	adc	r29, r1
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	ed 01       	movw	r28, r26
    121a:	08 95       	ret

0000121c <atof>:
    121c:	66 27       	eor	r22, r22
    121e:	77 27       	eor	r23, r23
    1220:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <strtod>

00001224 <atoi>:
    1224:	fc 01       	movw	r30, r24
    1226:	88 27       	eor	r24, r24
    1228:	99 27       	eor	r25, r25
    122a:	e8 94       	clt
    122c:	21 91       	ld	r18, Z+
    122e:	20 32       	cpi	r18, 0x20	; 32
    1230:	e9 f3       	breq	.-6      	; 0x122c <atoi+0x8>
    1232:	29 30       	cpi	r18, 0x09	; 9
    1234:	10 f0       	brcs	.+4      	; 0x123a <atoi+0x16>
    1236:	2e 30       	cpi	r18, 0x0E	; 14
    1238:	c8 f3       	brcs	.-14     	; 0x122c <atoi+0x8>
    123a:	2b 32       	cpi	r18, 0x2B	; 43
    123c:	41 f0       	breq	.+16     	; 0x124e <atoi+0x2a>
    123e:	2d 32       	cpi	r18, 0x2D	; 45
    1240:	39 f4       	brne	.+14     	; 0x1250 <atoi+0x2c>
    1242:	68 94       	set
    1244:	04 c0       	rjmp	.+8      	; 0x124e <atoi+0x2a>
    1246:	0e 94 1e 0a 	call	0x143c	; 0x143c <__mulhi_const_10>
    124a:	82 0f       	add	r24, r18
    124c:	91 1d       	adc	r25, r1
    124e:	21 91       	ld	r18, Z+
    1250:	20 53       	subi	r18, 0x30	; 48
    1252:	2a 30       	cpi	r18, 0x0A	; 10
    1254:	c0 f3       	brcs	.-16     	; 0x1246 <atoi+0x22>
    1256:	1e f4       	brtc	.+6      	; 0x125e <atoi+0x3a>
    1258:	90 95       	com	r25
    125a:	81 95       	neg	r24
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	08 95       	ret

00001260 <__ftoa_engine>:
    1260:	28 30       	cpi	r18, 0x08	; 8
    1262:	08 f0       	brcs	.+2      	; 0x1266 <__ftoa_engine+0x6>
    1264:	27 e0       	ldi	r18, 0x07	; 7
    1266:	33 27       	eor	r19, r19
    1268:	da 01       	movw	r26, r20
    126a:	99 0f       	add	r25, r25
    126c:	31 1d       	adc	r19, r1
    126e:	87 fd       	sbrc	r24, 7
    1270:	91 60       	ori	r25, 0x01	; 1
    1272:	00 96       	adiw	r24, 0x00	; 0
    1274:	61 05       	cpc	r22, r1
    1276:	71 05       	cpc	r23, r1
    1278:	39 f4       	brne	.+14     	; 0x1288 <__ftoa_engine+0x28>
    127a:	32 60       	ori	r19, 0x02	; 2
    127c:	2e 5f       	subi	r18, 0xFE	; 254
    127e:	3d 93       	st	X+, r19
    1280:	30 e3       	ldi	r19, 0x30	; 48
    1282:	2a 95       	dec	r18
    1284:	e1 f7       	brne	.-8      	; 0x127e <__ftoa_engine+0x1e>
    1286:	08 95       	ret
    1288:	9f 3f       	cpi	r25, 0xFF	; 255
    128a:	30 f0       	brcs	.+12     	; 0x1298 <__ftoa_engine+0x38>
    128c:	80 38       	cpi	r24, 0x80	; 128
    128e:	71 05       	cpc	r23, r1
    1290:	61 05       	cpc	r22, r1
    1292:	09 f0       	breq	.+2      	; 0x1296 <__ftoa_engine+0x36>
    1294:	3c 5f       	subi	r19, 0xFC	; 252
    1296:	3c 5f       	subi	r19, 0xFC	; 252
    1298:	3d 93       	st	X+, r19
    129a:	91 30       	cpi	r25, 0x01	; 1
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <__ftoa_engine+0x40>
    129e:	80 68       	ori	r24, 0x80	; 128
    12a0:	91 1d       	adc	r25, r1
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	1f 93       	push	r17
    12a8:	0f 93       	push	r16
    12aa:	ff 92       	push	r15
    12ac:	ef 92       	push	r14
    12ae:	19 2f       	mov	r17, r25
    12b0:	98 7f       	andi	r25, 0xF8	; 248
    12b2:	96 95       	lsr	r25
    12b4:	e9 2f       	mov	r30, r25
    12b6:	96 95       	lsr	r25
    12b8:	96 95       	lsr	r25
    12ba:	e9 0f       	add	r30, r25
    12bc:	ff 27       	eor	r31, r31
    12be:	ea 54       	subi	r30, 0x4A	; 74
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	99 27       	eor	r25, r25
    12c4:	33 27       	eor	r19, r19
    12c6:	ee 24       	eor	r14, r14
    12c8:	ff 24       	eor	r15, r15
    12ca:	a7 01       	movw	r20, r14
    12cc:	e7 01       	movw	r28, r14
    12ce:	05 90       	lpm	r0, Z+
    12d0:	08 94       	sec
    12d2:	07 94       	ror	r0
    12d4:	28 f4       	brcc	.+10     	; 0x12e0 <__ftoa_engine+0x80>
    12d6:	36 0f       	add	r19, r22
    12d8:	e7 1e       	adc	r14, r23
    12da:	f8 1e       	adc	r15, r24
    12dc:	49 1f       	adc	r20, r25
    12de:	51 1d       	adc	r21, r1
    12e0:	66 0f       	add	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	06 94       	lsr	r0
    12ea:	a1 f7       	brne	.-24     	; 0x12d4 <__ftoa_engine+0x74>
    12ec:	05 90       	lpm	r0, Z+
    12ee:	07 94       	ror	r0
    12f0:	28 f4       	brcc	.+10     	; 0x12fc <__ftoa_engine+0x9c>
    12f2:	e7 0e       	add	r14, r23
    12f4:	f8 1e       	adc	r15, r24
    12f6:	49 1f       	adc	r20, r25
    12f8:	56 1f       	adc	r21, r22
    12fa:	c1 1d       	adc	r28, r1
    12fc:	77 0f       	add	r23, r23
    12fe:	88 1f       	adc	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	66 1f       	adc	r22, r22
    1304:	06 94       	lsr	r0
    1306:	a1 f7       	brne	.-24     	; 0x12f0 <__ftoa_engine+0x90>
    1308:	05 90       	lpm	r0, Z+
    130a:	07 94       	ror	r0
    130c:	28 f4       	brcc	.+10     	; 0x1318 <__ftoa_engine+0xb8>
    130e:	f8 0e       	add	r15, r24
    1310:	49 1f       	adc	r20, r25
    1312:	56 1f       	adc	r21, r22
    1314:	c7 1f       	adc	r28, r23
    1316:	d1 1d       	adc	r29, r1
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	66 1f       	adc	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	06 94       	lsr	r0
    1322:	a1 f7       	brne	.-24     	; 0x130c <__ftoa_engine+0xac>
    1324:	05 90       	lpm	r0, Z+
    1326:	07 94       	ror	r0
    1328:	20 f4       	brcc	.+8      	; 0x1332 <__ftoa_engine+0xd2>
    132a:	49 0f       	add	r20, r25
    132c:	56 1f       	adc	r21, r22
    132e:	c7 1f       	adc	r28, r23
    1330:	d8 1f       	adc	r29, r24
    1332:	99 0f       	add	r25, r25
    1334:	66 1f       	adc	r22, r22
    1336:	77 1f       	adc	r23, r23
    1338:	88 1f       	adc	r24, r24
    133a:	06 94       	lsr	r0
    133c:	a9 f7       	brne	.-22     	; 0x1328 <__ftoa_engine+0xc8>
    133e:	84 91       	lpm	r24, Z
    1340:	10 95       	com	r17
    1342:	17 70       	andi	r17, 0x07	; 7
    1344:	41 f0       	breq	.+16     	; 0x1356 <__ftoa_engine+0xf6>
    1346:	d6 95       	lsr	r29
    1348:	c7 95       	ror	r28
    134a:	57 95       	ror	r21
    134c:	47 95       	ror	r20
    134e:	f7 94       	ror	r15
    1350:	e7 94       	ror	r14
    1352:	1a 95       	dec	r17
    1354:	c1 f7       	brne	.-16     	; 0x1346 <__ftoa_engine+0xe6>
    1356:	ec e5       	ldi	r30, 0x5C	; 92
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	68 94       	set
    135c:	15 90       	lpm	r1, Z+
    135e:	15 91       	lpm	r17, Z+
    1360:	35 91       	lpm	r19, Z+
    1362:	65 91       	lpm	r22, Z+
    1364:	95 91       	lpm	r25, Z+
    1366:	05 90       	lpm	r0, Z+
    1368:	7f e2       	ldi	r23, 0x2F	; 47
    136a:	73 95       	inc	r23
    136c:	e1 18       	sub	r14, r1
    136e:	f1 0a       	sbc	r15, r17
    1370:	43 0b       	sbc	r20, r19
    1372:	56 0b       	sbc	r21, r22
    1374:	c9 0b       	sbc	r28, r25
    1376:	d0 09       	sbc	r29, r0
    1378:	c0 f7       	brcc	.-16     	; 0x136a <__ftoa_engine+0x10a>
    137a:	e1 0c       	add	r14, r1
    137c:	f1 1e       	adc	r15, r17
    137e:	43 1f       	adc	r20, r19
    1380:	56 1f       	adc	r21, r22
    1382:	c9 1f       	adc	r28, r25
    1384:	d0 1d       	adc	r29, r0
    1386:	7e f4       	brtc	.+30     	; 0x13a6 <__ftoa_engine+0x146>
    1388:	70 33       	cpi	r23, 0x30	; 48
    138a:	11 f4       	brne	.+4      	; 0x1390 <__ftoa_engine+0x130>
    138c:	8a 95       	dec	r24
    138e:	e6 cf       	rjmp	.-52     	; 0x135c <__ftoa_engine+0xfc>
    1390:	e8 94       	clt
    1392:	01 50       	subi	r16, 0x01	; 1
    1394:	30 f0       	brcs	.+12     	; 0x13a2 <__ftoa_engine+0x142>
    1396:	08 0f       	add	r16, r24
    1398:	0a f4       	brpl	.+2      	; 0x139c <__ftoa_engine+0x13c>
    139a:	00 27       	eor	r16, r16
    139c:	02 17       	cp	r16, r18
    139e:	08 f4       	brcc	.+2      	; 0x13a2 <__ftoa_engine+0x142>
    13a0:	20 2f       	mov	r18, r16
    13a2:	23 95       	inc	r18
    13a4:	02 2f       	mov	r16, r18
    13a6:	7a 33       	cpi	r23, 0x3A	; 58
    13a8:	28 f0       	brcs	.+10     	; 0x13b4 <__ftoa_engine+0x154>
    13aa:	79 e3       	ldi	r23, 0x39	; 57
    13ac:	7d 93       	st	X+, r23
    13ae:	2a 95       	dec	r18
    13b0:	e9 f7       	brne	.-6      	; 0x13ac <__ftoa_engine+0x14c>
    13b2:	10 c0       	rjmp	.+32     	; 0x13d4 <__ftoa_engine+0x174>
    13b4:	7d 93       	st	X+, r23
    13b6:	2a 95       	dec	r18
    13b8:	89 f6       	brne	.-94     	; 0x135c <__ftoa_engine+0xfc>
    13ba:	06 94       	lsr	r0
    13bc:	97 95       	ror	r25
    13be:	67 95       	ror	r22
    13c0:	37 95       	ror	r19
    13c2:	17 95       	ror	r17
    13c4:	17 94       	ror	r1
    13c6:	e1 18       	sub	r14, r1
    13c8:	f1 0a       	sbc	r15, r17
    13ca:	43 0b       	sbc	r20, r19
    13cc:	56 0b       	sbc	r21, r22
    13ce:	c9 0b       	sbc	r28, r25
    13d0:	d0 09       	sbc	r29, r0
    13d2:	98 f0       	brcs	.+38     	; 0x13fa <__ftoa_engine+0x19a>
    13d4:	23 95       	inc	r18
    13d6:	7e 91       	ld	r23, -X
    13d8:	73 95       	inc	r23
    13da:	7a 33       	cpi	r23, 0x3A	; 58
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <__ftoa_engine+0x180>
    13de:	70 e3       	ldi	r23, 0x30	; 48
    13e0:	7c 93       	st	X, r23
    13e2:	20 13       	cpse	r18, r16
    13e4:	b8 f7       	brcc	.-18     	; 0x13d4 <__ftoa_engine+0x174>
    13e6:	7e 91       	ld	r23, -X
    13e8:	70 61       	ori	r23, 0x10	; 16
    13ea:	7d 93       	st	X+, r23
    13ec:	30 f0       	brcs	.+12     	; 0x13fa <__ftoa_engine+0x19a>
    13ee:	83 95       	inc	r24
    13f0:	71 e3       	ldi	r23, 0x31	; 49
    13f2:	7d 93       	st	X+, r23
    13f4:	70 e3       	ldi	r23, 0x30	; 48
    13f6:	2a 95       	dec	r18
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <__ftoa_engine+0x192>
    13fa:	11 24       	eor	r1, r1
    13fc:	ef 90       	pop	r14
    13fe:	ff 90       	pop	r15
    1400:	0f 91       	pop	r16
    1402:	1f 91       	pop	r17
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	99 27       	eor	r25, r25
    140a:	87 fd       	sbrc	r24, 7
    140c:	90 95       	com	r25
    140e:	08 95       	ret

00001410 <strnlen_P>:
    1410:	fc 01       	movw	r30, r24
    1412:	05 90       	lpm	r0, Z+
    1414:	61 50       	subi	r22, 0x01	; 1
    1416:	70 40       	sbci	r23, 0x00	; 0
    1418:	01 10       	cpse	r0, r1
    141a:	d8 f7       	brcc	.-10     	; 0x1412 <strnlen_P+0x2>
    141c:	80 95       	com	r24
    141e:	90 95       	com	r25
    1420:	8e 0f       	add	r24, r30
    1422:	9f 1f       	adc	r25, r31
    1424:	08 95       	ret

00001426 <strnlen>:
    1426:	fc 01       	movw	r30, r24
    1428:	61 50       	subi	r22, 0x01	; 1
    142a:	70 40       	sbci	r23, 0x00	; 0
    142c:	01 90       	ld	r0, Z+
    142e:	01 10       	cpse	r0, r1
    1430:	d8 f7       	brcc	.-10     	; 0x1428 <strnlen+0x2>
    1432:	80 95       	com	r24
    1434:	90 95       	com	r25
    1436:	8e 0f       	add	r24, r30
    1438:	9f 1f       	adc	r25, r31
    143a:	08 95       	ret

0000143c <__mulhi_const_10>:
    143c:	7a e0       	ldi	r23, 0x0A	; 10
    143e:	97 9f       	mul	r25, r23
    1440:	90 2d       	mov	r25, r0
    1442:	87 9f       	mul	r24, r23
    1444:	80 2d       	mov	r24, r0
    1446:	91 0d       	add	r25, r1
    1448:	11 24       	eor	r1, r1
    144a:	08 95       	ret

0000144c <fputc>:
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	fb 01       	movw	r30, r22
    1456:	23 81       	ldd	r18, Z+3	; 0x03
    1458:	21 fd       	sbrc	r18, 1
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <fputc+0x16>
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255
    1460:	2c c0       	rjmp	.+88     	; 0x14ba <fputc+0x6e>
    1462:	22 ff       	sbrs	r18, 2
    1464:	16 c0       	rjmp	.+44     	; 0x1492 <fputc+0x46>
    1466:	46 81       	ldd	r20, Z+6	; 0x06
    1468:	57 81       	ldd	r21, Z+7	; 0x07
    146a:	24 81       	ldd	r18, Z+4	; 0x04
    146c:	35 81       	ldd	r19, Z+5	; 0x05
    146e:	42 17       	cp	r20, r18
    1470:	53 07       	cpc	r21, r19
    1472:	44 f4       	brge	.+16     	; 0x1484 <fputc+0x38>
    1474:	a0 81       	ld	r26, Z
    1476:	b1 81       	ldd	r27, Z+1	; 0x01
    1478:	9d 01       	movw	r18, r26
    147a:	2f 5f       	subi	r18, 0xFF	; 255
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	31 83       	std	Z+1, r19	; 0x01
    1480:	20 83       	st	Z, r18
    1482:	8c 93       	st	X, r24
    1484:	26 81       	ldd	r18, Z+6	; 0x06
    1486:	37 81       	ldd	r19, Z+7	; 0x07
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	37 83       	std	Z+7, r19	; 0x07
    148e:	26 83       	std	Z+6, r18	; 0x06
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <fputc+0x6e>
    1492:	8b 01       	movw	r16, r22
    1494:	ec 01       	movw	r28, r24
    1496:	fb 01       	movw	r30, r22
    1498:	00 84       	ldd	r0, Z+8	; 0x08
    149a:	f1 85       	ldd	r31, Z+9	; 0x09
    149c:	e0 2d       	mov	r30, r0
    149e:	09 95       	icall
    14a0:	89 2b       	or	r24, r25
    14a2:	e1 f6       	brne	.-72     	; 0x145c <fputc+0x10>
    14a4:	d8 01       	movw	r26, r16
    14a6:	16 96       	adiw	r26, 0x06	; 6
    14a8:	8d 91       	ld	r24, X+
    14aa:	9c 91       	ld	r25, X
    14ac:	17 97       	sbiw	r26, 0x07	; 7
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	17 96       	adiw	r26, 0x07	; 7
    14b2:	9c 93       	st	X, r25
    14b4:	8e 93       	st	-X, r24
    14b6:	16 97       	sbiw	r26, 0x06	; 6
    14b8:	ce 01       	movw	r24, r28
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <sprintf>:
    14c4:	ae e0       	ldi	r26, 0x0E	; 14
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e8 e6       	ldi	r30, 0x68	; 104
    14ca:	fa e0       	ldi	r31, 0x0A	; 10
    14cc:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__prologue_saves__+0x1c>
    14d0:	0d 89       	ldd	r16, Y+21	; 0x15
    14d2:	1e 89       	ldd	r17, Y+22	; 0x16
    14d4:	86 e0       	ldi	r24, 0x06	; 6
    14d6:	8c 83       	std	Y+4, r24	; 0x04
    14d8:	1a 83       	std	Y+2, r17	; 0x02
    14da:	09 83       	std	Y+1, r16	; 0x01
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	9f e7       	ldi	r25, 0x7F	; 127
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	ae 01       	movw	r20, r28
    14e6:	47 5e       	subi	r20, 0xE7	; 231
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	6f 89       	ldd	r22, Y+23	; 0x17
    14ec:	78 8d       	ldd	r23, Y+24	; 0x18
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	0e 94 5a 05 	call	0xab4	; 0xab4 <vfprintf>
    14f6:	ef 81       	ldd	r30, Y+7	; 0x07
    14f8:	f8 85       	ldd	r31, Y+8	; 0x08
    14fa:	e0 0f       	add	r30, r16
    14fc:	f1 1f       	adc	r31, r17
    14fe:	10 82       	st	Z, r1
    1500:	2e 96       	adiw	r28, 0x0e	; 14
    1502:	e4 e0       	ldi	r30, 0x04	; 4
    1504:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__epilogue_restores__+0x1c>

00001508 <__ultoa_invert>:
    1508:	fa 01       	movw	r30, r20
    150a:	aa 27       	eor	r26, r26
    150c:	28 30       	cpi	r18, 0x08	; 8
    150e:	51 f1       	breq	.+84     	; 0x1564 <__ultoa_invert+0x5c>
    1510:	20 31       	cpi	r18, 0x10	; 16
    1512:	81 f1       	breq	.+96     	; 0x1574 <__ultoa_invert+0x6c>
    1514:	e8 94       	clt
    1516:	6f 93       	push	r22
    1518:	6e 7f       	andi	r22, 0xFE	; 254
    151a:	6e 5f       	subi	r22, 0xFE	; 254
    151c:	7f 4f       	sbci	r23, 0xFF	; 255
    151e:	8f 4f       	sbci	r24, 0xFF	; 255
    1520:	9f 4f       	sbci	r25, 0xFF	; 255
    1522:	af 4f       	sbci	r26, 0xFF	; 255
    1524:	b1 e0       	ldi	r27, 0x01	; 1
    1526:	3e d0       	rcall	.+124    	; 0x15a4 <__ultoa_invert+0x9c>
    1528:	b4 e0       	ldi	r27, 0x04	; 4
    152a:	3c d0       	rcall	.+120    	; 0x15a4 <__ultoa_invert+0x9c>
    152c:	67 0f       	add	r22, r23
    152e:	78 1f       	adc	r23, r24
    1530:	89 1f       	adc	r24, r25
    1532:	9a 1f       	adc	r25, r26
    1534:	a1 1d       	adc	r26, r1
    1536:	68 0f       	add	r22, r24
    1538:	79 1f       	adc	r23, r25
    153a:	8a 1f       	adc	r24, r26
    153c:	91 1d       	adc	r25, r1
    153e:	a1 1d       	adc	r26, r1
    1540:	6a 0f       	add	r22, r26
    1542:	71 1d       	adc	r23, r1
    1544:	81 1d       	adc	r24, r1
    1546:	91 1d       	adc	r25, r1
    1548:	a1 1d       	adc	r26, r1
    154a:	20 d0       	rcall	.+64     	; 0x158c <__ultoa_invert+0x84>
    154c:	09 f4       	brne	.+2      	; 0x1550 <__ultoa_invert+0x48>
    154e:	68 94       	set
    1550:	3f 91       	pop	r19
    1552:	2a e0       	ldi	r18, 0x0A	; 10
    1554:	26 9f       	mul	r18, r22
    1556:	11 24       	eor	r1, r1
    1558:	30 19       	sub	r19, r0
    155a:	30 5d       	subi	r19, 0xD0	; 208
    155c:	31 93       	st	Z+, r19
    155e:	de f6       	brtc	.-74     	; 0x1516 <__ultoa_invert+0xe>
    1560:	cf 01       	movw	r24, r30
    1562:	08 95       	ret
    1564:	46 2f       	mov	r20, r22
    1566:	47 70       	andi	r20, 0x07	; 7
    1568:	40 5d       	subi	r20, 0xD0	; 208
    156a:	41 93       	st	Z+, r20
    156c:	b3 e0       	ldi	r27, 0x03	; 3
    156e:	0f d0       	rcall	.+30     	; 0x158e <__ultoa_invert+0x86>
    1570:	c9 f7       	brne	.-14     	; 0x1564 <__ultoa_invert+0x5c>
    1572:	f6 cf       	rjmp	.-20     	; 0x1560 <__ultoa_invert+0x58>
    1574:	46 2f       	mov	r20, r22
    1576:	4f 70       	andi	r20, 0x0F	; 15
    1578:	40 5d       	subi	r20, 0xD0	; 208
    157a:	4a 33       	cpi	r20, 0x3A	; 58
    157c:	18 f0       	brcs	.+6      	; 0x1584 <__ultoa_invert+0x7c>
    157e:	49 5d       	subi	r20, 0xD9	; 217
    1580:	31 fd       	sbrc	r19, 1
    1582:	40 52       	subi	r20, 0x20	; 32
    1584:	41 93       	st	Z+, r20
    1586:	02 d0       	rcall	.+4      	; 0x158c <__ultoa_invert+0x84>
    1588:	a9 f7       	brne	.-22     	; 0x1574 <__ultoa_invert+0x6c>
    158a:	ea cf       	rjmp	.-44     	; 0x1560 <__ultoa_invert+0x58>
    158c:	b4 e0       	ldi	r27, 0x04	; 4
    158e:	a6 95       	lsr	r26
    1590:	97 95       	ror	r25
    1592:	87 95       	ror	r24
    1594:	77 95       	ror	r23
    1596:	67 95       	ror	r22
    1598:	ba 95       	dec	r27
    159a:	c9 f7       	brne	.-14     	; 0x158e <__ultoa_invert+0x86>
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	61 05       	cpc	r22, r1
    15a0:	71 05       	cpc	r23, r1
    15a2:	08 95       	ret
    15a4:	9b 01       	movw	r18, r22
    15a6:	ac 01       	movw	r20, r24
    15a8:	0a 2e       	mov	r0, r26
    15aa:	06 94       	lsr	r0
    15ac:	57 95       	ror	r21
    15ae:	47 95       	ror	r20
    15b0:	37 95       	ror	r19
    15b2:	27 95       	ror	r18
    15b4:	ba 95       	dec	r27
    15b6:	c9 f7       	brne	.-14     	; 0x15aa <__ultoa_invert+0xa2>
    15b8:	62 0f       	add	r22, r18
    15ba:	73 1f       	adc	r23, r19
    15bc:	84 1f       	adc	r24, r20
    15be:	95 1f       	adc	r25, r21
    15c0:	a0 1d       	adc	r26, r0
    15c2:	08 95       	ret

000015c4 <strtod>:
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 ee       	ldi	r30, 0xE8	; 232
    15ca:	fa e0       	ldi	r31, 0x0A	; 10
    15cc:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__prologue_saves__+0xc>
    15d0:	ec 01       	movw	r28, r24
    15d2:	6b 01       	movw	r12, r22
    15d4:	61 15       	cp	r22, r1
    15d6:	71 05       	cpc	r23, r1
    15d8:	19 f0       	breq	.+6      	; 0x15e0 <strtod+0x1c>
    15da:	fb 01       	movw	r30, r22
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
    15e0:	7e 01       	movw	r14, r28
    15e2:	ff ef       	ldi	r31, 0xFF	; 255
    15e4:	ef 1a       	sub	r14, r31
    15e6:	ff 0a       	sbc	r15, r31
    15e8:	08 81       	ld	r16, Y
    15ea:	80 2f       	mov	r24, r16
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 30 0c 	call	0x1860	; 0x1860 <isspace>
    15f2:	89 2b       	or	r24, r25
    15f4:	11 f0       	breq	.+4      	; 0x15fa <strtod+0x36>
    15f6:	e7 01       	movw	r28, r14
    15f8:	f3 cf       	rjmp	.-26     	; 0x15e0 <strtod+0x1c>
    15fa:	0d 32       	cpi	r16, 0x2D	; 45
    15fc:	39 f4       	brne	.+14     	; 0x160c <strtod+0x48>
    15fe:	7e 01       	movw	r14, r28
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	e8 0e       	add	r14, r24
    1604:	f1 1c       	adc	r15, r1
    1606:	09 81       	ldd	r16, Y+1	; 0x01
    1608:	11 e0       	ldi	r17, 0x01	; 1
    160a:	08 c0       	rjmp	.+16     	; 0x161c <strtod+0x58>
    160c:	0b 32       	cpi	r16, 0x2B	; 43
    160e:	29 f4       	brne	.+10     	; 0x161a <strtod+0x56>
    1610:	7e 01       	movw	r14, r28
    1612:	92 e0       	ldi	r25, 0x02	; 2
    1614:	e9 0e       	add	r14, r25
    1616:	f1 1c       	adc	r15, r1
    1618:	09 81       	ldd	r16, Y+1	; 0x01
    161a:	10 e0       	ldi	r17, 0x00	; 0
    161c:	e7 01       	movw	r28, r14
    161e:	21 97       	sbiw	r28, 0x01	; 1
    1620:	43 e0       	ldi	r20, 0x03	; 3
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	6e e5       	ldi	r22, 0x5E	; 94
    1626:	71 e0       	ldi	r23, 0x01	; 1
    1628:	ce 01       	movw	r24, r28
    162a:	0e 94 39 0c 	call	0x1872	; 0x1872 <strncasecmp_P>
    162e:	89 2b       	or	r24, r25
    1630:	c1 f4       	brne	.+48     	; 0x1662 <strtod+0x9e>
    1632:	23 96       	adiw	r28, 0x03	; 3
    1634:	45 e0       	ldi	r20, 0x05	; 5
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	69 e5       	ldi	r22, 0x59	; 89
    163a:	71 e0       	ldi	r23, 0x01	; 1
    163c:	ce 01       	movw	r24, r28
    163e:	0e 94 39 0c 	call	0x1872	; 0x1872 <strncasecmp_P>
    1642:	89 2b       	or	r24, r25
    1644:	09 f4       	brne	.+2      	; 0x1648 <strtod+0x84>
    1646:	25 96       	adiw	r28, 0x05	; 5
    1648:	c1 14       	cp	r12, r1
    164a:	d1 04       	cpc	r13, r1
    164c:	19 f0       	breq	.+6      	; 0x1654 <strtod+0x90>
    164e:	f6 01       	movw	r30, r12
    1650:	d1 83       	std	Z+1, r29	; 0x01
    1652:	c0 83       	st	Z, r28
    1654:	11 11       	cpse	r17, r1
    1656:	f6 c0       	rjmp	.+492    	; 0x1844 <strtod+0x280>
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	80 e8       	ldi	r24, 0x80	; 128
    165e:	9f e7       	ldi	r25, 0x7F	; 127
    1660:	fa c0       	rjmp	.+500    	; 0x1856 <strtod+0x292>
    1662:	43 e0       	ldi	r20, 0x03	; 3
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	66 e5       	ldi	r22, 0x56	; 86
    1668:	71 e0       	ldi	r23, 0x01	; 1
    166a:	ce 01       	movw	r24, r28
    166c:	0e 94 39 0c 	call	0x1872	; 0x1872 <strncasecmp_P>
    1670:	89 2b       	or	r24, r25
    1672:	59 f4       	brne	.+22     	; 0x168a <strtod+0xc6>
    1674:	c1 14       	cp	r12, r1
    1676:	d1 04       	cpc	r13, r1
    1678:	09 f4       	brne	.+2      	; 0x167c <strtod+0xb8>
    167a:	e9 c0       	rjmp	.+466    	; 0x184e <strtod+0x28a>
    167c:	f2 e0       	ldi	r31, 0x02	; 2
    167e:	ef 0e       	add	r14, r31
    1680:	f1 1c       	adc	r15, r1
    1682:	f6 01       	movw	r30, r12
    1684:	f1 82       	std	Z+1, r15	; 0x01
    1686:	e0 82       	st	Z, r14
    1688:	e2 c0       	rjmp	.+452    	; 0x184e <strtod+0x28a>
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	a9 01       	movw	r20, r18
    1690:	c0 e0       	ldi	r28, 0x00	; 0
    1692:	d0 e0       	ldi	r29, 0x00	; 0
    1694:	f7 01       	movw	r30, r14
    1696:	80 ed       	ldi	r24, 0xD0	; 208
    1698:	a8 2e       	mov	r10, r24
    169a:	a0 0e       	add	r10, r16
    169c:	89 e0       	ldi	r24, 0x09	; 9
    169e:	8a 15       	cp	r24, r10
    16a0:	30 f1       	brcs	.+76     	; 0x16ee <strtod+0x12a>
    16a2:	91 2f       	mov	r25, r17
    16a4:	92 60       	ori	r25, 0x02	; 2
    16a6:	b9 2e       	mov	r11, r25
    16a8:	81 2f       	mov	r24, r17
    16aa:	88 70       	andi	r24, 0x08	; 8
    16ac:	12 ff       	sbrs	r17, 2
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <strtod+0xf4>
    16b0:	81 11       	cpse	r24, r1
    16b2:	24 c0       	rjmp	.+72     	; 0x16fc <strtod+0x138>
    16b4:	21 96       	adiw	r28, 0x01	; 1
    16b6:	22 c0       	rjmp	.+68     	; 0x16fc <strtod+0x138>
    16b8:	81 11       	cpse	r24, r1
    16ba:	21 97       	sbiw	r28, 0x01	; 1
    16bc:	a5 e0       	ldi	r26, 0x05	; 5
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__muluhisi3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	aa 1f       	adc	r26, r26
    16ce:	bb 1f       	adc	r27, r27
    16d0:	9c 01       	movw	r18, r24
    16d2:	ad 01       	movw	r20, r26
    16d4:	2a 0d       	add	r18, r10
    16d6:	31 1d       	adc	r19, r1
    16d8:	41 1d       	adc	r20, r1
    16da:	51 1d       	adc	r21, r1
    16dc:	28 39       	cpi	r18, 0x98	; 152
    16de:	89 e9       	ldi	r24, 0x99	; 153
    16e0:	38 07       	cpc	r19, r24
    16e2:	48 07       	cpc	r20, r24
    16e4:	89 e1       	ldi	r24, 0x19	; 25
    16e6:	58 07       	cpc	r21, r24
    16e8:	48 f0       	brcs	.+18     	; 0x16fc <strtod+0x138>
    16ea:	16 60       	ori	r17, 0x06	; 6
    16ec:	06 c0       	rjmp	.+12     	; 0x16fa <strtod+0x136>
    16ee:	9e ef       	ldi	r25, 0xFE	; 254
    16f0:	a9 12       	cpse	r10, r25
    16f2:	0a c0       	rjmp	.+20     	; 0x1708 <strtod+0x144>
    16f4:	13 fd       	sbrc	r17, 3
    16f6:	40 c0       	rjmp	.+128    	; 0x1778 <strtod+0x1b4>
    16f8:	18 60       	ori	r17, 0x08	; 8
    16fa:	b1 2e       	mov	r11, r17
    16fc:	8f ef       	ldi	r24, 0xFF	; 255
    16fe:	e8 1a       	sub	r14, r24
    1700:	f8 0a       	sbc	r15, r24
    1702:	00 81       	ld	r16, Z
    1704:	1b 2d       	mov	r17, r11
    1706:	c6 cf       	rjmp	.-116    	; 0x1694 <strtod+0xd0>
    1708:	80 2f       	mov	r24, r16
    170a:	8f 7d       	andi	r24, 0xDF	; 223
    170c:	85 34       	cpi	r24, 0x45	; 69
    170e:	a1 f5       	brne	.+104    	; 0x1778 <strtod+0x1b4>
    1710:	80 81       	ld	r24, Z
    1712:	8d 32       	cpi	r24, 0x2D	; 45
    1714:	11 f4       	brne	.+4      	; 0x171a <strtod+0x156>
    1716:	10 61       	ori	r17, 0x10	; 16
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <strtod+0x162>
    171a:	8b 32       	cpi	r24, 0x2B	; 43
    171c:	21 f0       	breq	.+8      	; 0x1726 <strtod+0x162>
    171e:	31 96       	adiw	r30, 0x01	; 1
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <strtod+0x16a>
    1726:	81 81       	ldd	r24, Z+1	; 0x01
    1728:	32 96       	adiw	r30, 0x02	; 2
    172a:	62 e0       	ldi	r22, 0x02	; 2
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	80 53       	subi	r24, 0x30	; 48
    1730:	8a 30       	cpi	r24, 0x0A	; 10
    1732:	18 f0       	brcs	.+6      	; 0x173a <strtod+0x176>
    1734:	e6 1b       	sub	r30, r22
    1736:	f7 0b       	sbc	r31, r23
    1738:	1f c0       	rjmp	.+62     	; 0x1778 <strtod+0x1b4>
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	60 38       	cpi	r22, 0x80	; 128
    1740:	9c e0       	ldi	r25, 0x0C	; 12
    1742:	79 07       	cpc	r23, r25
    1744:	5c f4       	brge	.+22     	; 0x175c <strtod+0x198>
    1746:	db 01       	movw	r26, r22
    1748:	aa 0f       	add	r26, r26
    174a:	bb 1f       	adc	r27, r27
    174c:	aa 0f       	add	r26, r26
    174e:	bb 1f       	adc	r27, r27
    1750:	6a 0f       	add	r22, r26
    1752:	7b 1f       	adc	r23, r27
    1754:	66 0f       	add	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	68 0f       	add	r22, r24
    175a:	71 1d       	adc	r23, r1
    175c:	31 96       	adiw	r30, 0x01	; 1
    175e:	df 01       	movw	r26, r30
    1760:	11 97       	sbiw	r26, 0x01	; 1
    1762:	8c 91       	ld	r24, X
    1764:	80 53       	subi	r24, 0x30	; 48
    1766:	8a 30       	cpi	r24, 0x0A	; 10
    1768:	50 f3       	brcs	.-44     	; 0x173e <strtod+0x17a>
    176a:	14 ff       	sbrs	r17, 4
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <strtod+0x1b0>
    176e:	71 95       	neg	r23
    1770:	61 95       	neg	r22
    1772:	71 09       	sbc	r23, r1
    1774:	c6 0f       	add	r28, r22
    1776:	d7 1f       	adc	r29, r23
    1778:	11 ff       	sbrs	r17, 1
    177a:	08 c0       	rjmp	.+16     	; 0x178c <strtod+0x1c8>
    177c:	c1 14       	cp	r12, r1
    177e:	d1 04       	cpc	r13, r1
    1780:	29 f0       	breq	.+10     	; 0x178c <strtod+0x1c8>
    1782:	cf 01       	movw	r24, r30
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f6 01       	movw	r30, r12
    1788:	91 83       	std	Z+1, r25	; 0x01
    178a:	80 83       	st	Z, r24
    178c:	ca 01       	movw	r24, r20
    178e:	b9 01       	movw	r22, r18
    1790:	0e 94 56 0c 	call	0x18ac	; 0x18ac <__floatunsisf>
    1794:	21 2f       	mov	r18, r17
    1796:	23 70       	andi	r18, 0x03	; 3
    1798:	23 30       	cpi	r18, 0x03	; 3
    179a:	19 f0       	breq	.+6      	; 0x17a2 <strtod+0x1de>
    179c:	4b 01       	movw	r8, r22
    179e:	5c 01       	movw	r10, r24
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <strtod+0x1ea>
    17a2:	4b 01       	movw	r8, r22
    17a4:	5c 01       	movw	r10, r24
    17a6:	b7 fa       	bst	r11, 7
    17a8:	b0 94       	com	r11
    17aa:	b7 f8       	bld	r11, 7
    17ac:	b0 94       	com	r11
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	a9 01       	movw	r20, r18
    17b4:	c5 01       	movw	r24, r10
    17b6:	b4 01       	movw	r22, r8
    17b8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__cmpsf2>
    17bc:	88 23       	and	r24, r24
    17be:	09 f4       	brne	.+2      	; 0x17c2 <strtod+0x1fe>
    17c0:	3e c0       	rjmp	.+124    	; 0x183e <strtod+0x27a>
    17c2:	d7 ff       	sbrs	r29, 7
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <strtod+0x20e>
    17c6:	d1 95       	neg	r29
    17c8:	c1 95       	neg	r28
    17ca:	d1 09       	sbc	r29, r1
    17cc:	05 e7       	ldi	r16, 0x75	; 117
    17ce:	11 e0       	ldi	r17, 0x01	; 1
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <strtod+0x212>
    17d2:	0d e8       	ldi	r16, 0x8D	; 141
    17d4:	11 e0       	ldi	r17, 0x01	; 1
    17d6:	68 01       	movw	r12, r16
    17d8:	f8 e1       	ldi	r31, 0x18	; 24
    17da:	cf 1a       	sub	r12, r31
    17dc:	d1 08       	sbc	r13, r1
    17de:	90 e2       	ldi	r25, 0x20	; 32
    17e0:	e9 2e       	mov	r14, r25
    17e2:	f1 2c       	mov	r15, r1
    17e4:	ce 15       	cp	r28, r14
    17e6:	df 05       	cpc	r29, r15
    17e8:	74 f0       	brlt	.+28     	; 0x1806 <strtod+0x242>
    17ea:	f8 01       	movw	r30, r16
    17ec:	25 91       	lpm	r18, Z+
    17ee:	35 91       	lpm	r19, Z+
    17f0:	45 91       	lpm	r20, Z+
    17f2:	54 91       	lpm	r21, Z
    17f4:	c5 01       	movw	r24, r10
    17f6:	b4 01       	movw	r22, r8
    17f8:	0e 94 b7 0c 	call	0x196e	; 0x196e <__mulsf3>
    17fc:	4b 01       	movw	r8, r22
    17fe:	5c 01       	movw	r10, r24
    1800:	ce 19       	sub	r28, r14
    1802:	df 09       	sbc	r29, r15
    1804:	ef cf       	rjmp	.-34     	; 0x17e4 <strtod+0x220>
    1806:	04 50       	subi	r16, 0x04	; 4
    1808:	11 09       	sbc	r17, r1
    180a:	f5 94       	asr	r15
    180c:	e7 94       	ror	r14
    180e:	0c 15       	cp	r16, r12
    1810:	1d 05       	cpc	r17, r13
    1812:	41 f7       	brne	.-48     	; 0x17e4 <strtod+0x220>
    1814:	8a 2d       	mov	r24, r10
    1816:	88 0f       	add	r24, r24
    1818:	8b 2d       	mov	r24, r11
    181a:	88 1f       	adc	r24, r24
    181c:	8f 3f       	cpi	r24, 0xFF	; 255
    181e:	49 f0       	breq	.+18     	; 0x1832 <strtod+0x26e>
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	c5 01       	movw	r24, r10
    1828:	b4 01       	movw	r22, r8
    182a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__cmpsf2>
    182e:	81 11       	cpse	r24, r1
    1830:	06 c0       	rjmp	.+12     	; 0x183e <strtod+0x27a>
    1832:	82 e2       	ldi	r24, 0x22	; 34
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <errno+0x1>
    183a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <errno>
    183e:	c5 01       	movw	r24, r10
    1840:	b4 01       	movw	r22, r8
    1842:	09 c0       	rjmp	.+18     	; 0x1856 <strtod+0x292>
    1844:	60 e0       	ldi	r22, 0x00	; 0
    1846:	70 e0       	ldi	r23, 0x00	; 0
    1848:	80 e8       	ldi	r24, 0x80	; 128
    184a:	9f ef       	ldi	r25, 0xFF	; 255
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <strtod+0x292>
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	70 e0       	ldi	r23, 0x00	; 0
    1852:	80 ec       	ldi	r24, 0xC0	; 192
    1854:	9f e7       	ldi	r25, 0x7F	; 127
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	ec e0       	ldi	r30, 0x0C	; 12
    185c:	0c 94 f9 08 	jmp	0x11f2	; 0x11f2 <__epilogue_restores__+0xc>

00001860 <isspace>:
    1860:	91 11       	cpse	r25, r1
    1862:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__ctype_isfalse>
    1866:	80 32       	cpi	r24, 0x20	; 32
    1868:	19 f0       	breq	.+6      	; 0x1870 <isspace+0x10>
    186a:	89 50       	subi	r24, 0x09	; 9
    186c:	85 50       	subi	r24, 0x05	; 5
    186e:	c8 f7       	brcc	.-14     	; 0x1862 <isspace+0x2>
    1870:	08 95       	ret

00001872 <strncasecmp_P>:
    1872:	fb 01       	movw	r30, r22
    1874:	dc 01       	movw	r26, r24
    1876:	41 50       	subi	r20, 0x01	; 1
    1878:	50 40       	sbci	r21, 0x00	; 0
    187a:	88 f0       	brcs	.+34     	; 0x189e <strncasecmp_P+0x2c>
    187c:	8d 91       	ld	r24, X+
    187e:	81 34       	cpi	r24, 0x41	; 65
    1880:	1c f0       	brlt	.+6      	; 0x1888 <strncasecmp_P+0x16>
    1882:	8b 35       	cpi	r24, 0x5B	; 91
    1884:	0c f4       	brge	.+2      	; 0x1888 <strncasecmp_P+0x16>
    1886:	80 5e       	subi	r24, 0xE0	; 224
    1888:	65 91       	lpm	r22, Z+
    188a:	61 34       	cpi	r22, 0x41	; 65
    188c:	1c f0       	brlt	.+6      	; 0x1894 <strncasecmp_P+0x22>
    188e:	6b 35       	cpi	r22, 0x5B	; 91
    1890:	0c f4       	brge	.+2      	; 0x1894 <strncasecmp_P+0x22>
    1892:	60 5e       	subi	r22, 0xE0	; 224
    1894:	86 1b       	sub	r24, r22
    1896:	61 11       	cpse	r22, r1
    1898:	71 f3       	breq	.-36     	; 0x1876 <strncasecmp_P+0x4>
    189a:	99 0b       	sbc	r25, r25
    189c:	08 95       	ret
    189e:	88 1b       	sub	r24, r24
    18a0:	fc cf       	rjmp	.-8      	; 0x189a <strncasecmp_P+0x28>

000018a2 <__cmpsf2>:
    18a2:	0e 94 93 0c 	call	0x1926	; 0x1926 <__fp_cmp>
    18a6:	08 f4       	brcc	.+2      	; 0x18aa <__cmpsf2+0x8>
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	08 95       	ret

000018ac <__floatunsisf>:
    18ac:	e8 94       	clt
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <__floatsisf+0x12>

000018b0 <__floatsisf>:
    18b0:	97 fb       	bst	r25, 7
    18b2:	3e f4       	brtc	.+14     	; 0x18c2 <__floatsisf+0x12>
    18b4:	90 95       	com	r25
    18b6:	80 95       	com	r24
    18b8:	70 95       	com	r23
    18ba:	61 95       	neg	r22
    18bc:	7f 4f       	sbci	r23, 0xFF	; 255
    18be:	8f 4f       	sbci	r24, 0xFF	; 255
    18c0:	9f 4f       	sbci	r25, 0xFF	; 255
    18c2:	99 23       	and	r25, r25
    18c4:	a9 f0       	breq	.+42     	; 0x18f0 <__floatsisf+0x40>
    18c6:	f9 2f       	mov	r31, r25
    18c8:	96 e9       	ldi	r25, 0x96	; 150
    18ca:	bb 27       	eor	r27, r27
    18cc:	93 95       	inc	r25
    18ce:	f6 95       	lsr	r31
    18d0:	87 95       	ror	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	b7 95       	ror	r27
    18d8:	f1 11       	cpse	r31, r1
    18da:	f8 cf       	rjmp	.-16     	; 0x18cc <__floatsisf+0x1c>
    18dc:	fa f4       	brpl	.+62     	; 0x191c <__floatsisf+0x6c>
    18de:	bb 0f       	add	r27, r27
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <__floatsisf+0x36>
    18e2:	60 ff       	sbrs	r22, 0
    18e4:	1b c0       	rjmp	.+54     	; 0x191c <__floatsisf+0x6c>
    18e6:	6f 5f       	subi	r22, 0xFF	; 255
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f 4f       	sbci	r24, 0xFF	; 255
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	16 c0       	rjmp	.+44     	; 0x191c <__floatsisf+0x6c>
    18f0:	88 23       	and	r24, r24
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <__floatsisf+0x48>
    18f4:	96 e9       	ldi	r25, 0x96	; 150
    18f6:	11 c0       	rjmp	.+34     	; 0x191a <__floatsisf+0x6a>
    18f8:	77 23       	and	r23, r23
    18fa:	21 f0       	breq	.+8      	; 0x1904 <__floatsisf+0x54>
    18fc:	9e e8       	ldi	r25, 0x8E	; 142
    18fe:	87 2f       	mov	r24, r23
    1900:	76 2f       	mov	r23, r22
    1902:	05 c0       	rjmp	.+10     	; 0x190e <__floatsisf+0x5e>
    1904:	66 23       	and	r22, r22
    1906:	71 f0       	breq	.+28     	; 0x1924 <__floatsisf+0x74>
    1908:	96 e8       	ldi	r25, 0x86	; 134
    190a:	86 2f       	mov	r24, r22
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	60 e0       	ldi	r22, 0x00	; 0
    1910:	2a f0       	brmi	.+10     	; 0x191c <__floatsisf+0x6c>
    1912:	9a 95       	dec	r25
    1914:	66 0f       	add	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	88 1f       	adc	r24, r24
    191a:	da f7       	brpl	.-10     	; 0x1912 <__floatsisf+0x62>
    191c:	88 0f       	add	r24, r24
    191e:	96 95       	lsr	r25
    1920:	87 95       	ror	r24
    1922:	97 f9       	bld	r25, 7
    1924:	08 95       	ret

00001926 <__fp_cmp>:
    1926:	99 0f       	add	r25, r25
    1928:	00 08       	sbc	r0, r0
    192a:	55 0f       	add	r21, r21
    192c:	aa 0b       	sbc	r26, r26
    192e:	e0 e8       	ldi	r30, 0x80	; 128
    1930:	fe ef       	ldi	r31, 0xFE	; 254
    1932:	16 16       	cp	r1, r22
    1934:	17 06       	cpc	r1, r23
    1936:	e8 07       	cpc	r30, r24
    1938:	f9 07       	cpc	r31, r25
    193a:	c0 f0       	brcs	.+48     	; 0x196c <__fp_cmp+0x46>
    193c:	12 16       	cp	r1, r18
    193e:	13 06       	cpc	r1, r19
    1940:	e4 07       	cpc	r30, r20
    1942:	f5 07       	cpc	r31, r21
    1944:	98 f0       	brcs	.+38     	; 0x196c <__fp_cmp+0x46>
    1946:	62 1b       	sub	r22, r18
    1948:	73 0b       	sbc	r23, r19
    194a:	84 0b       	sbc	r24, r20
    194c:	95 0b       	sbc	r25, r21
    194e:	39 f4       	brne	.+14     	; 0x195e <__fp_cmp+0x38>
    1950:	0a 26       	eor	r0, r26
    1952:	61 f0       	breq	.+24     	; 0x196c <__fp_cmp+0x46>
    1954:	23 2b       	or	r18, r19
    1956:	24 2b       	or	r18, r20
    1958:	25 2b       	or	r18, r21
    195a:	21 f4       	brne	.+8      	; 0x1964 <__fp_cmp+0x3e>
    195c:	08 95       	ret
    195e:	0a 26       	eor	r0, r26
    1960:	09 f4       	brne	.+2      	; 0x1964 <__fp_cmp+0x3e>
    1962:	a1 40       	sbci	r26, 0x01	; 1
    1964:	a6 95       	lsr	r26
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	81 1d       	adc	r24, r1
    196a:	81 1d       	adc	r24, r1
    196c:	08 95       	ret

0000196e <__mulsf3>:
    196e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__mulsf3x>
    1972:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__fp_round>
    1976:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__fp_pscA>
    197a:	38 f0       	brcs	.+14     	; 0x198a <__mulsf3+0x1c>
    197c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__fp_pscB>
    1980:	20 f0       	brcs	.+8      	; 0x198a <__mulsf3+0x1c>
    1982:	95 23       	and	r25, r21
    1984:	11 f0       	breq	.+4      	; 0x198a <__mulsf3+0x1c>
    1986:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_inf>
    198a:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__fp_nan>
    198e:	11 24       	eor	r1, r1
    1990:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_szero>

00001994 <__mulsf3x>:
    1994:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__fp_split3>
    1998:	70 f3       	brcs	.-36     	; 0x1976 <__mulsf3+0x8>

0000199a <__mulsf3_pse>:
    199a:	95 9f       	mul	r25, r21
    199c:	c1 f3       	breq	.-16     	; 0x198e <__mulsf3+0x20>
    199e:	95 0f       	add	r25, r21
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	55 1f       	adc	r21, r21
    19a4:	62 9f       	mul	r22, r18
    19a6:	f0 01       	movw	r30, r0
    19a8:	72 9f       	mul	r23, r18
    19aa:	bb 27       	eor	r27, r27
    19ac:	f0 0d       	add	r31, r0
    19ae:	b1 1d       	adc	r27, r1
    19b0:	63 9f       	mul	r22, r19
    19b2:	aa 27       	eor	r26, r26
    19b4:	f0 0d       	add	r31, r0
    19b6:	b1 1d       	adc	r27, r1
    19b8:	aa 1f       	adc	r26, r26
    19ba:	64 9f       	mul	r22, r20
    19bc:	66 27       	eor	r22, r22
    19be:	b0 0d       	add	r27, r0
    19c0:	a1 1d       	adc	r26, r1
    19c2:	66 1f       	adc	r22, r22
    19c4:	82 9f       	mul	r24, r18
    19c6:	22 27       	eor	r18, r18
    19c8:	b0 0d       	add	r27, r0
    19ca:	a1 1d       	adc	r26, r1
    19cc:	62 1f       	adc	r22, r18
    19ce:	73 9f       	mul	r23, r19
    19d0:	b0 0d       	add	r27, r0
    19d2:	a1 1d       	adc	r26, r1
    19d4:	62 1f       	adc	r22, r18
    19d6:	83 9f       	mul	r24, r19
    19d8:	a0 0d       	add	r26, r0
    19da:	61 1d       	adc	r22, r1
    19dc:	22 1f       	adc	r18, r18
    19de:	74 9f       	mul	r23, r20
    19e0:	33 27       	eor	r19, r19
    19e2:	a0 0d       	add	r26, r0
    19e4:	61 1d       	adc	r22, r1
    19e6:	23 1f       	adc	r18, r19
    19e8:	84 9f       	mul	r24, r20
    19ea:	60 0d       	add	r22, r0
    19ec:	21 1d       	adc	r18, r1
    19ee:	82 2f       	mov	r24, r18
    19f0:	76 2f       	mov	r23, r22
    19f2:	6a 2f       	mov	r22, r26
    19f4:	11 24       	eor	r1, r1
    19f6:	9f 57       	subi	r25, 0x7F	; 127
    19f8:	50 40       	sbci	r21, 0x00	; 0
    19fa:	9a f0       	brmi	.+38     	; 0x1a22 <__mulsf3_pse+0x88>
    19fc:	f1 f0       	breq	.+60     	; 0x1a3a <__mulsf3_pse+0xa0>
    19fe:	88 23       	and	r24, r24
    1a00:	4a f0       	brmi	.+18     	; 0x1a14 <__mulsf3_pse+0x7a>
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	bb 1f       	adc	r27, r27
    1a08:	66 1f       	adc	r22, r22
    1a0a:	77 1f       	adc	r23, r23
    1a0c:	88 1f       	adc	r24, r24
    1a0e:	91 50       	subi	r25, 0x01	; 1
    1a10:	50 40       	sbci	r21, 0x00	; 0
    1a12:	a9 f7       	brne	.-22     	; 0x19fe <__mulsf3_pse+0x64>
    1a14:	9e 3f       	cpi	r25, 0xFE	; 254
    1a16:	51 05       	cpc	r21, r1
    1a18:	80 f0       	brcs	.+32     	; 0x1a3a <__mulsf3_pse+0xa0>
    1a1a:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__fp_inf>
    1a1e:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_szero>
    1a22:	5f 3f       	cpi	r21, 0xFF	; 255
    1a24:	e4 f3       	brlt	.-8      	; 0x1a1e <__mulsf3_pse+0x84>
    1a26:	98 3e       	cpi	r25, 0xE8	; 232
    1a28:	d4 f3       	brlt	.-12     	; 0x1a1e <__mulsf3_pse+0x84>
    1a2a:	86 95       	lsr	r24
    1a2c:	77 95       	ror	r23
    1a2e:	67 95       	ror	r22
    1a30:	b7 95       	ror	r27
    1a32:	f7 95       	ror	r31
    1a34:	e7 95       	ror	r30
    1a36:	9f 5f       	subi	r25, 0xFF	; 255
    1a38:	c1 f7       	brne	.-16     	; 0x1a2a <__mulsf3_pse+0x90>
    1a3a:	fe 2b       	or	r31, r30
    1a3c:	88 0f       	add	r24, r24
    1a3e:	91 1d       	adc	r25, r1
    1a40:	96 95       	lsr	r25
    1a42:	87 95       	ror	r24
    1a44:	97 f9       	bld	r25, 7
    1a46:	08 95       	ret

00001a48 <__ctype_isfalse>:
    1a48:	99 27       	eor	r25, r25
    1a4a:	88 27       	eor	r24, r24

00001a4c <__ctype_istrue>:
    1a4c:	08 95       	ret

00001a4e <__fp_inf>:
    1a4e:	97 f9       	bld	r25, 7
    1a50:	9f 67       	ori	r25, 0x7F	; 127
    1a52:	80 e8       	ldi	r24, 0x80	; 128
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	08 95       	ret

00001a5a <__fp_nan>:
    1a5a:	9f ef       	ldi	r25, 0xFF	; 255
    1a5c:	80 ec       	ldi	r24, 0xC0	; 192
    1a5e:	08 95       	ret

00001a60 <__fp_pscA>:
    1a60:	00 24       	eor	r0, r0
    1a62:	0a 94       	dec	r0
    1a64:	16 16       	cp	r1, r22
    1a66:	17 06       	cpc	r1, r23
    1a68:	18 06       	cpc	r1, r24
    1a6a:	09 06       	cpc	r0, r25
    1a6c:	08 95       	ret

00001a6e <__fp_pscB>:
    1a6e:	00 24       	eor	r0, r0
    1a70:	0a 94       	dec	r0
    1a72:	12 16       	cp	r1, r18
    1a74:	13 06       	cpc	r1, r19
    1a76:	14 06       	cpc	r1, r20
    1a78:	05 06       	cpc	r0, r21
    1a7a:	08 95       	ret

00001a7c <__fp_round>:
    1a7c:	09 2e       	mov	r0, r25
    1a7e:	03 94       	inc	r0
    1a80:	00 0c       	add	r0, r0
    1a82:	11 f4       	brne	.+4      	; 0x1a88 <__fp_round+0xc>
    1a84:	88 23       	and	r24, r24
    1a86:	52 f0       	brmi	.+20     	; 0x1a9c <__fp_round+0x20>
    1a88:	bb 0f       	add	r27, r27
    1a8a:	40 f4       	brcc	.+16     	; 0x1a9c <__fp_round+0x20>
    1a8c:	bf 2b       	or	r27, r31
    1a8e:	11 f4       	brne	.+4      	; 0x1a94 <__fp_round+0x18>
    1a90:	60 ff       	sbrs	r22, 0
    1a92:	04 c0       	rjmp	.+8      	; 0x1a9c <__fp_round+0x20>
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	08 95       	ret

00001a9e <__fp_split3>:
    1a9e:	57 fd       	sbrc	r21, 7
    1aa0:	90 58       	subi	r25, 0x80	; 128
    1aa2:	44 0f       	add	r20, r20
    1aa4:	55 1f       	adc	r21, r21
    1aa6:	59 f0       	breq	.+22     	; 0x1abe <__fp_splitA+0x10>
    1aa8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aaa:	71 f0       	breq	.+28     	; 0x1ac8 <__fp_splitA+0x1a>
    1aac:	47 95       	ror	r20

00001aae <__fp_splitA>:
    1aae:	88 0f       	add	r24, r24
    1ab0:	97 fb       	bst	r25, 7
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <__fp_splitA+0x20>
    1ab6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ab8:	79 f0       	breq	.+30     	; 0x1ad8 <__fp_splitA+0x2a>
    1aba:	87 95       	ror	r24
    1abc:	08 95       	ret
    1abe:	12 16       	cp	r1, r18
    1ac0:	13 06       	cpc	r1, r19
    1ac2:	14 06       	cpc	r1, r20
    1ac4:	55 1f       	adc	r21, r21
    1ac6:	f2 cf       	rjmp	.-28     	; 0x1aac <__fp_split3+0xe>
    1ac8:	46 95       	lsr	r20
    1aca:	f1 df       	rcall	.-30     	; 0x1aae <__fp_splitA>
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <__fp_splitA+0x30>
    1ace:	16 16       	cp	r1, r22
    1ad0:	17 06       	cpc	r1, r23
    1ad2:	18 06       	cpc	r1, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	f1 cf       	rjmp	.-30     	; 0x1aba <__fp_splitA+0xc>
    1ad8:	86 95       	lsr	r24
    1ada:	71 05       	cpc	r23, r1
    1adc:	61 05       	cpc	r22, r1
    1ade:	08 94       	sec
    1ae0:	08 95       	ret

00001ae2 <__fp_zero>:
    1ae2:	e8 94       	clt

00001ae4 <__fp_szero>:
    1ae4:	bb 27       	eor	r27, r27
    1ae6:	66 27       	eor	r22, r22
    1ae8:	77 27       	eor	r23, r23
    1aea:	cb 01       	movw	r24, r22
    1aec:	97 f9       	bld	r25, 7
    1aee:	08 95       	ret

00001af0 <__muluhisi3>:
    1af0:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__umulhisi3>
    1af4:	a5 9f       	mul	r26, r21
    1af6:	90 0d       	add	r25, r0
    1af8:	b4 9f       	mul	r27, r20
    1afa:	90 0d       	add	r25, r0
    1afc:	a4 9f       	mul	r26, r20
    1afe:	80 0d       	add	r24, r0
    1b00:	91 1d       	adc	r25, r1
    1b02:	11 24       	eor	r1, r1
    1b04:	08 95       	ret

00001b06 <__umulhisi3>:
    1b06:	a2 9f       	mul	r26, r18
    1b08:	b0 01       	movw	r22, r0
    1b0a:	b3 9f       	mul	r27, r19
    1b0c:	c0 01       	movw	r24, r0
    1b0e:	a3 9f       	mul	r26, r19
    1b10:	70 0d       	add	r23, r0
    1b12:	81 1d       	adc	r24, r1
    1b14:	11 24       	eor	r1, r1
    1b16:	91 1d       	adc	r25, r1
    1b18:	b2 9f       	mul	r27, r18
    1b1a:	70 0d       	add	r23, r0
    1b1c:	81 1d       	adc	r24, r1
    1b1e:	11 24       	eor	r1, r1
    1b20:	91 1d       	adc	r25, r1
    1b22:	08 95       	ret

00001b24 <_exit>:
    1b24:	f8 94       	cli

00001b26 <__stop_program>:
    1b26:	ff cf       	rjmp	.-2      	; 0x1b26 <__stop_program>
