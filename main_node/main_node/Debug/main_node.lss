
main_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c4  00800060  00001b86  00001c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000214  00800224  00800224  00001dde  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00001e78  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9a  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f8  00000000  00000000  00002a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1b  00000000  00000000  00003192  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000436  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000895  00000000  00000000  00004472  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00004d07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
       4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_8>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      34:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <pstr_nan>:
     156:	4e 41 4e                                            NAN

00000159 <pstr_inity>:
     159:	49 4e 49 54 59                                      INITY

0000015e <pstr_inf>:
     15e:	49 4e 46                                            INF

00000161 <pwr_m10>:
     161:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     171:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000179 <pwr_p10>:
     179:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     189:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000192 <__ctors_end>:
     192:	11 24       	eor	r1, r1
     194:	1f be       	out	0x3f, r1	; 63
     196:	cf e5       	ldi	r28, 0x5F	; 95
     198:	d4 e0       	ldi	r29, 0x04	; 4
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
     19e:	12 e0       	ldi	r17, 0x02	; 2
     1a0:	a0 e6       	ldi	r26, 0x60	; 96
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e6 e8       	ldi	r30, 0x86	; 134
     1a6:	fb e1       	ldi	r31, 0x1B	; 27
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x10>
     1aa:	05 90       	lpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a4 32       	cpi	r26, 0x24	; 36
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0xc>

000001b4 <__do_clear_bss>:
     1b4:	24 e0       	ldi	r18, 0x04	; 4
     1b6:	a4 e2       	ldi	r26, 0x24	; 36
     1b8:	b2 e0       	ldi	r27, 0x02	; 2
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a8 33       	cpi	r26, 0x38	; 56
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 93 04 	call	0x926	; 0x926 <main>
     1c8:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <lcd_init_sim>:
#define _SFR_ASM_COMPAT 1
#define __SFR_OFFSET 0

.global lcd_init_sim
lcd_init_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     1d0:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     1d2:	9f 93       	push	r25
ldi r24, 40 ; Όταν ο ελεγκτής της lcd τροφοδοτείται με
     1d4:	88 e2       	ldi	r24, 0x28	; 40
ldi r25, 0 ; ρεύμα εκτελεί την δική του αρχικοποίηση.
     1d6:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_msec ; Αναμονή 40 msec μέχρι αυτή να ολοκληρωθεί.
     1d8:	6d d0       	rcall	.+218    	; 0x2b4 <wait_msec>
ldi r24, 0x30
     1da:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1dc:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1de:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1e0:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1e2:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     1e6:	70 d0       	rcall	.+224    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     1e8:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     1ea:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     1ec:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     1ee:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     1f0:	6b d0       	rcall	.+214    	; 0x2c8 <wait_usec>
pop r25
     1f2:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     1f4:	8f 91       	pop	r24
ldi r24, 0x30
     1f6:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1f8:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1fa:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1fc:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1fe:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     200:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     202:	62 d0       	rcall	.+196    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     204:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     206:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     208:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     20a:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     20c:	5d d0       	rcall	.+186    	; 0x2c8 <wait_usec>
pop r25
     20e:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     210:	8f 91       	pop	r24
ldi r24,0x20 ; αλλαγή σε 4-bit mode
     212:	80 e2       	ldi	r24, 0x20	; 32
out PORTD, r24
     214:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     216:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     218:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     21a:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     21c:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     21e:	54 d0       	rcall	.+168    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     220:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     222:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     224:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     226:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     228:	4f d0       	rcall	.+158    	; 0x2c8 <wait_usec>
pop r25
     22a:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     22c:	8f 91       	pop	r24
ldi r24,0x28 ; επιλογή χαρακτήρων μεγέθους 5x8 κουκίδων
     22e:	88 e2       	ldi	r24, 0x28	; 40
rcall lcd_command_sim ; και εμφάνιση δύο γραμμών στην οθόνη
     230:	0f d0       	rcall	.+30     	; 0x250 <lcd_command_sim>
ldi r24,0x0c ; ενεργοποίηση της οθόνης, απόκρυψη του κέρσορα
     232:	8c e0       	ldi	r24, 0x0C	; 12
rcall lcd_command_sim
     234:	0d d0       	rcall	.+26     	; 0x250 <lcd_command_sim>
ldi r24,0x01 ; καθαρισμός της οθόνης
     236:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     238:	0b d0       	rcall	.+22     	; 0x250 <lcd_command_sim>
ldi r24, lo8(1530)
     23a:	8a ef       	ldi	r24, 0xFA	; 250
ldi r25, hi8(1530)
     23c:	95 e0       	ldi	r25, 0x05	; 5
rcall wait_usec
     23e:	44 d0       	rcall	.+136    	; 0x2c8 <wait_usec>
ldi r24 ,0x06 ; ενεργοποίηση αυτόματης αύξησης κατά 1 της διεύθυνσης
     240:	86 e0       	ldi	r24, 0x06	; 6
rcall lcd_command_sim ; που είναι αποθηκευμένη στον μετρητή διευθύνσεων και
     242:	06 d0       	rcall	.+12     	; 0x250 <lcd_command_sim>
; απενεργοποίηση της ολίσθησης ολόκληρης της οθόνης
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     244:	9f 91       	pop	r25
pop r24
     246:	8f 91       	pop	r24
ret
     248:	08 95       	ret

0000024a <lcd_clear>:


.global lcd_clear
lcd_clear:
ldi r24,0x01 ; καθαρισμός της οθόνης
     24a:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     24c:	01 d0       	rcall	.+2      	; 0x250 <lcd_command_sim>
ret
     24e:	08 95       	ret

00000250 <lcd_command_sim>:

lcd_command_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     250:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     252:	9f 93       	push	r25
cbi PORTD, PD2 ; επιλογή του καταχωρητή εντολών (PD2=0)
     254:	92 98       	cbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή της εντολής και αναμονή 39μsec
     256:	06 d0       	rcall	.+12     	; 0x264 <write_2_nibbles_sim>
ldi r24, 39 ; για την ολοκλήρωση της εκτέλεσης της από τον ελεγκτή της lcd.
     258:	87 e2       	ldi	r24, 0x27	; 39
ldi r25, 0 ; ΣΗΜ.: υπάρχουν δύο εντολές, οι clear display και return home,
     25a:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec ; που απαιτούν σημαντικά μεγαλύτερο χρονικό διάστημα.
     25c:	35 d0       	rcall	.+106    	; 0x2c8 <wait_usec>
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     25e:	9f 91       	pop	r25
pop r24
     260:	8f 91       	pop	r24
ret
     262:	08 95       	ret

00000264 <write_2_nibbles_sim>:

write_2_nibbles_sim:
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     264:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     266:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     268:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     26a:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     26c:	2d d0       	rcall	.+90     	; 0x2c8 <wait_usec>
pop r25
     26e:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     270:	8f 91       	pop	r24
push r24 ; στέλνει τα 4 MSB
     272:	8f 93       	push	r24
in r25, PIND ; διαβάζονται τα 4 LSB και τα ξαναστέλνουμε
     274:	90 b3       	in	r25, 0x10	; 16
andi r25, 0x0f ; για να μην χαλάσουμε την όποια προηγούμενη κατάσταση
     276:	9f 70       	andi	r25, 0x0F	; 15
andi r24, 0xf0 ; απομονώνονται τα 4 MSB και
     278:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25 ; συνδυάζονται με τα προϋπάρχοντα 4 LSB
     27a:	89 0f       	add	r24, r25
out PORTD, r24 ; και δίνονται στην έξοδο
     27c:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; δημιουργείται παλμός Enable στον ακροδέκτη PD3
     27e:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3 ; PD3=1 και μετά PD3=0
     280:	93 98       	cbi	0x12, 3	; 18
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     282:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     284:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     286:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     288:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     28a:	1e d0       	rcall	.+60     	; 0x2c8 <wait_usec>
pop r25
     28c:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     28e:	8f 91       	pop	r24
pop r24 ; στέλνει τα 4 LSB. Ανακτάται το byte.
     290:	8f 91       	pop	r24
swap r24 ; εναλλάσσονται τα 4 MSB με τα 4 LSB
     292:	82 95       	swap	r24
andi r24 ,0xf0 ; που με την σειρά τους αποστέλλονται
     294:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25
     296:	89 0f       	add	r24, r25
out PORTD, r24
     298:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; Νέος παλμός Enable
     29a:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     29c:	93 98       	cbi	0x12, 3	; 18
ret
     29e:	08 95       	ret

000002a0 <lcd_data_sim>:

lcd_data_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     2a0:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     2a2:	9f 93       	push	r25
sbi PORTD, PD2 ; επιλογή του καταχωρητή δεδομένων (PD2=1)
     2a4:	92 9a       	sbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή του byte
     2a6:	de df       	rcall	.-68     	; 0x264 <write_2_nibbles_sim>
ldi r24 ,43 ; αναμονή 43μsec μέχρι να ολοκληρωθεί η λήψη
     2a8:	8b e2       	ldi	r24, 0x2B	; 43
ldi r25 ,0 ; των δεδομένων από τον ελεγκτή της lcd
     2aa:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     2ac:	0d d0       	rcall	.+26     	; 0x2c8 <wait_usec>
pop r25 ;επανάφερε τους καταχωρητές r25:r24
     2ae:	9f 91       	pop	r25
pop r24
     2b0:	8f 91       	pop	r24
ret
     2b2:	08 95       	ret

000002b4 <wait_msec>:

.global wait_msec
wait_msec:
push r24 ; 2 κύκλοι (0.250 μsec)
     2b4:	8f 93       	push	r24
push r25 ; 2 κύκλοι
     2b6:	9f 93       	push	r25
ldi r24 , lo8(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
     2b8:	86 ee       	ldi	r24, 0xE6	; 230
ldi r25 , hi8(998) ; 1 κύκλος (0.125 μsec)
     2ba:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
     2bc:	05 d0       	rcall	.+10     	; 0x2c8 <wait_usec>
pop r25 ; 2 κύκλοι (0.250 μsec)
     2be:	9f 91       	pop	r25
pop r24 ; 2 κύκλοι
     2c0:	8f 91       	pop	r24
sbiw r24 , 1 ; 2 κύκλοι
     2c2:	01 97       	sbiw	r24, 0x01	; 1
brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2c4:	b9 f7       	brne	.-18     	; 0x2b4 <wait_msec>
ret ; 4 κύκλοι (0.500 μsec)
     2c6:	08 95       	ret

000002c8 <wait_usec>:

wait_usec:
sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
     2c8:	01 97       	sbiw	r24, 0x01	; 1
	...
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2d2:	d1 f7       	brne	.-12     	; 0x2c8 <wait_usec>
ret ; 4 κύκλοι (0.500 μsec)
     2d4:	08 95       	ret

000002d6 <print>:


.global print
print:
rcall lcd_data_sim
     2d6:	e4 df       	rcall	.-56     	; 0x2a0 <lcd_data_sim>
     2d8:	08 95       	ret

000002da <print_string>:
	while(c!='S') {
		c=usart_receive();
	}
	for(int i=0; i<12; ++i)
	usart_receive(); //flush ServedClient out of read buffer
}
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	ec 01       	movw	r28, r24
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <print_string+0x1a>
     2e6:	fe 01       	movw	r30, r28
     2e8:	e8 0f       	add	r30, r24
     2ea:	f9 1f       	adc	r31, r25
     2ec:	80 81       	ld	r24, Z
     2ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <print>
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	81 2f       	mov	r24, r17
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fe 01       	movw	r30, r28
     2fa:	01 90       	ld	r0, Z+
     2fc:	00 20       	and	r0, r0
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <print_string+0x20>
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	ec 1b       	sub	r30, r28
     304:	fd 0b       	sbc	r31, r29
     306:	8e 17       	cp	r24, r30
     308:	9f 07       	cpc	r25, r31
     30a:	68 f3       	brcs	.-38     	; 0x2e6 <print_string+0xc>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	08 95       	ret

00000314 <usart_init>:
     314:	1b b8       	out	0x0b, r1	; 11
     316:	28 e1       	ldi	r18, 0x18	; 24
     318:	2a b9       	out	0x0a, r18	; 10
     31a:	90 bd       	out	0x20, r25	; 32
     31c:	89 b9       	out	0x09, r24	; 9
     31e:	86 e8       	ldi	r24, 0x86	; 134
     320:	80 bd       	out	0x20, r24	; 32
     322:	08 95       	ret

00000324 <usart_transmit>:
     324:	5d 9b       	sbis	0x0b, 5	; 11
     326:	fe cf       	rjmp	.-4      	; 0x324 <usart_transmit>
     328:	8c b9       	out	0x0c, r24	; 12
     32a:	08 95       	ret

0000032c <usart_receive>:
     32c:	5f 9b       	sbis	0x0b, 7	; 11
     32e:	fe cf       	rjmp	.-4      	; 0x32c <usart_receive>
     330:	8c b1       	in	r24, 0x0c	; 12
     332:	08 95       	ret

00000334 <clear_buffer>:
     334:	84 e6       	ldi	r24, 0x64	; 100
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <wait_msec>
     33c:	02 c0       	rjmp	.+4      	; 0x342 <clear_buffer+0xe>
     33e:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     342:	5f 99       	sbic	0x0b, 7	; 11
     344:	fc cf       	rjmp	.-8      	; 0x33e <clear_buffer+0xa>
     346:	08 95       	ret

00000348 <serialWrite>:
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec 01       	movw	r28, r24
     350:	10 e0       	ldi	r17, 0x00	; 0
     352:	07 c0       	rjmp	.+14     	; 0x362 <serialWrite+0x1a>
     354:	fe 01       	movw	r30, r28
     356:	e8 0f       	add	r30, r24
     358:	f9 1f       	adc	r31, r25
     35a:	80 81       	ld	r24, Z
     35c:	0e 94 92 01 	call	0x324	; 0x324 <usart_transmit>
     360:	1f 5f       	subi	r17, 0xFF	; 255
     362:	81 2f       	mov	r24, r17
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	fe 01       	movw	r30, r28
     368:	01 90       	ld	r0, Z+
     36a:	00 20       	and	r0, r0
     36c:	e9 f7       	brne	.-6      	; 0x368 <serialWrite+0x20>
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	ec 1b       	sub	r30, r28
     372:	fd 0b       	sbc	r31, r29
     374:	8e 17       	cp	r24, r30
     376:	9f 07       	cpc	r25, r31
     378:	68 f3       	brcs	.-38     	; 0x354 <serialWrite+0xc>
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	08 95       	ret

00000382 <sendCommand>:
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
     388:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
     38c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     390:	0c c0       	rjmp	.+24     	; 0x3aa <sendCommand+0x28>
     392:	86 34       	cpi	r24, 0x46	; 70
     394:	41 f4       	brne	.+16     	; 0x3a6 <sendCommand+0x24>
     396:	02 c0       	rjmp	.+4      	; 0x39c <sendCommand+0x1a>
     398:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     39c:	5f 99       	sbic	0x0b, 7	; 11
     39e:	fc cf       	rjmp	.-8      	; 0x398 <sendCommand+0x16>
     3a0:	ce 01       	movw	r24, r28
     3a2:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
     3a6:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     3aa:	83 35       	cpi	r24, 0x53	; 83
     3ac:	91 f7       	brne	.-28     	; 0x392 <sendCommand+0x10>
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <sendCommand+0x32>
     3b0:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     3b4:	5f 99       	sbic	0x0b, 7	; 11
     3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <sendCommand+0x2e>
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <__vector_8>:

ISR(TIMER1_OVF_vect) {
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ef 93       	push	r30
     3ee:	ff 93       	push	r31
	cli();
     3f0:	f8 94       	cli
    char c;
    bool failed;
    int counter =0, watering_pot = 0, leds;

    if(!first) {
     3f2:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <first>
     3f6:	81 11       	cpse	r24, r1
     3f8:	76 c2       	rjmp	.+1260   	; 0x8e6 <__stack+0x487>
     3fa:	ee 24       	eor	r14, r14
     3fc:	e3 94       	inc	r14
     3fe:	f1 2c       	mov	r15, r1
     400:	a7 c1       	rjmp	.+846    	; 0x750 <__stack+0x2f1>
			
            //strcpy(string_to_send, "ESP:getAllValues\n");
            //serialWrite(string_to_send);
			
			//get moisture average
			clear_buffer(); //flush potential ServedClient
     402:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Moist_avg%d\"\n", k);
     406:	ff 92       	push	r15
     408:	ef 92       	push	r14
     40a:	80 e6       	ldi	r24, 0x60	; 96
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
     412:	8b e2       	ldi	r24, 0x2B	; 43
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	9f 93       	push	r25
     418:	8f 93       	push	r24
     41a:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
			serialWrite(string_to_send);
     41e:	8b e2       	ldi	r24, 0x2B	; 43
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>

            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     436:	82 32       	cpi	r24, 0x22	; 34
     438:	e1 f7       	brne	.-8      	; 0x432 <__DATA_REGION_LENGTH__+0x32>
            c=usart_receive(); //read most significant digit
     43a:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(c=='F')
     43e:	86 34       	cpi	r24, 0x46	; 70
     440:	11 f0       	breq	.+4      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
    bool failed;
    int counter =0, watering_pot = 0, leds;

    if(!first) {
        for(int k=1; k<=middle_boards; ++k){
            failed=false;
     442:	c0 e0       	ldi	r28, 0x00	; 0
     444:	01 c0       	rjmp	.+2      	; 0x448 <__DATA_REGION_LENGTH__+0x48>

            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
     446:	c1 e0       	ldi	r28, 0x01	; 1
    bool failed;
    int counter =0, watering_pot = 0, leds;

    if(!first) {
        for(int k=1; k<=middle_boards; ++k){
            failed=false;
     448:	00 e0       	ldi	r16, 0x00	; 0
     44a:	10 e0       	ldi	r17, 0x00	; 0
     44c:	0b c0       	rjmp	.+22     	; 0x464 <__stack+0x5>
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     44e:	68 01       	movw	r12, r16
     450:	2f ef       	ldi	r18, 0xFF	; 255
     452:	c2 1a       	sub	r12, r18
     454:	d2 0a       	sbc	r13, r18
     456:	f8 01       	movw	r30, r16
     458:	e0 5d       	subi	r30, 0xD0	; 208
     45a:	fb 4f       	sbci	r31, 0xFB	; 251
     45c:	80 83       	st	Z, r24
	            c = usart_receive();
     45e:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     462:	86 01       	movw	r16, r12
            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
     464:	82 32       	cpi	r24, 0x22	; 34
     466:	11 f0       	breq	.+4      	; 0x46c <__stack+0xd>
     468:	cc 23       	and	r28, r28
     46a:	89 f3       	breq	.-30     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
     46c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(!failed){
     470:	c1 11       	cpse	r28, r1
     472:	2f c0       	rjmp	.+94     	; 0x4d2 <__stack+0x73>
     474:	25 e0       	ldi	r18, 0x05	; 5
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	0c c0       	rjmp	.+24     	; 0x492 <__stack+0x33>
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
     47a:	f9 01       	movw	r30, r18
     47c:	e8 1b       	sub	r30, r24
     47e:	f9 0b       	sbc	r31, r25
     480:	e0 5d       	subi	r30, 0xD0	; 208
     482:	fb 4f       	sbci	r31, 0xFB	; 251
     484:	80 81       	ld	r24, Z
     486:	f9 01       	movw	r30, r18
     488:	e0 5d       	subi	r30, 0xD0	; 208
     48a:	fb 4f       	sbci	r31, 0xFB	; 251
     48c:	80 83       	st	Z, r24
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     48e:	21 50       	subi	r18, 0x01	; 1
     490:	31 09       	sbc	r19, r1
     492:	86 e0       	ldi	r24, 0x06	; 6
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	80 1b       	sub	r24, r16
     498:	91 0b       	sbc	r25, r17
     49a:	28 17       	cp	r18, r24
     49c:	39 07       	cpc	r19, r25
     49e:	6c f7       	brge	.-38     	; 0x47a <__stack+0x1b>
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <__stack+0x55>
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
		            conv_buffer[i] = '0';
     4a6:	f9 01       	movw	r30, r18
     4a8:	e0 5d       	subi	r30, 0xD0	; 208
     4aa:	fb 4f       	sbci	r31, 0xFB	; 251
     4ac:	40 e3       	ldi	r20, 0x30	; 48
     4ae:	40 83       	st	Z, r20
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
     4b0:	2f 5f       	subi	r18, 0xFF	; 255
     4b2:	3f 4f       	sbci	r19, 0xFF	; 255
     4b4:	28 17       	cp	r18, r24
     4b6:	39 07       	cpc	r19, r25
     4b8:	b4 f3       	brlt	.-20     	; 0x4a6 <__stack+0x47>
		            conv_buffer[i] = '0';
	            }
	            //print_string(conv_buffer);
	            moist_avgs[k-1]=atoi(conv_buffer);
     4ba:	80 e3       	ldi	r24, 0x30	; 48
     4bc:	94 e0       	ldi	r25, 0x04	; 4
     4be:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     4c2:	f7 01       	movw	r30, r14
     4c4:	31 97       	sbiw	r30, 0x01	; 1
     4c6:	ee 0f       	add	r30, r30
     4c8:	ff 1f       	adc	r31, r31
     4ca:	ec 5d       	subi	r30, 0xDC	; 220
     4cc:	fd 4f       	sbci	r31, 0xFD	; 253
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	80 83       	st	Z, r24
            }
			
			
			
			//get temperature average
			clear_buffer(); //flush potential ServedClient
     4d2:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Tmp_avg%d\"\n", k);
     4d6:	ff 92       	push	r15
     4d8:	ef 92       	push	r14
     4da:	8c e7       	ldi	r24, 0x7C	; 124
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	8b e2       	ldi	r24, 0x2B	; 43
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
			serialWrite(string_to_send);
     4ee:	8b e2       	ldi	r24, 0x2B	; 43
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
            
			counter = 0;
			while(usart_receive() != '"' && !failed);
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     506:	82 32       	cpi	r24, 0x22	; 34
     508:	11 f0       	breq	.+4      	; 0x50e <__stack+0xaf>
     50a:	cc 23       	and	r28, r28
     50c:	d1 f3       	breq	.-12     	; 0x502 <__stack+0xa3>
			c = usart_receive();
     50e:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(c=='F')
     512:	86 34       	cpi	r24, 0x46	; 70
     514:	09 f4       	brne	.+2      	; 0x518 <__stack+0xb9>
			failed=true;
     516:	c1 e0       	ldi	r28, 0x01	; 1
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	10 e0       	ldi	r17, 0x00	; 0
     51c:	0b c0       	rjmp	.+22     	; 0x534 <__stack+0xd5>
			while(c != '"' && !failed){
				conv_buffer[counter++]=c;
     51e:	68 01       	movw	r12, r16
     520:	3f ef       	ldi	r19, 0xFF	; 255
     522:	c3 1a       	sub	r12, r19
     524:	d3 0a       	sbc	r13, r19
     526:	f8 01       	movw	r30, r16
     528:	e0 5d       	subi	r30, 0xD0	; 208
     52a:	fb 4f       	sbci	r31, 0xFB	; 251
     52c:	80 83       	st	Z, r24
				c = usart_receive();
     52e:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			while(usart_receive() != '"' && !failed);
			c = usart_receive();
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){
				conv_buffer[counter++]=c;
     532:	86 01       	movw	r16, r12
			counter = 0;
			while(usart_receive() != '"' && !failed);
			c = usart_receive();
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){
     534:	82 32       	cpi	r24, 0x22	; 34
     536:	11 f0       	breq	.+4      	; 0x53c <__stack+0xdd>
     538:	cc 23       	and	r28, r28
     53a:	89 f3       	breq	.-30     	; 0x51e <__stack+0xbf>
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
     53c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(!failed){
     540:	c1 11       	cpse	r28, r1
     542:	33 c0       	rjmp	.+102    	; 0x5aa <__stack+0x14b>
     544:	25 e0       	ldi	r18, 0x05	; 5
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	0c c0       	rjmp	.+24     	; 0x562 <__stack+0x103>
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
     54a:	f9 01       	movw	r30, r18
     54c:	e8 1b       	sub	r30, r24
     54e:	f9 0b       	sbc	r31, r25
     550:	e0 5d       	subi	r30, 0xD0	; 208
     552:	fb 4f       	sbci	r31, 0xFB	; 251
     554:	80 81       	ld	r24, Z
     556:	f9 01       	movw	r30, r18
     558:	e0 5d       	subi	r30, 0xD0	; 208
     55a:	fb 4f       	sbci	r31, 0xFB	; 251
     55c:	80 83       	st	Z, r24
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     55e:	21 50       	subi	r18, 0x01	; 1
     560:	31 09       	sbc	r19, r1
     562:	86 e0       	ldi	r24, 0x06	; 6
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	80 1b       	sub	r24, r16
     568:	91 0b       	sbc	r25, r17
     56a:	28 17       	cp	r18, r24
     56c:	39 07       	cpc	r19, r25
     56e:	6c f7       	brge	.-38     	; 0x54a <__stack+0xeb>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	07 c0       	rjmp	.+14     	; 0x584 <__stack+0x125>
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
					conv_buffer[i] = '0';
     576:	f9 01       	movw	r30, r18
     578:	e0 5d       	subi	r30, 0xD0	; 208
     57a:	fb 4f       	sbci	r31, 0xFB	; 251
     57c:	40 e3       	ldi	r20, 0x30	; 48
     57e:	40 83       	st	Z, r20
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
     580:	2f 5f       	subi	r18, 0xFF	; 255
     582:	3f 4f       	sbci	r19, 0xFF	; 255
     584:	28 17       	cp	r18, r24
     586:	39 07       	cpc	r19, r25
     588:	b4 f3       	brlt	.-20     	; 0x576 <__stack+0x117>
					conv_buffer[i] = '0';
				}
				//print_string(conv_buffer);
				//print_string("\n");
				tmp_avgs[k-1]=atof(conv_buffer);
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	0e 94 3d 09 	call	0x127a	; 0x127a <atof>
     592:	f7 01       	movw	r30, r14
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	ee 0f       	add	r30, r30
     598:	ff 1f       	adc	r31, r31
     59a:	ee 0f       	add	r30, r30
     59c:	ff 1f       	adc	r31, r31
     59e:	e5 55       	subi	r30, 0x55	; 85
     5a0:	fc 4f       	sbci	r31, 0xFC	; 252
     5a2:	60 83       	st	Z, r22
     5a4:	71 83       	std	Z+1, r23	; 0x01
     5a6:	82 83       	std	Z+2, r24	; 0x02
     5a8:	93 83       	std	Z+3, r25	; 0x03
			}
		
		
			//get moisture variance
			clear_buffer(); //flush potential ServedClient
     5aa:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Moist_var%d\"\n", k);
     5ae:	ff 92       	push	r15
     5b0:	ef 92       	push	r14
     5b2:	86 e9       	ldi	r24, 0x96	; 150
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	8b e2       	ldi	r24, 0x2B	; 43
     5bc:	92 e0       	ldi	r25, 0x02	; 2
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
			serialWrite(string_to_send);
     5c6:	8b e2       	ldi	r24, 0x2B	; 43
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
            
            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     5de:	82 32       	cpi	r24, 0x22	; 34
     5e0:	11 f0       	breq	.+4      	; 0x5e6 <__stack+0x187>
     5e2:	cc 23       	and	r28, r28
     5e4:	d1 f3       	breq	.-12     	; 0x5da <__stack+0x17b>
            c=usart_receive(); //read most significant digit
     5e6:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(c=='F')
     5ea:	86 34       	cpi	r24, 0x46	; 70
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <__stack+0x191>
            failed=true;
     5ee:	c1 e0       	ldi	r28, 0x01	; 1
     5f0:	00 e0       	ldi	r16, 0x00	; 0
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	0b c0       	rjmp	.+22     	; 0x60c <__stack+0x1ad>
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     5f6:	68 01       	movw	r12, r16
     5f8:	9f ef       	ldi	r25, 0xFF	; 255
     5fa:	c9 1a       	sub	r12, r25
     5fc:	d9 0a       	sbc	r13, r25
     5fe:	f8 01       	movw	r30, r16
     600:	e0 5d       	subi	r30, 0xD0	; 208
     602:	fb 4f       	sbci	r31, 0xFB	; 251
     604:	80 83       	st	Z, r24
	            c = usart_receive();
     606:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     60a:	86 01       	movw	r16, r12
            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
     60c:	82 32       	cpi	r24, 0x22	; 34
     60e:	11 f0       	breq	.+4      	; 0x614 <__stack+0x1b5>
     610:	cc 23       	and	r28, r28
     612:	89 f3       	breq	.-30     	; 0x5f6 <__stack+0x197>
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
     614:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(!failed){
     618:	c1 11       	cpse	r28, r1
     61a:	2f c0       	rjmp	.+94     	; 0x67a <__stack+0x21b>
     61c:	25 e0       	ldi	r18, 0x05	; 5
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	0c c0       	rjmp	.+24     	; 0x63a <__stack+0x1db>
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
     622:	f9 01       	movw	r30, r18
     624:	e8 1b       	sub	r30, r24
     626:	f9 0b       	sbc	r31, r25
     628:	e0 5d       	subi	r30, 0xD0	; 208
     62a:	fb 4f       	sbci	r31, 0xFB	; 251
     62c:	80 81       	ld	r24, Z
     62e:	f9 01       	movw	r30, r18
     630:	e0 5d       	subi	r30, 0xD0	; 208
     632:	fb 4f       	sbci	r31, 0xFB	; 251
     634:	80 83       	st	Z, r24
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     636:	21 50       	subi	r18, 0x01	; 1
     638:	31 09       	sbc	r19, r1
     63a:	86 e0       	ldi	r24, 0x06	; 6
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	80 1b       	sub	r24, r16
     640:	91 0b       	sbc	r25, r17
     642:	28 17       	cp	r18, r24
     644:	39 07       	cpc	r19, r25
     646:	6c f7       	brge	.-38     	; 0x622 <__stack+0x1c3>
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	07 c0       	rjmp	.+14     	; 0x65c <__stack+0x1fd>
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
		            conv_buffer[i] = '0';
     64e:	f9 01       	movw	r30, r18
     650:	e0 5d       	subi	r30, 0xD0	; 208
     652:	fb 4f       	sbci	r31, 0xFB	; 251
     654:	40 e3       	ldi	r20, 0x30	; 48
     656:	40 83       	st	Z, r20
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
     658:	2f 5f       	subi	r18, 0xFF	; 255
     65a:	3f 4f       	sbci	r19, 0xFF	; 255
     65c:	28 17       	cp	r18, r24
     65e:	39 07       	cpc	r19, r25
     660:	b4 f3       	brlt	.-20     	; 0x64e <__stack+0x1ef>
		            conv_buffer[i] = '0';
	            }
	            //print_string(conv_buffer);
	            moist_vars[k-1]=atoi(conv_buffer);
     662:	80 e3       	ldi	r24, 0x30	; 48
     664:	94 e0       	ldi	r25, 0x04	; 4
     666:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     66a:	f7 01       	movw	r30, r14
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	e8 5d       	subi	r30, 0xD8	; 216
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	91 83       	std	Z+1, r25	; 0x01
     678:	80 83       	st	Z, r24
            }
			
			
			//get temperature variance
			clear_buffer(); //flush potential ServedClient
     67a:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Tmp_var%d\"\n", k);
     67e:	ff 92       	push	r15
     680:	ef 92       	push	r14
     682:	82 eb       	ldi	r24, 0xB2	; 178
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	9f 93       	push	r25
     688:	8f 93       	push	r24
     68a:	8b e2       	ldi	r24, 0x2B	; 43
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
			serialWrite(string_to_send);
     696:	8b e2       	ldi	r24, 0x2B	; 43
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
            
			counter=0;
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
     69e:	0f 90       	pop	r0
     6a0:	0f 90       	pop	r0
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     6ae:	82 32       	cpi	r24, 0x22	; 34
     6b0:	11 f0       	breq	.+4      	; 0x6b6 <__stack+0x257>
     6b2:	cc 23       	and	r28, r28
     6b4:	d1 f3       	breq	.-12     	; 0x6aa <__stack+0x24b>
			c=usart_receive(); //read most significant digit
     6b6:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(c=='F')
     6ba:	86 34       	cpi	r24, 0x46	; 70
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <__stack+0x261>
			failed=true;
     6be:	c1 e0       	ldi	r28, 0x01	; 1
     6c0:	00 e0       	ldi	r16, 0x00	; 0
     6c2:	10 e0       	ldi	r17, 0x00	; 0
     6c4:	0b c0       	rjmp	.+22     	; 0x6dc <__stack+0x27d>
			while(c != '"' && !failed){ // read the whole number (until " is read)
				conv_buffer[counter++]=c;
     6c6:	68 01       	movw	r12, r16
     6c8:	2f ef       	ldi	r18, 0xFF	; 255
     6ca:	c2 1a       	sub	r12, r18
     6cc:	d2 0a       	sbc	r13, r18
     6ce:	f8 01       	movw	r30, r16
     6d0:	e0 5d       	subi	r30, 0xD0	; 208
     6d2:	fb 4f       	sbci	r31, 0xFB	; 251
     6d4:	80 83       	st	Z, r24
				c = usart_receive();
     6d6:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){ // read the whole number (until " is read)
				conv_buffer[counter++]=c;
     6da:	86 01       	movw	r16, r12
			counter=0;
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){ // read the whole number (until " is read)
     6dc:	82 32       	cpi	r24, 0x22	; 34
     6de:	11 f0       	breq	.+4      	; 0x6e4 <__stack+0x285>
     6e0:	cc 23       	and	r28, r28
     6e2:	89 f3       	breq	.-30     	; 0x6c6 <__stack+0x267>
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
     6e4:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(!failed){
     6e8:	c1 11       	cpse	r28, r1
     6ea:	2f c0       	rjmp	.+94     	; 0x74a <__stack+0x2eb>
     6ec:	25 e0       	ldi	r18, 0x05	; 5
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	0c c0       	rjmp	.+24     	; 0x70a <__stack+0x2ab>
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
     6f2:	f9 01       	movw	r30, r18
     6f4:	e8 1b       	sub	r30, r24
     6f6:	f9 0b       	sbc	r31, r25
     6f8:	e0 5d       	subi	r30, 0xD0	; 208
     6fa:	fb 4f       	sbci	r31, 0xFB	; 251
     6fc:	80 81       	ld	r24, Z
     6fe:	f9 01       	movw	r30, r18
     700:	e0 5d       	subi	r30, 0xD0	; 208
     702:	fb 4f       	sbci	r31, 0xFB	; 251
     704:	80 83       	st	Z, r24
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     706:	21 50       	subi	r18, 0x01	; 1
     708:	31 09       	sbc	r19, r1
     70a:	86 e0       	ldi	r24, 0x06	; 6
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	80 1b       	sub	r24, r16
     710:	91 0b       	sbc	r25, r17
     712:	28 17       	cp	r18, r24
     714:	39 07       	cpc	r19, r25
     716:	6c f7       	brge	.-38     	; 0x6f2 <__stack+0x293>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	07 c0       	rjmp	.+14     	; 0x72c <__stack+0x2cd>
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
					conv_buffer[i] = '0';
     71e:	f9 01       	movw	r30, r18
     720:	e0 5d       	subi	r30, 0xD0	; 208
     722:	fb 4f       	sbci	r31, 0xFB	; 251
     724:	40 e3       	ldi	r20, 0x30	; 48
     726:	40 83       	st	Z, r20
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
     728:	2f 5f       	subi	r18, 0xFF	; 255
     72a:	3f 4f       	sbci	r19, 0xFF	; 255
     72c:	28 17       	cp	r18, r24
     72e:	39 07       	cpc	r19, r25
     730:	b4 f3       	brlt	.-20     	; 0x71e <__stack+0x2bf>
					conv_buffer[i] = '0';
				}
				//print_string(conv_buffer);
				tmp_vars[k-1]=atoi(conv_buffer);
     732:	80 e3       	ldi	r24, 0x30	; 48
     734:	94 e0       	ldi	r25, 0x04	; 4
     736:	0e 94 41 09 	call	0x1282	; 0x1282 <atoi>
     73a:	f7 01       	movw	r30, r14
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	ea 5d       	subi	r30, 0xDA	; 218
     744:	fd 4f       	sbci	r31, 0xFD	; 253
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
    char c;
    bool failed;
    int counter =0, watering_pot = 0, leds;

    if(!first) {
        for(int k=1; k<=middle_boards; ++k){
     74a:	3f ef       	ldi	r19, 0xFF	; 255
     74c:	e3 1a       	sub	r14, r19
     74e:	f3 0a       	sbc	r15, r19
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	e8 16       	cp	r14, r24
     754:	f1 04       	cpc	r15, r1
     756:	0c f4       	brge	.+2      	; 0x75a <__stack+0x2fb>
     758:	54 ce       	rjmp	.-856    	; 0x402 <__DATA_REGION_LENGTH__+0x2>
				}
				//print_string(conv_buffer);
				tmp_vars[k-1]=atoi(conv_buffer);
			}
        }
        if(!failed) {
     75a:	c1 11       	cpse	r28, r1
     75c:	c6 c0       	rjmp	.+396    	; 0x8ea <__stack+0x48b>
            lcd_clear();
     75e:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_clear>
            leds = 1;
            watering_pot=0;
            for(int k=1; k<=middle_boards; ++k){//fix temperature!!!!!!
     762:	01 e0       	ldi	r16, 0x01	; 1
     764:	10 e0       	ldi	r17, 0x00	; 0
				tmp_vars[k-1]=atoi(conv_buffer);
			}
        }
        if(!failed) {
            lcd_clear();
            leds = 1;
     766:	c1 e0       	ldi	r28, 0x01	; 1
     768:	d0 e0       	ldi	r29, 0x00	; 0
            watering_pot=0;
     76a:	e1 2c       	mov	r14, r1
     76c:	f1 2c       	mov	r15, r1
            for(int k=1; k<=middle_boards; ++k){//fix temperature!!!!!!
     76e:	b5 c0       	rjmp	.+362    	; 0x8da <__stack+0x47b>
                sprintf(string_to_print, "T %d: %.1f ", k, tmp_avgs[k]);
     770:	f8 01       	movw	r30, r16
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	ee 0f       	add	r30, r30
     778:	ff 1f       	adc	r31, r31
     77a:	e5 55       	subi	r30, 0x55	; 85
     77c:	fc 4f       	sbci	r31, 0xFC	; 252
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	22 81       	ldd	r18, Z+2	; 0x02
     784:	33 81       	ldd	r19, Z+3	; 0x03
     786:	3f 93       	push	r19
     788:	2f 93       	push	r18
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	1f 93       	push	r17
     790:	0f 93       	push	r16
     792:	8c ec       	ldi	r24, 0xCC	; 204
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	8f ea       	ldi	r24, 0xAF	; 175
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
                print_string(string_to_print);
     7a6:	8f ea       	ldi	r24, 0xAF	; 175
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>

                if(moist_avgs[k]>=640){
     7ae:	f8 01       	movw	r30, r16
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	ec 5d       	subi	r30, 0xDC	; 220
     7b6:	fd 4f       	sbci	r31, 0xFD	; 253
     7b8:	80 81       	ld	r24, Z
     7ba:	91 81       	ldd	r25, Z+1	; 0x01
     7bc:	2d b7       	in	r18, 0x3d	; 61
     7be:	3e b7       	in	r19, 0x3e	; 62
     7c0:	26 5f       	subi	r18, 0xF6	; 246
     7c2:	3f 4f       	sbci	r19, 0xFF	; 255
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	3e bf       	out	0x3e, r19	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	2d bf       	out	0x3d, r18	; 61
     7ce:	80 38       	cpi	r24, 0x80	; 128
     7d0:	32 e0       	ldi	r19, 0x02	; 2
     7d2:	93 07       	cpc	r25, r19
     7d4:	7c f0       	brlt	.+30     	; 0x7f4 <__stack+0x395>
                    strcpy(string_to_print, "VDRY");
     7d6:	85 e0       	ldi	r24, 0x05	; 5
     7d8:	e8 ed       	ldi	r30, 0xD8	; 216
     7da:	f0 e0       	ldi	r31, 0x00	; 0
     7dc:	af ea       	ldi	r26, 0xAF	; 175
     7de:	b3 e0       	ldi	r27, 0x03	; 3
     7e0:	01 90       	ld	r0, Z+
     7e2:	0d 92       	st	X+, r0
     7e4:	8a 95       	dec	r24
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <__stack+0x381>
                    dry[k]=1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	f8 01       	movw	r30, r16
     7ec:	e6 5d       	subi	r30, 0xD6	; 214
     7ee:	fd 4f       	sbci	r31, 0xFD	; 253
     7f0:	80 83       	st	Z, r24
     7f2:	33 c0       	rjmp	.+102    	; 0x85a <__stack+0x3fb>
                }
                else if(moist_avgs[k]>=410){
     7f4:	8a 39       	cpi	r24, 0x9A	; 154
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	92 07       	cpc	r25, r18
     7fa:	84 f0       	brlt	.+32     	; 0x81c <__stack+0x3bd>
                    dry[k]=1;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	f8 01       	movw	r30, r16
     800:	e6 5d       	subi	r30, 0xD6	; 214
     802:	fd 4f       	sbci	r31, 0xFD	; 253
     804:	80 83       	st	Z, r24
                    strcpy(string_to_print, "DRY");
     806:	ef ea       	ldi	r30, 0xAF	; 175
     808:	f3 e0       	ldi	r31, 0x03	; 3
     80a:	84 e4       	ldi	r24, 0x44	; 68
     80c:	92 e5       	ldi	r25, 0x52	; 82
     80e:	91 83       	std	Z+1, r25	; 0x01
     810:	80 83       	st	Z, r24
     812:	89 e5       	ldi	r24, 0x59	; 89
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	93 83       	std	Z+3, r25	; 0x03
     818:	82 83       	std	Z+2, r24	; 0x02
     81a:	1f c0       	rjmp	.+62     	; 0x85a <__stack+0x3fb>
                }
                else if(moist_avgs[k]>=200) {
     81c:	88 3c       	cpi	r24, 0xC8	; 200
     81e:	91 05       	cpc	r25, r1
     820:	7c f0       	brlt	.+30     	; 0x840 <__stack+0x3e1>
                    dry[k]=0;
     822:	f8 01       	movw	r30, r16
     824:	e6 5d       	subi	r30, 0xD6	; 214
     826:	fd 4f       	sbci	r31, 0xFD	; 253
     828:	10 82       	st	Z, r1
                    strcpy(string_to_print, "HUM");
     82a:	ef ea       	ldi	r30, 0xAF	; 175
     82c:	f3 e0       	ldi	r31, 0x03	; 3
     82e:	88 e4       	ldi	r24, 0x48	; 72
     830:	95 e5       	ldi	r25, 0x55	; 85
     832:	91 83       	std	Z+1, r25	; 0x01
     834:	80 83       	st	Z, r24
     836:	8d e4       	ldi	r24, 0x4D	; 77
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	93 83       	std	Z+3, r25	; 0x03
     83c:	82 83       	std	Z+2, r24	; 0x02
     83e:	0d c0       	rjmp	.+26     	; 0x85a <__stack+0x3fb>
                }
                else{
                    dry[k]=0;
     840:	f8 01       	movw	r30, r16
     842:	e6 5d       	subi	r30, 0xD6	; 214
     844:	fd 4f       	sbci	r31, 0xFD	; 253
     846:	10 82       	st	Z, r1
                    strcpy(string_to_print, "VHUM");
     848:	85 e0       	ldi	r24, 0x05	; 5
     84a:	ed ed       	ldi	r30, 0xDD	; 221
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	af ea       	ldi	r26, 0xAF	; 175
     850:	b3 e0       	ldi	r27, 0x03	; 3
     852:	01 90       	ld	r0, Z+
     854:	0d 92       	st	X+, r0
     856:	8a 95       	dec	r24
     858:	e1 f7       	brne	.-8      	; 0x852 <__stack+0x3f3>
                }

                print_string(string_to_print);
     85a:	8f ea       	ldi	r24, 0xAF	; 175
     85c:	93 e0       	ldi	r25, 0x03	; 3
     85e:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>
				print('\n'); //change line wont work on actual LCD
     862:	8a e0       	ldi	r24, 0x0A	; 10
     864:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <print>
				
				if(tmp_vars[k]>=15) {
     868:	f8 01       	movw	r30, r16
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	ea 5d       	subi	r30, 0xDA	; 218
     870:	fd 4f       	sbci	r31, 0xFD	; 253
     872:	80 81       	ld	r24, Z
     874:	91 81       	ldd	r25, Z+1	; 0x01
     876:	0f 97       	sbiw	r24, 0x0f	; 15
     878:	6c f0       	brlt	.+26     	; 0x894 <__stack+0x435>
					strcpy(string_to_print, "TMP VAR! ");
     87a:	8a e0       	ldi	r24, 0x0A	; 10
     87c:	e2 ee       	ldi	r30, 0xE2	; 226
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	af ea       	ldi	r26, 0xAF	; 175
     882:	b3 e0       	ldi	r27, 0x03	; 3
     884:	01 90       	ld	r0, Z+
     886:	0d 92       	st	X+, r0
     888:	8a 95       	dec	r24
     88a:	e1 f7       	brne	.-8      	; 0x884 <__stack+0x425>
					print_string(string_to_print);
     88c:	8f ea       	ldi	r24, 0xAF	; 175
     88e:	93 e0       	ldi	r25, 0x03	; 3
     890:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>
				}
				if(moist_vars[k]>=80) {
     894:	f8 01       	movw	r30, r16
     896:	ee 0f       	add	r30, r30
     898:	ff 1f       	adc	r31, r31
     89a:	e8 5d       	subi	r30, 0xD8	; 216
     89c:	fd 4f       	sbci	r31, 0xFD	; 253
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	80 35       	cpi	r24, 0x50	; 80
     8a4:	91 05       	cpc	r25, r1
     8a6:	6c f0       	brlt	.+26     	; 0x8c2 <__stack+0x463>
					strcpy(string_to_print, "MST VAR!");
     8a8:	89 e0       	ldi	r24, 0x09	; 9
     8aa:	ec ee       	ldi	r30, 0xEC	; 236
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	af ea       	ldi	r26, 0xAF	; 175
     8b0:	b3 e0       	ldi	r27, 0x03	; 3
     8b2:	01 90       	ld	r0, Z+
     8b4:	0d 92       	st	X+, r0
     8b6:	8a 95       	dec	r24
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <__stack+0x453>
					print_string(string_to_print);
     8ba:	8f ea       	ldi	r24, 0xAF	; 175
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>
				}
                
                if(dry[k])
     8c2:	f8 01       	movw	r30, r16
     8c4:	e6 5d       	subi	r30, 0xD6	; 214
     8c6:	fd 4f       	sbci	r31, 0xFD	; 253
     8c8:	80 81       	ld	r24, Z
     8ca:	88 23       	and	r24, r24
     8cc:	11 f0       	breq	.+4      	; 0x8d2 <__stack+0x473>
                    watering_pot = watering_pot | leds;
     8ce:	ec 2a       	or	r14, r28
     8d0:	fd 2a       	or	r15, r29
                leds = leds << 1;
     8d2:	cc 0f       	add	r28, r28
     8d4:	dd 1f       	adc	r29, r29
        }
        if(!failed) {
            lcd_clear();
            leds = 1;
            watering_pot=0;
            for(int k=1; k<=middle_boards; ++k){//fix temperature!!!!!!
     8d6:	0f 5f       	subi	r16, 0xFF	; 255
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	02 30       	cpi	r16, 0x02	; 2
     8dc:	11 05       	cpc	r17, r1
     8de:	0c f4       	brge	.+2      	; 0x8e2 <__stack+0x483>
     8e0:	47 cf       	rjmp	.-370    	; 0x770 <__stack+0x311>
                
                if(dry[k])
                    watering_pot = watering_pot | leds;
                leds = leds << 1;
            }
            PORTB = watering_pot;
     8e2:	e8 ba       	out	0x18, r14	; 24
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x48b>
        }
    }
    else
        first=false;
     8e6:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <first>
    //lcd_clear();
	sei();
     8ea:	78 94       	sei
    TCNT1 = 3036;
     8ec:	8c ed       	ldi	r24, 0xDC	; 220
     8ee:	9b e0       	ldi	r25, 0x0B	; 11
     8f0:	9d bd       	out	0x2d, r25	; 45
     8f2:	8c bd       	out	0x2c, r24	; 44
}
     8f4:	ff 91       	pop	r31
     8f6:	ef 91       	pop	r30
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	0f 90       	pop	r0
     91e:	0f be       	out	0x3f, r0	; 63
     920:	0f 90       	pop	r0
     922:	1f 90       	pop	r1
     924:	18 95       	reti

00000926 <main>:


int main() {
	first = true;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <first>
    //Receiver and Transmitter Enable, RX_interrupt enable, TX_interrupt enable

    UCSRB = (1 << TXEN) | (1 << TXCIE) | (1 << RXEN) | (1 << RXCIE);
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); //Char size(8 bits)*/
	
	usart_init(MYUBRR);
     92c:	83 e3       	ldi	r24, 0x33	; 51
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 8a 01 	call	0x314	; 0x314 <usart_init>
	
    for(int i=0; i<middle_boards; ++i) { //initialize_values
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	1e c0       	rjmp	.+60     	; 0x976 <main+0x50>
        moist_avgs[i]=0;
     93a:	9c 01       	movw	r18, r24
     93c:	22 0f       	add	r18, r18
     93e:	33 1f       	adc	r19, r19
     940:	f9 01       	movw	r30, r18
     942:	ec 5d       	subi	r30, 0xDC	; 220
     944:	fd 4f       	sbci	r31, 0xFD	; 253
     946:	11 82       	std	Z+1, r1	; 0x01
     948:	10 82       	st	Z, r1
        tmp_avgs[i]=0.0;
     94a:	fc 01       	movw	r30, r24
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	e5 55       	subi	r30, 0x55	; 85
     956:	fc 4f       	sbci	r31, 0xFC	; 252
     958:	10 82       	st	Z, r1
     95a:	11 82       	std	Z+1, r1	; 0x01
     95c:	12 82       	std	Z+2, r1	; 0x02
     95e:	13 82       	std	Z+3, r1	; 0x03
        moist_vars[i]=0;
     960:	f9 01       	movw	r30, r18
     962:	e8 5d       	subi	r30, 0xD8	; 216
     964:	fd 4f       	sbci	r31, 0xFD	; 253
     966:	11 82       	std	Z+1, r1	; 0x01
     968:	10 82       	st	Z, r1
        tmp_vars[i]=0;
     96a:	f9 01       	movw	r30, r18
     96c:	ea 5d       	subi	r30, 0xDA	; 218
     96e:	fd 4f       	sbci	r31, 0xFD	; 253
     970:	11 82       	std	Z+1, r1	; 0x01
     972:	10 82       	st	Z, r1
    UCSRB = (1 << TXEN) | (1 << TXCIE) | (1 << RXEN) | (1 << RXCIE);
    UCSRC = (1 << UCSZ1) | (1 << UCSZ0); //Char size(8 bits)*/
	
	usart_init(MYUBRR);
	
    for(int i=0; i<middle_boards; ++i) { //initialize_values
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	18 16       	cp	r1, r24
     978:	19 06       	cpc	r1, r25
     97a:	fc f6       	brge	.-66     	; 0x93a <main+0x14>
        tmp_avgs[i]=0.0;
        moist_vars[i]=0;
        tmp_vars[i]=0;
    }

    usart_transmit('\n'); //to flush serial
     97c:	8a e0       	ldi	r24, 0x0A	; 10
     97e:	0e 94 92 01 	call	0x324	; 0x324 <usart_transmit>
    
    strcpy(string_to_send, "ESP:restart\n");
     982:	8d e0       	ldi	r24, 0x0D	; 13
     984:	e5 ef       	ldi	r30, 0xF5	; 245
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	ab e2       	ldi	r26, 0x2B	; 43
     98a:	b2 e0       	ldi	r27, 0x02	; 2
     98c:	01 90       	ld	r0, Z+
     98e:	0d 92       	st	X+, r0
     990:	8a 95       	dec	r24
     992:	e1 f7       	brne	.-8      	; 0x98c <main+0x66>
    serialWrite(string_to_send);
     994:	8b e2       	ldi	r24, 0x2B	; 43
     996:	92 e0       	ldi	r25, 0x02	; 2
     998:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
    
    usart_receive(); //wait until restart is complete
     99c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
    while(UCSRA&(1<<RXC)) //flush read buffer
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <main+0x80>
		usart_receive();
     9a2:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
    
    strcpy(string_to_send, "ESP:restart\n");
    serialWrite(string_to_send);
    
    usart_receive(); //wait until restart is complete
    while(UCSRA&(1<<RXC)) //flush read buffer
     9a6:	5f 99       	sbic	0x0b, 7	; 11
     9a8:	fc cf       	rjmp	.-8      	; 0x9a2 <main+0x7c>
		usart_receive();
    
    wait_msec(2000);
     9aa:	80 ed       	ldi	r24, 0xD0	; 208
     9ac:	97 e0       	ldi	r25, 0x07	; 7
     9ae:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <wait_msec>
	
	strcpy(string_to_send, "ESP:ssid:\"Main_Board\"\n");
     9b2:	87 e1       	ldi	r24, 0x17	; 23
     9b4:	e2 e0       	ldi	r30, 0x02	; 2
     9b6:	f1 e0       	ldi	r31, 0x01	; 1
     9b8:	ab e2       	ldi	r26, 0x2B	; 43
     9ba:	b2 e0       	ldi	r27, 0x02	; 2
     9bc:	01 90       	ld	r0, Z+
     9be:	0d 92       	st	X+, r0
     9c0:	8a 95       	dec	r24
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <main+0x96>
	sendCommand(string_to_send);
     9c4:	8b e2       	ldi	r24, 0x2B	; 43
     9c6:	92 e0       	ldi	r25, 0x02	; 2
     9c8:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	for(int i=1; i<=middle_boards; ++i) {
     9cc:	c1 e0       	ldi	r28, 0x01	; 1
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
     9d0:	85 c0       	rjmp	.+266    	; 0xadc <main+0x1b6>

		sprintf(string_to_send, "ESP:addSensor: \"Moist_avg%d\"\n", i);
     9d2:	df 93       	push	r29
     9d4:	cf 93       	push	r28
     9d6:	89 e1       	ldi	r24, 0x19	; 25
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	0b e2       	ldi	r16, 0x2B	; 43
     9e0:	12 e0       	ldi	r17, 0x02	; 2
     9e2:	1f 93       	push	r17
     9e4:	0f 93       	push	r16
     9e6:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send);
     9ea:	c8 01       	movw	r24, r16
     9ec:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:addSensor: \"Tmp_avg%d\"\n", i);
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	87 e3       	ldi	r24, 0x37	; 55
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
     9fc:	1f 93       	push	r17
     9fe:	0f 93       	push	r16
     a00:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send);
     a04:	c8 01       	movw	r24, r16
     a06:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:addSensor: \"Moist_var%d\"\n", i);
     a0a:	df 93       	push	r29
     a0c:	cf 93       	push	r28
     a0e:	83 e5       	ldi	r24, 0x53	; 83
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	1f 93       	push	r17
     a18:	0f 93       	push	r16
     a1a:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send);
     a1e:	c8 01       	movw	r24, r16
     a20:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:addSensor: \"Tmp_var%d\"\n", i);
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	81 e7       	ldi	r24, 0x71	; 113
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	9f 93       	push	r25
     a2e:	8f 93       	push	r24
     a30:	1f 93       	push	r17
     a32:	0f 93       	push	r16
     a34:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send);
     a38:	c8 01       	movw	r24, r16
     a3a:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
		
		sprintf(string_to_send, "ESP:sensorValue:\"Moist_avg%d\"[%d]\n", i, 0);
     a3e:	1f 92       	push	r1
     a40:	1f 92       	push	r1
     a42:	df 93       	push	r29
     a44:	cf 93       	push	r28
     a46:	8d e8       	ldi	r24, 0x8D	; 141
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	9f 93       	push	r25
     a4c:	8f 93       	push	r24
     a4e:	1f 93       	push	r17
     a50:	0f 93       	push	r16
     a52:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send); //initialize value of sensors to 0
     a56:	8d b7       	in	r24, 0x3d	; 61
     a58:	9e b7       	in	r25, 0x3e	; 62
     a5a:	80 96       	adiw	r24, 0x20	; 32
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	9e bf       	out	0x3e, r25	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	8d bf       	out	0x3d, r24	; 61
     a66:	c8 01       	movw	r24, r16
     a68:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
		
		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_avg%d\"[%.1f]\n", i, 0.0);
     a6c:	1f 92       	push	r1
     a6e:	1f 92       	push	r1
     a70:	1f 92       	push	r1
     a72:	1f 92       	push	r1
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	80 eb       	ldi	r24, 0xB0	; 176
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	9f 93       	push	r25
     a7e:	8f 93       	push	r24
     a80:	1f 93       	push	r17
     a82:	0f 93       	push	r16
     a84:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send);
     a88:	c8 01       	movw	r24, r16
     a8a:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:sensorValue:\"Moist_var%d\"[%d]\n", i, 0);
     a8e:	1f 92       	push	r1
     a90:	1f 92       	push	r1
     a92:	df 93       	push	r29
     a94:	cf 93       	push	r28
     a96:	83 ed       	ldi	r24, 0xD3	; 211
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	9f 93       	push	r25
     a9c:	8f 93       	push	r24
     a9e:	1f 93       	push	r17
     aa0:	0f 93       	push	r16
     aa2:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send);
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_var%d\"[%d]\n", i, 0);
     aac:	1f 92       	push	r1
     aae:	1f 92       	push	r1
     ab0:	df 93       	push	r29
     ab2:	cf 93       	push	r28
     ab4:	86 ef       	ldi	r24, 0xF6	; 246
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	1f 93       	push	r17
     abe:	0f 93       	push	r16
     ac0:	0e 94 91 0a 	call	0x1522	; 0x1522 <sprintf>
		sendCommand(string_to_send);
     ac4:	c8 01       	movw	r24, r16
     ac6:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
    wait_msec(2000);
	
	strcpy(string_to_send, "ESP:ssid:\"Main_Board\"\n");
	sendCommand(string_to_send);

	for(int i=1; i<=middle_boards; ++i) {
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8d b7       	in	r24, 0x3d	; 61
     ace:	9e b7       	in	r25, 0x3e	; 62
     ad0:	4a 96       	adiw	r24, 0x1a	; 26
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	9e bf       	out	0x3e, r25	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	8d bf       	out	0x3d, r24	; 61
     adc:	c2 30       	cpi	r28, 0x02	; 2
     ade:	d1 05       	cpc	r29, r1
     ae0:	0c f4       	brge	.+2      	; 0xae4 <main+0x1be>
     ae2:	77 cf       	rjmp	.-274    	; 0x9d2 <main+0xac>
		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_var%d\"[%d]\n", i, 0);
		sendCommand(string_to_send);
		
	}
	
	strcpy(string_to_send, "ESP:APStart\n");
     ae4:	8d e0       	ldi	r24, 0x0D	; 13
     ae6:	e7 e1       	ldi	r30, 0x17	; 23
     ae8:	f2 e0       	ldi	r31, 0x02	; 2
     aea:	ab e2       	ldi	r26, 0x2B	; 43
     aec:	b2 e0       	ldi	r27, 0x02	; 2
     aee:	01 90       	ld	r0, Z+
     af0:	0d 92       	st	X+, r0
     af2:	8a 95       	dec	r24
     af4:	e1 f7       	brne	.-8      	; 0xaee <main+0x1c8>
	sendCommand(string_to_send);
     af6:	8b e2       	ldi	r24, 0x2B	; 43
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

    TCCR1B = 0x05; //CK/1024
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 3036; //8 seconds
     b02:	8c ed       	ldi	r24, 0xDC	; 220
     b04:	9b e0       	ldi	r25, 0x0B	; 11
     b06:	9d bd       	out	0x2d, r25	; 45
     b08:	8c bd       	out	0x2c, r24	; 44
	TIMSK = 0x04; //enable overflow interrupt for TCNT1
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	89 bf       	out	0x39, r24	; 57
    sei();
     b0e:	78 94       	sei
     b10:	ff cf       	rjmp	.-2      	; 0xb10 <main+0x1ea>

00000b12 <vfprintf>:
     b12:	a0 e1       	ldi	r26, 0x10	; 16
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	ef e8       	ldi	r30, 0x8F	; 143
     b18:	f5 e0       	ldi	r31, 0x05	; 5
     b1a:	0c 94 06 09 	jmp	0x120c	; 0x120c <__prologue_saves__>
     b1e:	7c 01       	movw	r14, r24
     b20:	1b 01       	movw	r2, r22
     b22:	6a 01       	movw	r12, r20
     b24:	fc 01       	movw	r30, r24
     b26:	17 82       	std	Z+7, r1	; 0x07
     b28:	16 82       	std	Z+6, r1	; 0x06
     b2a:	83 81       	ldd	r24, Z+3	; 0x03
     b2c:	81 ff       	sbrs	r24, 1
     b2e:	44 c3       	rjmp	.+1672   	; 0x11b8 <vfprintf+0x6a6>
     b30:	9e 01       	movw	r18, r28
     b32:	2f 5f       	subi	r18, 0xFF	; 255
     b34:	3f 4f       	sbci	r19, 0xFF	; 255
     b36:	39 01       	movw	r6, r18
     b38:	f7 01       	movw	r30, r14
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	f1 01       	movw	r30, r2
     b3e:	93 fd       	sbrc	r25, 3
     b40:	85 91       	lpm	r24, Z+
     b42:	93 ff       	sbrs	r25, 3
     b44:	81 91       	ld	r24, Z+
     b46:	1f 01       	movw	r2, r30
     b48:	88 23       	and	r24, r24
     b4a:	09 f4       	brne	.+2      	; 0xb4e <vfprintf+0x3c>
     b4c:	31 c3       	rjmp	.+1634   	; 0x11b0 <vfprintf+0x69e>
     b4e:	85 32       	cpi	r24, 0x25	; 37
     b50:	39 f4       	brne	.+14     	; 0xb60 <vfprintf+0x4e>
     b52:	93 fd       	sbrc	r25, 3
     b54:	85 91       	lpm	r24, Z+
     b56:	93 ff       	sbrs	r25, 3
     b58:	81 91       	ld	r24, Z+
     b5a:	1f 01       	movw	r2, r30
     b5c:	85 32       	cpi	r24, 0x25	; 37
     b5e:	39 f4       	brne	.+14     	; 0xb6e <vfprintf+0x5c>
     b60:	b7 01       	movw	r22, r14
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     b68:	56 01       	movw	r10, r12
     b6a:	65 01       	movw	r12, r10
     b6c:	e5 cf       	rjmp	.-54     	; 0xb38 <vfprintf+0x26>
     b6e:	10 e0       	ldi	r17, 0x00	; 0
     b70:	51 2c       	mov	r5, r1
     b72:	91 2c       	mov	r9, r1
     b74:	ff e1       	ldi	r31, 0x1F	; 31
     b76:	f9 15       	cp	r31, r9
     b78:	d8 f0       	brcs	.+54     	; 0xbb0 <vfprintf+0x9e>
     b7a:	8b 32       	cpi	r24, 0x2B	; 43
     b7c:	79 f0       	breq	.+30     	; 0xb9c <vfprintf+0x8a>
     b7e:	38 f4       	brcc	.+14     	; 0xb8e <vfprintf+0x7c>
     b80:	80 32       	cpi	r24, 0x20	; 32
     b82:	79 f0       	breq	.+30     	; 0xba2 <vfprintf+0x90>
     b84:	83 32       	cpi	r24, 0x23	; 35
     b86:	a1 f4       	brne	.+40     	; 0xbb0 <vfprintf+0x9e>
     b88:	f9 2d       	mov	r31, r9
     b8a:	f0 61       	ori	r31, 0x10	; 16
     b8c:	2e c0       	rjmp	.+92     	; 0xbea <vfprintf+0xd8>
     b8e:	8d 32       	cpi	r24, 0x2D	; 45
     b90:	61 f0       	breq	.+24     	; 0xbaa <vfprintf+0x98>
     b92:	80 33       	cpi	r24, 0x30	; 48
     b94:	69 f4       	brne	.+26     	; 0xbb0 <vfprintf+0x9e>
     b96:	29 2d       	mov	r18, r9
     b98:	21 60       	ori	r18, 0x01	; 1
     b9a:	2d c0       	rjmp	.+90     	; 0xbf6 <vfprintf+0xe4>
     b9c:	39 2d       	mov	r19, r9
     b9e:	32 60       	ori	r19, 0x02	; 2
     ba0:	93 2e       	mov	r9, r19
     ba2:	89 2d       	mov	r24, r9
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	98 2e       	mov	r9, r24
     ba8:	2a c0       	rjmp	.+84     	; 0xbfe <vfprintf+0xec>
     baa:	e9 2d       	mov	r30, r9
     bac:	e8 60       	ori	r30, 0x08	; 8
     bae:	15 c0       	rjmp	.+42     	; 0xbda <vfprintf+0xc8>
     bb0:	97 fc       	sbrc	r9, 7
     bb2:	2d c0       	rjmp	.+90     	; 0xc0e <vfprintf+0xfc>
     bb4:	20 ed       	ldi	r18, 0xD0	; 208
     bb6:	28 0f       	add	r18, r24
     bb8:	2a 30       	cpi	r18, 0x0A	; 10
     bba:	88 f4       	brcc	.+34     	; 0xbde <vfprintf+0xcc>
     bbc:	96 fe       	sbrs	r9, 6
     bbe:	06 c0       	rjmp	.+12     	; 0xbcc <vfprintf+0xba>
     bc0:	3a e0       	ldi	r19, 0x0A	; 10
     bc2:	13 9f       	mul	r17, r19
     bc4:	20 0d       	add	r18, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	12 2f       	mov	r17, r18
     bca:	19 c0       	rjmp	.+50     	; 0xbfe <vfprintf+0xec>
     bcc:	8a e0       	ldi	r24, 0x0A	; 10
     bce:	58 9e       	mul	r5, r24
     bd0:	20 0d       	add	r18, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	52 2e       	mov	r5, r18
     bd6:	e9 2d       	mov	r30, r9
     bd8:	e0 62       	ori	r30, 0x20	; 32
     bda:	9e 2e       	mov	r9, r30
     bdc:	10 c0       	rjmp	.+32     	; 0xbfe <vfprintf+0xec>
     bde:	8e 32       	cpi	r24, 0x2E	; 46
     be0:	31 f4       	brne	.+12     	; 0xbee <vfprintf+0xdc>
     be2:	96 fc       	sbrc	r9, 6
     be4:	e5 c2       	rjmp	.+1482   	; 0x11b0 <vfprintf+0x69e>
     be6:	f9 2d       	mov	r31, r9
     be8:	f0 64       	ori	r31, 0x40	; 64
     bea:	9f 2e       	mov	r9, r31
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <vfprintf+0xec>
     bee:	8c 36       	cpi	r24, 0x6C	; 108
     bf0:	21 f4       	brne	.+8      	; 0xbfa <vfprintf+0xe8>
     bf2:	29 2d       	mov	r18, r9
     bf4:	20 68       	ori	r18, 0x80	; 128
     bf6:	92 2e       	mov	r9, r18
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <vfprintf+0xec>
     bfa:	88 36       	cpi	r24, 0x68	; 104
     bfc:	41 f4       	brne	.+16     	; 0xc0e <vfprintf+0xfc>
     bfe:	f1 01       	movw	r30, r2
     c00:	93 fd       	sbrc	r25, 3
     c02:	85 91       	lpm	r24, Z+
     c04:	93 ff       	sbrs	r25, 3
     c06:	81 91       	ld	r24, Z+
     c08:	1f 01       	movw	r2, r30
     c0a:	81 11       	cpse	r24, r1
     c0c:	b3 cf       	rjmp	.-154    	; 0xb74 <vfprintf+0x62>
     c0e:	9b eb       	ldi	r25, 0xBB	; 187
     c10:	98 0f       	add	r25, r24
     c12:	93 30       	cpi	r25, 0x03	; 3
     c14:	20 f4       	brcc	.+8      	; 0xc1e <vfprintf+0x10c>
     c16:	99 2d       	mov	r25, r9
     c18:	90 61       	ori	r25, 0x10	; 16
     c1a:	80 5e       	subi	r24, 0xE0	; 224
     c1c:	07 c0       	rjmp	.+14     	; 0xc2c <vfprintf+0x11a>
     c1e:	9b e9       	ldi	r25, 0x9B	; 155
     c20:	98 0f       	add	r25, r24
     c22:	93 30       	cpi	r25, 0x03	; 3
     c24:	08 f0       	brcs	.+2      	; 0xc28 <vfprintf+0x116>
     c26:	66 c1       	rjmp	.+716    	; 0xef4 <vfprintf+0x3e2>
     c28:	99 2d       	mov	r25, r9
     c2a:	9f 7e       	andi	r25, 0xEF	; 239
     c2c:	96 ff       	sbrs	r25, 6
     c2e:	16 e0       	ldi	r17, 0x06	; 6
     c30:	9f 73       	andi	r25, 0x3F	; 63
     c32:	99 2e       	mov	r9, r25
     c34:	85 36       	cpi	r24, 0x65	; 101
     c36:	19 f4       	brne	.+6      	; 0xc3e <vfprintf+0x12c>
     c38:	90 64       	ori	r25, 0x40	; 64
     c3a:	99 2e       	mov	r9, r25
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <vfprintf+0x13c>
     c3e:	86 36       	cpi	r24, 0x66	; 102
     c40:	21 f4       	brne	.+8      	; 0xc4a <vfprintf+0x138>
     c42:	39 2f       	mov	r19, r25
     c44:	30 68       	ori	r19, 0x80	; 128
     c46:	93 2e       	mov	r9, r19
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <vfprintf+0x13c>
     c4a:	11 11       	cpse	r17, r1
     c4c:	11 50       	subi	r17, 0x01	; 1
     c4e:	97 fe       	sbrs	r9, 7
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <vfprintf+0x14e>
     c52:	1c 33       	cpi	r17, 0x3C	; 60
     c54:	50 f4       	brcc	.+20     	; 0xc6a <vfprintf+0x158>
     c56:	44 24       	eor	r4, r4
     c58:	43 94       	inc	r4
     c5a:	41 0e       	add	r4, r17
     c5c:	27 e0       	ldi	r18, 0x07	; 7
     c5e:	0b c0       	rjmp	.+22     	; 0xc76 <vfprintf+0x164>
     c60:	18 30       	cpi	r17, 0x08	; 8
     c62:	38 f0       	brcs	.+14     	; 0xc72 <vfprintf+0x160>
     c64:	27 e0       	ldi	r18, 0x07	; 7
     c66:	17 e0       	ldi	r17, 0x07	; 7
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <vfprintf+0x162>
     c6a:	27 e0       	ldi	r18, 0x07	; 7
     c6c:	9c e3       	ldi	r25, 0x3C	; 60
     c6e:	49 2e       	mov	r4, r25
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <vfprintf+0x164>
     c72:	21 2f       	mov	r18, r17
     c74:	41 2c       	mov	r4, r1
     c76:	56 01       	movw	r10, r12
     c78:	84 e0       	ldi	r24, 0x04	; 4
     c7a:	a8 0e       	add	r10, r24
     c7c:	b1 1c       	adc	r11, r1
     c7e:	f6 01       	movw	r30, r12
     c80:	60 81       	ld	r22, Z
     c82:	71 81       	ldd	r23, Z+1	; 0x01
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	04 2d       	mov	r16, r4
     c8a:	a3 01       	movw	r20, r6
     c8c:	0e 94 5f 09 	call	0x12be	; 0x12be <__ftoa_engine>
     c90:	6c 01       	movw	r12, r24
     c92:	f9 81       	ldd	r31, Y+1	; 0x01
     c94:	fc 87       	std	Y+12, r31	; 0x0c
     c96:	f0 ff       	sbrs	r31, 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <vfprintf+0x18c>
     c9a:	f3 ff       	sbrs	r31, 3
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0x198>
     c9e:	91 fc       	sbrc	r9, 1
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <vfprintf+0x19c>
     ca2:	92 fe       	sbrs	r9, 2
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x1a0>
     ca6:	00 e2       	ldi	r16, 0x20	; 32
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <vfprintf+0x1a2>
     caa:	0d e2       	ldi	r16, 0x2D	; 45
     cac:	03 c0       	rjmp	.+6      	; 0xcb4 <vfprintf+0x1a2>
     cae:	0b e2       	ldi	r16, 0x2B	; 43
     cb0:	01 c0       	rjmp	.+2      	; 0xcb4 <vfprintf+0x1a2>
     cb2:	00 e0       	ldi	r16, 0x00	; 0
     cb4:	8c 85       	ldd	r24, Y+12	; 0x0c
     cb6:	8c 70       	andi	r24, 0x0C	; 12
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <vfprintf+0x1ae>
     cba:	01 11       	cpse	r16, r1
     cbc:	5a c2       	rjmp	.+1204   	; 0x1172 <vfprintf+0x660>
     cbe:	9b c2       	rjmp	.+1334   	; 0x11f6 <vfprintf+0x6e4>
     cc0:	97 fe       	sbrs	r9, 7
     cc2:	10 c0       	rjmp	.+32     	; 0xce4 <vfprintf+0x1d2>
     cc4:	4c 0c       	add	r4, r12
     cc6:	fc 85       	ldd	r31, Y+12	; 0x0c
     cc8:	f4 ff       	sbrs	r31, 4
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <vfprintf+0x1c2>
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	81 33       	cpi	r24, 0x31	; 49
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <vfprintf+0x1c2>
     cd2:	4a 94       	dec	r4
     cd4:	14 14       	cp	r1, r4
     cd6:	74 f5       	brge	.+92     	; 0xd34 <vfprintf+0x222>
     cd8:	28 e0       	ldi	r18, 0x08	; 8
     cda:	24 15       	cp	r18, r4
     cdc:	78 f5       	brcc	.+94     	; 0xd3c <vfprintf+0x22a>
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	48 2e       	mov	r4, r24
     ce2:	2c c0       	rjmp	.+88     	; 0xd3c <vfprintf+0x22a>
     ce4:	96 fc       	sbrc	r9, 6
     ce6:	2a c0       	rjmp	.+84     	; 0xd3c <vfprintf+0x22a>
     ce8:	81 2f       	mov	r24, r17
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	8c 15       	cp	r24, r12
     cee:	9d 05       	cpc	r25, r13
     cf0:	9c f0       	brlt	.+38     	; 0xd18 <vfprintf+0x206>
     cf2:	3c ef       	ldi	r19, 0xFC	; 252
     cf4:	c3 16       	cp	r12, r19
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	d3 06       	cpc	r13, r19
     cfa:	74 f0       	brlt	.+28     	; 0xd18 <vfprintf+0x206>
     cfc:	89 2d       	mov	r24, r9
     cfe:	80 68       	ori	r24, 0x80	; 128
     d00:	98 2e       	mov	r9, r24
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <vfprintf+0x206>
     d04:	e2 e0       	ldi	r30, 0x02	; 2
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ec 0f       	add	r30, r28
     d0a:	fd 1f       	adc	r31, r29
     d0c:	e1 0f       	add	r30, r17
     d0e:	f1 1d       	adc	r31, r1
     d10:	80 81       	ld	r24, Z
     d12:	80 33       	cpi	r24, 0x30	; 48
     d14:	19 f4       	brne	.+6      	; 0xd1c <vfprintf+0x20a>
     d16:	11 50       	subi	r17, 0x01	; 1
     d18:	11 11       	cpse	r17, r1
     d1a:	f4 cf       	rjmp	.-24     	; 0xd04 <vfprintf+0x1f2>
     d1c:	97 fe       	sbrs	r9, 7
     d1e:	0e c0       	rjmp	.+28     	; 0xd3c <vfprintf+0x22a>
     d20:	44 24       	eor	r4, r4
     d22:	43 94       	inc	r4
     d24:	41 0e       	add	r4, r17
     d26:	81 2f       	mov	r24, r17
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	c8 16       	cp	r12, r24
     d2c:	d9 06       	cpc	r13, r25
     d2e:	2c f4       	brge	.+10     	; 0xd3a <vfprintf+0x228>
     d30:	1c 19       	sub	r17, r12
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <vfprintf+0x22a>
     d34:	44 24       	eor	r4, r4
     d36:	43 94       	inc	r4
     d38:	01 c0       	rjmp	.+2      	; 0xd3c <vfprintf+0x22a>
     d3a:	10 e0       	ldi	r17, 0x00	; 0
     d3c:	97 fe       	sbrs	r9, 7
     d3e:	06 c0       	rjmp	.+12     	; 0xd4c <vfprintf+0x23a>
     d40:	1c 14       	cp	r1, r12
     d42:	1d 04       	cpc	r1, r13
     d44:	34 f4       	brge	.+12     	; 0xd52 <vfprintf+0x240>
     d46:	c6 01       	movw	r24, r12
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <vfprintf+0x244>
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0x244>
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	01 11       	cpse	r16, r1
     d58:	01 96       	adiw	r24, 0x01	; 1
     d5a:	11 23       	and	r17, r17
     d5c:	31 f0       	breq	.+12     	; 0xd6a <vfprintf+0x258>
     d5e:	21 2f       	mov	r18, r17
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	3f 4f       	sbci	r19, 0xFF	; 255
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	25 2d       	mov	r18, r5
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	14 f4       	brge	.+4      	; 0xd78 <vfprintf+0x266>
     d74:	58 1a       	sub	r5, r24
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <vfprintf+0x268>
     d78:	51 2c       	mov	r5, r1
     d7a:	89 2d       	mov	r24, r9
     d7c:	89 70       	andi	r24, 0x09	; 9
     d7e:	49 f4       	brne	.+18     	; 0xd92 <vfprintf+0x280>
     d80:	55 20       	and	r5, r5
     d82:	39 f0       	breq	.+14     	; 0xd92 <vfprintf+0x280>
     d84:	b7 01       	movw	r22, r14
     d86:	80 e2       	ldi	r24, 0x20	; 32
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     d8e:	5a 94       	dec	r5
     d90:	f7 cf       	rjmp	.-18     	; 0xd80 <vfprintf+0x26e>
     d92:	00 23       	and	r16, r16
     d94:	29 f0       	breq	.+10     	; 0xda0 <vfprintf+0x28e>
     d96:	b7 01       	movw	r22, r14
     d98:	80 2f       	mov	r24, r16
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     da0:	93 fc       	sbrc	r9, 3
     da2:	09 c0       	rjmp	.+18     	; 0xdb6 <vfprintf+0x2a4>
     da4:	55 20       	and	r5, r5
     da6:	39 f0       	breq	.+14     	; 0xdb6 <vfprintf+0x2a4>
     da8:	b7 01       	movw	r22, r14
     daa:	80 e3       	ldi	r24, 0x30	; 48
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     db2:	5a 94       	dec	r5
     db4:	f7 cf       	rjmp	.-18     	; 0xda4 <vfprintf+0x292>
     db6:	97 fe       	sbrs	r9, 7
     db8:	4c c0       	rjmp	.+152    	; 0xe52 <vfprintf+0x340>
     dba:	46 01       	movw	r8, r12
     dbc:	d7 fe       	sbrs	r13, 7
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <vfprintf+0x2b2>
     dc0:	81 2c       	mov	r8, r1
     dc2:	91 2c       	mov	r9, r1
     dc4:	c6 01       	movw	r24, r12
     dc6:	88 19       	sub	r24, r8
     dc8:	99 09       	sbc	r25, r9
     dca:	f3 01       	movw	r30, r6
     dcc:	e8 0f       	add	r30, r24
     dce:	f9 1f       	adc	r31, r25
     dd0:	fe 87       	std	Y+14, r31	; 0x0e
     dd2:	ed 87       	std	Y+13, r30	; 0x0d
     dd4:	96 01       	movw	r18, r12
     dd6:	24 19       	sub	r18, r4
     dd8:	31 09       	sbc	r19, r1
     dda:	38 8b       	std	Y+16, r19	; 0x10
     ddc:	2f 87       	std	Y+15, r18	; 0x0f
     dde:	01 2f       	mov	r16, r17
     de0:	10 e0       	ldi	r17, 0x00	; 0
     de2:	11 95       	neg	r17
     de4:	01 95       	neg	r16
     de6:	11 09       	sbc	r17, r1
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	83 16       	cp	r8, r19
     dec:	93 06       	cpc	r9, r19
     dee:	29 f4       	brne	.+10     	; 0xdfa <vfprintf+0x2e8>
     df0:	b7 01       	movw	r22, r14
     df2:	8e e2       	ldi	r24, 0x2E	; 46
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     dfa:	c8 14       	cp	r12, r8
     dfc:	d9 04       	cpc	r13, r9
     dfe:	4c f0       	brlt	.+18     	; 0xe12 <vfprintf+0x300>
     e00:	8f 85       	ldd	r24, Y+15	; 0x0f
     e02:	98 89       	ldd	r25, Y+16	; 0x10
     e04:	88 15       	cp	r24, r8
     e06:	99 05       	cpc	r25, r9
     e08:	24 f4       	brge	.+8      	; 0xe12 <vfprintf+0x300>
     e0a:	ed 85       	ldd	r30, Y+13	; 0x0d
     e0c:	fe 85       	ldd	r31, Y+14	; 0x0e
     e0e:	81 81       	ldd	r24, Z+1	; 0x01
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <vfprintf+0x302>
     e12:	80 e3       	ldi	r24, 0x30	; 48
     e14:	f1 e0       	ldi	r31, 0x01	; 1
     e16:	8f 1a       	sub	r8, r31
     e18:	91 08       	sbc	r9, r1
     e1a:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1c:	3e 85       	ldd	r19, Y+14	; 0x0e
     e1e:	2f 5f       	subi	r18, 0xFF	; 255
     e20:	3f 4f       	sbci	r19, 0xFF	; 255
     e22:	3e 87       	std	Y+14, r19	; 0x0e
     e24:	2d 87       	std	Y+13, r18	; 0x0d
     e26:	80 16       	cp	r8, r16
     e28:	91 06       	cpc	r9, r17
     e2a:	2c f0       	brlt	.+10     	; 0xe36 <vfprintf+0x324>
     e2c:	b7 01       	movw	r22, r14
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     e34:	d9 cf       	rjmp	.-78     	; 0xde8 <vfprintf+0x2d6>
     e36:	c8 14       	cp	r12, r8
     e38:	d9 04       	cpc	r13, r9
     e3a:	41 f4       	brne	.+16     	; 0xe4c <vfprintf+0x33a>
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	96 33       	cpi	r25, 0x36	; 54
     e40:	20 f4       	brcc	.+8      	; 0xe4a <vfprintf+0x338>
     e42:	95 33       	cpi	r25, 0x35	; 53
     e44:	19 f4       	brne	.+6      	; 0xe4c <vfprintf+0x33a>
     e46:	3c 85       	ldd	r19, Y+12	; 0x0c
     e48:	34 ff       	sbrs	r19, 4
     e4a:	81 e3       	ldi	r24, 0x31	; 49
     e4c:	b7 01       	movw	r22, r14
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	4e c0       	rjmp	.+156    	; 0xeee <vfprintf+0x3dc>
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	81 33       	cpi	r24, 0x31	; 49
     e56:	19 f0       	breq	.+6      	; 0xe5e <vfprintf+0x34c>
     e58:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5a:	9f 7e       	andi	r25, 0xEF	; 239
     e5c:	9c 87       	std	Y+12, r25	; 0x0c
     e5e:	b7 01       	movw	r22, r14
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     e66:	11 11       	cpse	r17, r1
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <vfprintf+0x362>
     e6a:	94 fc       	sbrc	r9, 4
     e6c:	18 c0       	rjmp	.+48     	; 0xe9e <vfprintf+0x38c>
     e6e:	85 e6       	ldi	r24, 0x65	; 101
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	17 c0       	rjmp	.+46     	; 0xea2 <vfprintf+0x390>
     e74:	b7 01       	movw	r22, r14
     e76:	8e e2       	ldi	r24, 0x2E	; 46
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     e7e:	1e 5f       	subi	r17, 0xFE	; 254
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	01 e0       	ldi	r16, 0x01	; 1
     e84:	08 0f       	add	r16, r24
     e86:	f3 01       	movw	r30, r6
     e88:	e8 0f       	add	r30, r24
     e8a:	f1 1d       	adc	r31, r1
     e8c:	80 81       	ld	r24, Z
     e8e:	b7 01       	movw	r22, r14
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     e96:	80 2f       	mov	r24, r16
     e98:	01 13       	cpse	r16, r17
     e9a:	f3 cf       	rjmp	.-26     	; 0xe82 <vfprintf+0x370>
     e9c:	e6 cf       	rjmp	.-52     	; 0xe6a <vfprintf+0x358>
     e9e:	85 e4       	ldi	r24, 0x45	; 69
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b7 01       	movw	r22, r14
     ea4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     ea8:	d7 fc       	sbrc	r13, 7
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <vfprintf+0x3a6>
     eac:	c1 14       	cp	r12, r1
     eae:	d1 04       	cpc	r13, r1
     eb0:	41 f4       	brne	.+16     	; 0xec2 <vfprintf+0x3b0>
     eb2:	ec 85       	ldd	r30, Y+12	; 0x0c
     eb4:	e4 ff       	sbrs	r30, 4
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <vfprintf+0x3b0>
     eb8:	d1 94       	neg	r13
     eba:	c1 94       	neg	r12
     ebc:	d1 08       	sbc	r13, r1
     ebe:	8d e2       	ldi	r24, 0x2D	; 45
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <vfprintf+0x3b2>
     ec2:	8b e2       	ldi	r24, 0x2B	; 43
     ec4:	b7 01       	movw	r22, r14
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     ecc:	80 e3       	ldi	r24, 0x30	; 48
     ece:	2a e0       	ldi	r18, 0x0A	; 10
     ed0:	c2 16       	cp	r12, r18
     ed2:	d1 04       	cpc	r13, r1
     ed4:	2c f0       	brlt	.+10     	; 0xee0 <vfprintf+0x3ce>
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	fa e0       	ldi	r31, 0x0A	; 10
     eda:	cf 1a       	sub	r12, r31
     edc:	d1 08       	sbc	r13, r1
     ede:	f7 cf       	rjmp	.-18     	; 0xece <vfprintf+0x3bc>
     ee0:	b7 01       	movw	r22, r14
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     ee8:	b7 01       	movw	r22, r14
     eea:	c6 01       	movw	r24, r12
     eec:	c0 96       	adiw	r24, 0x30	; 48
     eee:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     ef2:	54 c1       	rjmp	.+680    	; 0x119c <vfprintf+0x68a>
     ef4:	83 36       	cpi	r24, 0x63	; 99
     ef6:	31 f0       	breq	.+12     	; 0xf04 <vfprintf+0x3f2>
     ef8:	83 37       	cpi	r24, 0x73	; 115
     efa:	79 f0       	breq	.+30     	; 0xf1a <vfprintf+0x408>
     efc:	83 35       	cpi	r24, 0x53	; 83
     efe:	09 f0       	breq	.+2      	; 0xf02 <vfprintf+0x3f0>
     f00:	56 c0       	rjmp	.+172    	; 0xfae <vfprintf+0x49c>
     f02:	20 c0       	rjmp	.+64     	; 0xf44 <vfprintf+0x432>
     f04:	56 01       	movw	r10, r12
     f06:	32 e0       	ldi	r19, 0x02	; 2
     f08:	a3 0e       	add	r10, r19
     f0a:	b1 1c       	adc	r11, r1
     f0c:	f6 01       	movw	r30, r12
     f0e:	80 81       	ld	r24, Z
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	01 e0       	ldi	r16, 0x01	; 1
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	63 01       	movw	r12, r6
     f18:	12 c0       	rjmp	.+36     	; 0xf3e <vfprintf+0x42c>
     f1a:	56 01       	movw	r10, r12
     f1c:	f2 e0       	ldi	r31, 0x02	; 2
     f1e:	af 0e       	add	r10, r31
     f20:	b1 1c       	adc	r11, r1
     f22:	f6 01       	movw	r30, r12
     f24:	c0 80       	ld	r12, Z
     f26:	d1 80       	ldd	r13, Z+1	; 0x01
     f28:	96 fe       	sbrs	r9, 6
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <vfprintf+0x420>
     f2c:	61 2f       	mov	r22, r17
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <vfprintf+0x424>
     f32:	6f ef       	ldi	r22, 0xFF	; 255
     f34:	7f ef       	ldi	r23, 0xFF	; 255
     f36:	c6 01       	movw	r24, r12
     f38:	0e 94 42 0a 	call	0x1484	; 0x1484 <strnlen>
     f3c:	8c 01       	movw	r16, r24
     f3e:	f9 2d       	mov	r31, r9
     f40:	ff 77       	andi	r31, 0x7F	; 127
     f42:	14 c0       	rjmp	.+40     	; 0xf6c <vfprintf+0x45a>
     f44:	56 01       	movw	r10, r12
     f46:	22 e0       	ldi	r18, 0x02	; 2
     f48:	a2 0e       	add	r10, r18
     f4a:	b1 1c       	adc	r11, r1
     f4c:	f6 01       	movw	r30, r12
     f4e:	c0 80       	ld	r12, Z
     f50:	d1 80       	ldd	r13, Z+1	; 0x01
     f52:	96 fe       	sbrs	r9, 6
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <vfprintf+0x44a>
     f56:	61 2f       	mov	r22, r17
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x44e>
     f5c:	6f ef       	ldi	r22, 0xFF	; 255
     f5e:	7f ef       	ldi	r23, 0xFF	; 255
     f60:	c6 01       	movw	r24, r12
     f62:	0e 94 37 0a 	call	0x146e	; 0x146e <strnlen_P>
     f66:	8c 01       	movw	r16, r24
     f68:	f9 2d       	mov	r31, r9
     f6a:	f0 68       	ori	r31, 0x80	; 128
     f6c:	9f 2e       	mov	r9, r31
     f6e:	f3 fd       	sbrc	r31, 3
     f70:	1a c0       	rjmp	.+52     	; 0xfa6 <vfprintf+0x494>
     f72:	85 2d       	mov	r24, r5
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	08 17       	cp	r16, r24
     f78:	19 07       	cpc	r17, r25
     f7a:	a8 f4       	brcc	.+42     	; 0xfa6 <vfprintf+0x494>
     f7c:	b7 01       	movw	r22, r14
     f7e:	80 e2       	ldi	r24, 0x20	; 32
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     f86:	5a 94       	dec	r5
     f88:	f4 cf       	rjmp	.-24     	; 0xf72 <vfprintf+0x460>
     f8a:	f6 01       	movw	r30, r12
     f8c:	97 fc       	sbrc	r9, 7
     f8e:	85 91       	lpm	r24, Z+
     f90:	97 fe       	sbrs	r9, 7
     f92:	81 91       	ld	r24, Z+
     f94:	6f 01       	movw	r12, r30
     f96:	b7 01       	movw	r22, r14
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
     f9e:	51 10       	cpse	r5, r1
     fa0:	5a 94       	dec	r5
     fa2:	01 50       	subi	r16, 0x01	; 1
     fa4:	11 09       	sbc	r17, r1
     fa6:	01 15       	cp	r16, r1
     fa8:	11 05       	cpc	r17, r1
     faa:	79 f7       	brne	.-34     	; 0xf8a <vfprintf+0x478>
     fac:	f7 c0       	rjmp	.+494    	; 0x119c <vfprintf+0x68a>
     fae:	84 36       	cpi	r24, 0x64	; 100
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <vfprintf+0x4a4>
     fb2:	89 36       	cpi	r24, 0x69	; 105
     fb4:	61 f5       	brne	.+88     	; 0x100e <vfprintf+0x4fc>
     fb6:	56 01       	movw	r10, r12
     fb8:	97 fe       	sbrs	r9, 7
     fba:	09 c0       	rjmp	.+18     	; 0xfce <vfprintf+0x4bc>
     fbc:	24 e0       	ldi	r18, 0x04	; 4
     fbe:	a2 0e       	add	r10, r18
     fc0:	b1 1c       	adc	r11, r1
     fc2:	f6 01       	movw	r30, r12
     fc4:	60 81       	ld	r22, Z
     fc6:	71 81       	ldd	r23, Z+1	; 0x01
     fc8:	82 81       	ldd	r24, Z+2	; 0x02
     fca:	93 81       	ldd	r25, Z+3	; 0x03
     fcc:	0a c0       	rjmp	.+20     	; 0xfe2 <vfprintf+0x4d0>
     fce:	f2 e0       	ldi	r31, 0x02	; 2
     fd0:	af 0e       	add	r10, r31
     fd2:	b1 1c       	adc	r11, r1
     fd4:	f6 01       	movw	r30, r12
     fd6:	60 81       	ld	r22, Z
     fd8:	71 81       	ldd	r23, Z+1	; 0x01
     fda:	07 2e       	mov	r0, r23
     fdc:	00 0c       	add	r0, r0
     fde:	88 0b       	sbc	r24, r24
     fe0:	99 0b       	sbc	r25, r25
     fe2:	f9 2d       	mov	r31, r9
     fe4:	ff 76       	andi	r31, 0x6F	; 111
     fe6:	9f 2e       	mov	r9, r31
     fe8:	97 ff       	sbrs	r25, 7
     fea:	09 c0       	rjmp	.+18     	; 0xffe <vfprintf+0x4ec>
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	f0 68       	ori	r31, 0x80	; 128
     ffc:	9f 2e       	mov	r9, r31
     ffe:	2a e0       	ldi	r18, 0x0A	; 10
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	a3 01       	movw	r20, r6
    1004:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ultoa_invert>
    1008:	c8 2e       	mov	r12, r24
    100a:	c6 18       	sub	r12, r6
    100c:	3f c0       	rjmp	.+126    	; 0x108c <vfprintf+0x57a>
    100e:	09 2d       	mov	r16, r9
    1010:	85 37       	cpi	r24, 0x75	; 117
    1012:	21 f4       	brne	.+8      	; 0x101c <vfprintf+0x50a>
    1014:	0f 7e       	andi	r16, 0xEF	; 239
    1016:	2a e0       	ldi	r18, 0x0A	; 10
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	1d c0       	rjmp	.+58     	; 0x1056 <vfprintf+0x544>
    101c:	09 7f       	andi	r16, 0xF9	; 249
    101e:	8f 36       	cpi	r24, 0x6F	; 111
    1020:	91 f0       	breq	.+36     	; 0x1046 <vfprintf+0x534>
    1022:	18 f4       	brcc	.+6      	; 0x102a <vfprintf+0x518>
    1024:	88 35       	cpi	r24, 0x58	; 88
    1026:	59 f0       	breq	.+22     	; 0x103e <vfprintf+0x52c>
    1028:	c3 c0       	rjmp	.+390    	; 0x11b0 <vfprintf+0x69e>
    102a:	80 37       	cpi	r24, 0x70	; 112
    102c:	19 f0       	breq	.+6      	; 0x1034 <vfprintf+0x522>
    102e:	88 37       	cpi	r24, 0x78	; 120
    1030:	11 f0       	breq	.+4      	; 0x1036 <vfprintf+0x524>
    1032:	be c0       	rjmp	.+380    	; 0x11b0 <vfprintf+0x69e>
    1034:	00 61       	ori	r16, 0x10	; 16
    1036:	04 ff       	sbrs	r16, 4
    1038:	09 c0       	rjmp	.+18     	; 0x104c <vfprintf+0x53a>
    103a:	04 60       	ori	r16, 0x04	; 4
    103c:	07 c0       	rjmp	.+14     	; 0x104c <vfprintf+0x53a>
    103e:	94 fe       	sbrs	r9, 4
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <vfprintf+0x540>
    1042:	06 60       	ori	r16, 0x06	; 6
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <vfprintf+0x540>
    1046:	28 e0       	ldi	r18, 0x08	; 8
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	05 c0       	rjmp	.+10     	; 0x1056 <vfprintf+0x544>
    104c:	20 e1       	ldi	r18, 0x10	; 16
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <vfprintf+0x544>
    1052:	20 e1       	ldi	r18, 0x10	; 16
    1054:	32 e0       	ldi	r19, 0x02	; 2
    1056:	56 01       	movw	r10, r12
    1058:	07 ff       	sbrs	r16, 7
    105a:	09 c0       	rjmp	.+18     	; 0x106e <vfprintf+0x55c>
    105c:	84 e0       	ldi	r24, 0x04	; 4
    105e:	a8 0e       	add	r10, r24
    1060:	b1 1c       	adc	r11, r1
    1062:	f6 01       	movw	r30, r12
    1064:	60 81       	ld	r22, Z
    1066:	71 81       	ldd	r23, Z+1	; 0x01
    1068:	82 81       	ldd	r24, Z+2	; 0x02
    106a:	93 81       	ldd	r25, Z+3	; 0x03
    106c:	08 c0       	rjmp	.+16     	; 0x107e <vfprintf+0x56c>
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	af 0e       	add	r10, r31
    1072:	b1 1c       	adc	r11, r1
    1074:	f6 01       	movw	r30, r12
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a3 01       	movw	r20, r6
    1080:	0e 94 b3 0a 	call	0x1566	; 0x1566 <__ultoa_invert>
    1084:	c8 2e       	mov	r12, r24
    1086:	c6 18       	sub	r12, r6
    1088:	0f 77       	andi	r16, 0x7F	; 127
    108a:	90 2e       	mov	r9, r16
    108c:	96 fe       	sbrs	r9, 6
    108e:	0b c0       	rjmp	.+22     	; 0x10a6 <vfprintf+0x594>
    1090:	09 2d       	mov	r16, r9
    1092:	0e 7f       	andi	r16, 0xFE	; 254
    1094:	c1 16       	cp	r12, r17
    1096:	50 f4       	brcc	.+20     	; 0x10ac <vfprintf+0x59a>
    1098:	94 fe       	sbrs	r9, 4
    109a:	0a c0       	rjmp	.+20     	; 0x10b0 <vfprintf+0x59e>
    109c:	92 fc       	sbrc	r9, 2
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <vfprintf+0x59e>
    10a0:	09 2d       	mov	r16, r9
    10a2:	0e 7e       	andi	r16, 0xEE	; 238
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <vfprintf+0x59e>
    10a6:	dc 2c       	mov	r13, r12
    10a8:	09 2d       	mov	r16, r9
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <vfprintf+0x5a0>
    10ac:	dc 2c       	mov	r13, r12
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <vfprintf+0x5a0>
    10b0:	d1 2e       	mov	r13, r17
    10b2:	04 ff       	sbrs	r16, 4
    10b4:	0d c0       	rjmp	.+26     	; 0x10d0 <vfprintf+0x5be>
    10b6:	fe 01       	movw	r30, r28
    10b8:	ec 0d       	add	r30, r12
    10ba:	f1 1d       	adc	r31, r1
    10bc:	80 81       	ld	r24, Z
    10be:	80 33       	cpi	r24, 0x30	; 48
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <vfprintf+0x5b4>
    10c2:	09 7e       	andi	r16, 0xE9	; 233
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <vfprintf+0x5c6>
    10c6:	02 ff       	sbrs	r16, 2
    10c8:	06 c0       	rjmp	.+12     	; 0x10d6 <vfprintf+0x5c4>
    10ca:	d3 94       	inc	r13
    10cc:	d3 94       	inc	r13
    10ce:	04 c0       	rjmp	.+8      	; 0x10d8 <vfprintf+0x5c6>
    10d0:	80 2f       	mov	r24, r16
    10d2:	86 78       	andi	r24, 0x86	; 134
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <vfprintf+0x5c6>
    10d6:	d3 94       	inc	r13
    10d8:	03 fd       	sbrc	r16, 3
    10da:	11 c0       	rjmp	.+34     	; 0x10fe <vfprintf+0x5ec>
    10dc:	00 ff       	sbrs	r16, 0
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <vfprintf+0x5da>
    10e0:	1c 2d       	mov	r17, r12
    10e2:	d5 14       	cp	r13, r5
    10e4:	80 f4       	brcc	.+32     	; 0x1106 <vfprintf+0x5f4>
    10e6:	15 0d       	add	r17, r5
    10e8:	1d 19       	sub	r17, r13
    10ea:	0d c0       	rjmp	.+26     	; 0x1106 <vfprintf+0x5f4>
    10ec:	d5 14       	cp	r13, r5
    10ee:	58 f4       	brcc	.+22     	; 0x1106 <vfprintf+0x5f4>
    10f0:	b7 01       	movw	r22, r14
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    10fa:	d3 94       	inc	r13
    10fc:	f7 cf       	rjmp	.-18     	; 0x10ec <vfprintf+0x5da>
    10fe:	d5 14       	cp	r13, r5
    1100:	10 f4       	brcc	.+4      	; 0x1106 <vfprintf+0x5f4>
    1102:	5d 18       	sub	r5, r13
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <vfprintf+0x5f6>
    1106:	51 2c       	mov	r5, r1
    1108:	04 ff       	sbrs	r16, 4
    110a:	10 c0       	rjmp	.+32     	; 0x112c <vfprintf+0x61a>
    110c:	b7 01       	movw	r22, r14
    110e:	80 e3       	ldi	r24, 0x30	; 48
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1116:	02 ff       	sbrs	r16, 2
    1118:	17 c0       	rjmp	.+46     	; 0x1148 <vfprintf+0x636>
    111a:	01 fd       	sbrc	r16, 1
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <vfprintf+0x612>
    111e:	88 e7       	ldi	r24, 0x78	; 120
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <vfprintf+0x616>
    1124:	88 e5       	ldi	r24, 0x58	; 88
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	b7 01       	movw	r22, r14
    112a:	0c c0       	rjmp	.+24     	; 0x1144 <vfprintf+0x632>
    112c:	80 2f       	mov	r24, r16
    112e:	86 78       	andi	r24, 0x86	; 134
    1130:	59 f0       	breq	.+22     	; 0x1148 <vfprintf+0x636>
    1132:	01 ff       	sbrs	r16, 1
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x628>
    1136:	8b e2       	ldi	r24, 0x2B	; 43
    1138:	01 c0       	rjmp	.+2      	; 0x113c <vfprintf+0x62a>
    113a:	80 e2       	ldi	r24, 0x20	; 32
    113c:	07 fd       	sbrc	r16, 7
    113e:	8d e2       	ldi	r24, 0x2D	; 45
    1140:	b7 01       	movw	r22, r14
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1148:	c1 16       	cp	r12, r17
    114a:	38 f4       	brcc	.+14     	; 0x115a <vfprintf+0x648>
    114c:	b7 01       	movw	r22, r14
    114e:	80 e3       	ldi	r24, 0x30	; 48
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1156:	11 50       	subi	r17, 0x01	; 1
    1158:	f7 cf       	rjmp	.-18     	; 0x1148 <vfprintf+0x636>
    115a:	ca 94       	dec	r12
    115c:	f3 01       	movw	r30, r6
    115e:	ec 0d       	add	r30, r12
    1160:	f1 1d       	adc	r31, r1
    1162:	80 81       	ld	r24, Z
    1164:	b7 01       	movw	r22, r14
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    116c:	c1 10       	cpse	r12, r1
    116e:	f5 cf       	rjmp	.-22     	; 0x115a <vfprintf+0x648>
    1170:	15 c0       	rjmp	.+42     	; 0x119c <vfprintf+0x68a>
    1172:	f4 e0       	ldi	r31, 0x04	; 4
    1174:	f5 15       	cp	r31, r5
    1176:	60 f5       	brcc	.+88     	; 0x11d0 <vfprintf+0x6be>
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	58 1a       	sub	r5, r24
    117c:	93 fe       	sbrs	r9, 3
    117e:	1f c0       	rjmp	.+62     	; 0x11be <vfprintf+0x6ac>
    1180:	01 11       	cpse	r16, r1
    1182:	27 c0       	rjmp	.+78     	; 0x11d2 <vfprintf+0x6c0>
    1184:	2c 85       	ldd	r18, Y+12	; 0x0c
    1186:	23 ff       	sbrs	r18, 3
    1188:	2a c0       	rjmp	.+84     	; 0x11de <vfprintf+0x6cc>
    118a:	04 e5       	ldi	r16, 0x54	; 84
    118c:	10 e0       	ldi	r17, 0x00	; 0
    118e:	39 2d       	mov	r19, r9
    1190:	30 71       	andi	r19, 0x10	; 16
    1192:	93 2e       	mov	r9, r19
    1194:	f8 01       	movw	r30, r16
    1196:	84 91       	lpm	r24, Z
    1198:	81 11       	cpse	r24, r1
    119a:	24 c0       	rjmp	.+72     	; 0x11e4 <vfprintf+0x6d2>
    119c:	55 20       	and	r5, r5
    119e:	09 f4       	brne	.+2      	; 0x11a2 <vfprintf+0x690>
    11a0:	e4 cc       	rjmp	.-1592   	; 0xb6a <vfprintf+0x58>
    11a2:	b7 01       	movw	r22, r14
    11a4:	80 e2       	ldi	r24, 0x20	; 32
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11ac:	5a 94       	dec	r5
    11ae:	f6 cf       	rjmp	.-20     	; 0x119c <vfprintf+0x68a>
    11b0:	f7 01       	movw	r30, r14
    11b2:	86 81       	ldd	r24, Z+6	; 0x06
    11b4:	97 81       	ldd	r25, Z+7	; 0x07
    11b6:	26 c0       	rjmp	.+76     	; 0x1204 <vfprintf+0x6f2>
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    11bc:	23 c0       	rjmp	.+70     	; 0x1204 <vfprintf+0x6f2>
    11be:	b7 01       	movw	r22, r14
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11c8:	5a 94       	dec	r5
    11ca:	51 10       	cpse	r5, r1
    11cc:	f8 cf       	rjmp	.-16     	; 0x11be <vfprintf+0x6ac>
    11ce:	d8 cf       	rjmp	.-80     	; 0x1180 <vfprintf+0x66e>
    11d0:	51 2c       	mov	r5, r1
    11d2:	b7 01       	movw	r22, r14
    11d4:	80 2f       	mov	r24, r16
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11dc:	d3 cf       	rjmp	.-90     	; 0x1184 <vfprintf+0x672>
    11de:	08 e5       	ldi	r16, 0x58	; 88
    11e0:	10 e0       	ldi	r17, 0x00	; 0
    11e2:	d5 cf       	rjmp	.-86     	; 0x118e <vfprintf+0x67c>
    11e4:	91 10       	cpse	r9, r1
    11e6:	80 52       	subi	r24, 0x20	; 32
    11e8:	b7 01       	movw	r22, r14
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    11f0:	0f 5f       	subi	r16, 0xFF	; 255
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	cf cf       	rjmp	.-98     	; 0x1194 <vfprintf+0x682>
    11f6:	23 e0       	ldi	r18, 0x03	; 3
    11f8:	25 15       	cp	r18, r5
    11fa:	10 f4       	brcc	.+4      	; 0x1200 <vfprintf+0x6ee>
    11fc:	83 e0       	ldi	r24, 0x03	; 3
    11fe:	bd cf       	rjmp	.-134    	; 0x117a <vfprintf+0x668>
    1200:	51 2c       	mov	r5, r1
    1202:	c0 cf       	rjmp	.-128    	; 0x1184 <vfprintf+0x672>
    1204:	60 96       	adiw	r28, 0x10	; 16
    1206:	e2 e1       	ldi	r30, 0x12	; 18
    1208:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__epilogue_restores__>

0000120c <__prologue_saves__>:
    120c:	2f 92       	push	r2
    120e:	3f 92       	push	r3
    1210:	4f 92       	push	r4
    1212:	5f 92       	push	r5
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	ca 1b       	sub	r28, r26
    1236:	db 0b       	sbc	r29, r27
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	09 94       	ijmp

00001244 <__epilogue_restores__>:
    1244:	2a 88       	ldd	r2, Y+18	; 0x12
    1246:	39 88       	ldd	r3, Y+17	; 0x11
    1248:	48 88       	ldd	r4, Y+16	; 0x10
    124a:	5f 84       	ldd	r5, Y+15	; 0x0f
    124c:	6e 84       	ldd	r6, Y+14	; 0x0e
    124e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1250:	8c 84       	ldd	r8, Y+12	; 0x0c
    1252:	9b 84       	ldd	r9, Y+11	; 0x0b
    1254:	aa 84       	ldd	r10, Y+10	; 0x0a
    1256:	b9 84       	ldd	r11, Y+9	; 0x09
    1258:	c8 84       	ldd	r12, Y+8	; 0x08
    125a:	df 80       	ldd	r13, Y+7	; 0x07
    125c:	ee 80       	ldd	r14, Y+6	; 0x06
    125e:	fd 80       	ldd	r15, Y+5	; 0x05
    1260:	0c 81       	ldd	r16, Y+4	; 0x04
    1262:	1b 81       	ldd	r17, Y+3	; 0x03
    1264:	aa 81       	ldd	r26, Y+2	; 0x02
    1266:	b9 81       	ldd	r27, Y+1	; 0x01
    1268:	ce 0f       	add	r28, r30
    126a:	d1 1d       	adc	r29, r1
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	ed 01       	movw	r28, r26
    1278:	08 95       	ret

0000127a <atof>:
    127a:	66 27       	eor	r22, r22
    127c:	77 27       	eor	r23, r23
    127e:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <strtod>

00001282 <atoi>:
    1282:	fc 01       	movw	r30, r24
    1284:	88 27       	eor	r24, r24
    1286:	99 27       	eor	r25, r25
    1288:	e8 94       	clt
    128a:	21 91       	ld	r18, Z+
    128c:	20 32       	cpi	r18, 0x20	; 32
    128e:	e9 f3       	breq	.-6      	; 0x128a <atoi+0x8>
    1290:	29 30       	cpi	r18, 0x09	; 9
    1292:	10 f0       	brcs	.+4      	; 0x1298 <atoi+0x16>
    1294:	2e 30       	cpi	r18, 0x0E	; 14
    1296:	c8 f3       	brcs	.-14     	; 0x128a <atoi+0x8>
    1298:	2b 32       	cpi	r18, 0x2B	; 43
    129a:	41 f0       	breq	.+16     	; 0x12ac <atoi+0x2a>
    129c:	2d 32       	cpi	r18, 0x2D	; 45
    129e:	39 f4       	brne	.+14     	; 0x12ae <atoi+0x2c>
    12a0:	68 94       	set
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <atoi+0x2a>
    12a4:	0e 94 4d 0a 	call	0x149a	; 0x149a <__mulhi_const_10>
    12a8:	82 0f       	add	r24, r18
    12aa:	91 1d       	adc	r25, r1
    12ac:	21 91       	ld	r18, Z+
    12ae:	20 53       	subi	r18, 0x30	; 48
    12b0:	2a 30       	cpi	r18, 0x0A	; 10
    12b2:	c0 f3       	brcs	.-16     	; 0x12a4 <atoi+0x22>
    12b4:	1e f4       	brtc	.+6      	; 0x12bc <atoi+0x3a>
    12b6:	90 95       	com	r25
    12b8:	81 95       	neg	r24
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	08 95       	ret

000012be <__ftoa_engine>:
    12be:	28 30       	cpi	r18, 0x08	; 8
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <__ftoa_engine+0x6>
    12c2:	27 e0       	ldi	r18, 0x07	; 7
    12c4:	33 27       	eor	r19, r19
    12c6:	da 01       	movw	r26, r20
    12c8:	99 0f       	add	r25, r25
    12ca:	31 1d       	adc	r19, r1
    12cc:	87 fd       	sbrc	r24, 7
    12ce:	91 60       	ori	r25, 0x01	; 1
    12d0:	00 96       	adiw	r24, 0x00	; 0
    12d2:	61 05       	cpc	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	39 f4       	brne	.+14     	; 0x12e6 <__ftoa_engine+0x28>
    12d8:	32 60       	ori	r19, 0x02	; 2
    12da:	2e 5f       	subi	r18, 0xFE	; 254
    12dc:	3d 93       	st	X+, r19
    12de:	30 e3       	ldi	r19, 0x30	; 48
    12e0:	2a 95       	dec	r18
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <__ftoa_engine+0x1e>
    12e4:	08 95       	ret
    12e6:	9f 3f       	cpi	r25, 0xFF	; 255
    12e8:	30 f0       	brcs	.+12     	; 0x12f6 <__ftoa_engine+0x38>
    12ea:	80 38       	cpi	r24, 0x80	; 128
    12ec:	71 05       	cpc	r23, r1
    12ee:	61 05       	cpc	r22, r1
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <__ftoa_engine+0x36>
    12f2:	3c 5f       	subi	r19, 0xFC	; 252
    12f4:	3c 5f       	subi	r19, 0xFC	; 252
    12f6:	3d 93       	st	X+, r19
    12f8:	91 30       	cpi	r25, 0x01	; 1
    12fa:	08 f0       	brcs	.+2      	; 0x12fe <__ftoa_engine+0x40>
    12fc:	80 68       	ori	r24, 0x80	; 128
    12fe:	91 1d       	adc	r25, r1
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	1f 93       	push	r17
    1306:	0f 93       	push	r16
    1308:	ff 92       	push	r15
    130a:	ef 92       	push	r14
    130c:	19 2f       	mov	r17, r25
    130e:	98 7f       	andi	r25, 0xF8	; 248
    1310:	96 95       	lsr	r25
    1312:	e9 2f       	mov	r30, r25
    1314:	96 95       	lsr	r25
    1316:	96 95       	lsr	r25
    1318:	e9 0f       	add	r30, r25
    131a:	ff 27       	eor	r31, r31
    131c:	ea 54       	subi	r30, 0x4A	; 74
    131e:	ff 4f       	sbci	r31, 0xFF	; 255
    1320:	99 27       	eor	r25, r25
    1322:	33 27       	eor	r19, r19
    1324:	ee 24       	eor	r14, r14
    1326:	ff 24       	eor	r15, r15
    1328:	a7 01       	movw	r20, r14
    132a:	e7 01       	movw	r28, r14
    132c:	05 90       	lpm	r0, Z+
    132e:	08 94       	sec
    1330:	07 94       	ror	r0
    1332:	28 f4       	brcc	.+10     	; 0x133e <__ftoa_engine+0x80>
    1334:	36 0f       	add	r19, r22
    1336:	e7 1e       	adc	r14, r23
    1338:	f8 1e       	adc	r15, r24
    133a:	49 1f       	adc	r20, r25
    133c:	51 1d       	adc	r21, r1
    133e:	66 0f       	add	r22, r22
    1340:	77 1f       	adc	r23, r23
    1342:	88 1f       	adc	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	06 94       	lsr	r0
    1348:	a1 f7       	brne	.-24     	; 0x1332 <__ftoa_engine+0x74>
    134a:	05 90       	lpm	r0, Z+
    134c:	07 94       	ror	r0
    134e:	28 f4       	brcc	.+10     	; 0x135a <__ftoa_engine+0x9c>
    1350:	e7 0e       	add	r14, r23
    1352:	f8 1e       	adc	r15, r24
    1354:	49 1f       	adc	r20, r25
    1356:	56 1f       	adc	r21, r22
    1358:	c1 1d       	adc	r28, r1
    135a:	77 0f       	add	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	66 1f       	adc	r22, r22
    1362:	06 94       	lsr	r0
    1364:	a1 f7       	brne	.-24     	; 0x134e <__ftoa_engine+0x90>
    1366:	05 90       	lpm	r0, Z+
    1368:	07 94       	ror	r0
    136a:	28 f4       	brcc	.+10     	; 0x1376 <__ftoa_engine+0xb8>
    136c:	f8 0e       	add	r15, r24
    136e:	49 1f       	adc	r20, r25
    1370:	56 1f       	adc	r21, r22
    1372:	c7 1f       	adc	r28, r23
    1374:	d1 1d       	adc	r29, r1
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	66 1f       	adc	r22, r22
    137c:	77 1f       	adc	r23, r23
    137e:	06 94       	lsr	r0
    1380:	a1 f7       	brne	.-24     	; 0x136a <__ftoa_engine+0xac>
    1382:	05 90       	lpm	r0, Z+
    1384:	07 94       	ror	r0
    1386:	20 f4       	brcc	.+8      	; 0x1390 <__ftoa_engine+0xd2>
    1388:	49 0f       	add	r20, r25
    138a:	56 1f       	adc	r21, r22
    138c:	c7 1f       	adc	r28, r23
    138e:	d8 1f       	adc	r29, r24
    1390:	99 0f       	add	r25, r25
    1392:	66 1f       	adc	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	06 94       	lsr	r0
    139a:	a9 f7       	brne	.-22     	; 0x1386 <__ftoa_engine+0xc8>
    139c:	84 91       	lpm	r24, Z
    139e:	10 95       	com	r17
    13a0:	17 70       	andi	r17, 0x07	; 7
    13a2:	41 f0       	breq	.+16     	; 0x13b4 <__ftoa_engine+0xf6>
    13a4:	d6 95       	lsr	r29
    13a6:	c7 95       	ror	r28
    13a8:	57 95       	ror	r21
    13aa:	47 95       	ror	r20
    13ac:	f7 94       	ror	r15
    13ae:	e7 94       	ror	r14
    13b0:	1a 95       	dec	r17
    13b2:	c1 f7       	brne	.-16     	; 0x13a4 <__ftoa_engine+0xe6>
    13b4:	ec e5       	ldi	r30, 0x5C	; 92
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	68 94       	set
    13ba:	15 90       	lpm	r1, Z+
    13bc:	15 91       	lpm	r17, Z+
    13be:	35 91       	lpm	r19, Z+
    13c0:	65 91       	lpm	r22, Z+
    13c2:	95 91       	lpm	r25, Z+
    13c4:	05 90       	lpm	r0, Z+
    13c6:	7f e2       	ldi	r23, 0x2F	; 47
    13c8:	73 95       	inc	r23
    13ca:	e1 18       	sub	r14, r1
    13cc:	f1 0a       	sbc	r15, r17
    13ce:	43 0b       	sbc	r20, r19
    13d0:	56 0b       	sbc	r21, r22
    13d2:	c9 0b       	sbc	r28, r25
    13d4:	d0 09       	sbc	r29, r0
    13d6:	c0 f7       	brcc	.-16     	; 0x13c8 <__ftoa_engine+0x10a>
    13d8:	e1 0c       	add	r14, r1
    13da:	f1 1e       	adc	r15, r17
    13dc:	43 1f       	adc	r20, r19
    13de:	56 1f       	adc	r21, r22
    13e0:	c9 1f       	adc	r28, r25
    13e2:	d0 1d       	adc	r29, r0
    13e4:	7e f4       	brtc	.+30     	; 0x1404 <__ftoa_engine+0x146>
    13e6:	70 33       	cpi	r23, 0x30	; 48
    13e8:	11 f4       	brne	.+4      	; 0x13ee <__ftoa_engine+0x130>
    13ea:	8a 95       	dec	r24
    13ec:	e6 cf       	rjmp	.-52     	; 0x13ba <__ftoa_engine+0xfc>
    13ee:	e8 94       	clt
    13f0:	01 50       	subi	r16, 0x01	; 1
    13f2:	30 f0       	brcs	.+12     	; 0x1400 <__ftoa_engine+0x142>
    13f4:	08 0f       	add	r16, r24
    13f6:	0a f4       	brpl	.+2      	; 0x13fa <__ftoa_engine+0x13c>
    13f8:	00 27       	eor	r16, r16
    13fa:	02 17       	cp	r16, r18
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <__ftoa_engine+0x142>
    13fe:	20 2f       	mov	r18, r16
    1400:	23 95       	inc	r18
    1402:	02 2f       	mov	r16, r18
    1404:	7a 33       	cpi	r23, 0x3A	; 58
    1406:	28 f0       	brcs	.+10     	; 0x1412 <__ftoa_engine+0x154>
    1408:	79 e3       	ldi	r23, 0x39	; 57
    140a:	7d 93       	st	X+, r23
    140c:	2a 95       	dec	r18
    140e:	e9 f7       	brne	.-6      	; 0x140a <__ftoa_engine+0x14c>
    1410:	10 c0       	rjmp	.+32     	; 0x1432 <__ftoa_engine+0x174>
    1412:	7d 93       	st	X+, r23
    1414:	2a 95       	dec	r18
    1416:	89 f6       	brne	.-94     	; 0x13ba <__ftoa_engine+0xfc>
    1418:	06 94       	lsr	r0
    141a:	97 95       	ror	r25
    141c:	67 95       	ror	r22
    141e:	37 95       	ror	r19
    1420:	17 95       	ror	r17
    1422:	17 94       	ror	r1
    1424:	e1 18       	sub	r14, r1
    1426:	f1 0a       	sbc	r15, r17
    1428:	43 0b       	sbc	r20, r19
    142a:	56 0b       	sbc	r21, r22
    142c:	c9 0b       	sbc	r28, r25
    142e:	d0 09       	sbc	r29, r0
    1430:	98 f0       	brcs	.+38     	; 0x1458 <__ftoa_engine+0x19a>
    1432:	23 95       	inc	r18
    1434:	7e 91       	ld	r23, -X
    1436:	73 95       	inc	r23
    1438:	7a 33       	cpi	r23, 0x3A	; 58
    143a:	08 f0       	brcs	.+2      	; 0x143e <__ftoa_engine+0x180>
    143c:	70 e3       	ldi	r23, 0x30	; 48
    143e:	7c 93       	st	X, r23
    1440:	20 13       	cpse	r18, r16
    1442:	b8 f7       	brcc	.-18     	; 0x1432 <__ftoa_engine+0x174>
    1444:	7e 91       	ld	r23, -X
    1446:	70 61       	ori	r23, 0x10	; 16
    1448:	7d 93       	st	X+, r23
    144a:	30 f0       	brcs	.+12     	; 0x1458 <__ftoa_engine+0x19a>
    144c:	83 95       	inc	r24
    144e:	71 e3       	ldi	r23, 0x31	; 49
    1450:	7d 93       	st	X+, r23
    1452:	70 e3       	ldi	r23, 0x30	; 48
    1454:	2a 95       	dec	r18
    1456:	e1 f7       	brne	.-8      	; 0x1450 <__ftoa_engine+0x192>
    1458:	11 24       	eor	r1, r1
    145a:	ef 90       	pop	r14
    145c:	ff 90       	pop	r15
    145e:	0f 91       	pop	r16
    1460:	1f 91       	pop	r17
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	99 27       	eor	r25, r25
    1468:	87 fd       	sbrc	r24, 7
    146a:	90 95       	com	r25
    146c:	08 95       	ret

0000146e <strnlen_P>:
    146e:	fc 01       	movw	r30, r24
    1470:	05 90       	lpm	r0, Z+
    1472:	61 50       	subi	r22, 0x01	; 1
    1474:	70 40       	sbci	r23, 0x00	; 0
    1476:	01 10       	cpse	r0, r1
    1478:	d8 f7       	brcc	.-10     	; 0x1470 <strnlen_P+0x2>
    147a:	80 95       	com	r24
    147c:	90 95       	com	r25
    147e:	8e 0f       	add	r24, r30
    1480:	9f 1f       	adc	r25, r31
    1482:	08 95       	ret

00001484 <strnlen>:
    1484:	fc 01       	movw	r30, r24
    1486:	61 50       	subi	r22, 0x01	; 1
    1488:	70 40       	sbci	r23, 0x00	; 0
    148a:	01 90       	ld	r0, Z+
    148c:	01 10       	cpse	r0, r1
    148e:	d8 f7       	brcc	.-10     	; 0x1486 <strnlen+0x2>
    1490:	80 95       	com	r24
    1492:	90 95       	com	r25
    1494:	8e 0f       	add	r24, r30
    1496:	9f 1f       	adc	r25, r31
    1498:	08 95       	ret

0000149a <__mulhi_const_10>:
    149a:	7a e0       	ldi	r23, 0x0A	; 10
    149c:	97 9f       	mul	r25, r23
    149e:	90 2d       	mov	r25, r0
    14a0:	87 9f       	mul	r24, r23
    14a2:	80 2d       	mov	r24, r0
    14a4:	91 0d       	add	r25, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	08 95       	ret

000014aa <fputc>:
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	fb 01       	movw	r30, r22
    14b4:	23 81       	ldd	r18, Z+3	; 0x03
    14b6:	21 fd       	sbrc	r18, 1
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <fputc+0x16>
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	9f ef       	ldi	r25, 0xFF	; 255
    14be:	2c c0       	rjmp	.+88     	; 0x1518 <fputc+0x6e>
    14c0:	22 ff       	sbrs	r18, 2
    14c2:	16 c0       	rjmp	.+44     	; 0x14f0 <fputc+0x46>
    14c4:	46 81       	ldd	r20, Z+6	; 0x06
    14c6:	57 81       	ldd	r21, Z+7	; 0x07
    14c8:	24 81       	ldd	r18, Z+4	; 0x04
    14ca:	35 81       	ldd	r19, Z+5	; 0x05
    14cc:	42 17       	cp	r20, r18
    14ce:	53 07       	cpc	r21, r19
    14d0:	44 f4       	brge	.+16     	; 0x14e2 <fputc+0x38>
    14d2:	a0 81       	ld	r26, Z
    14d4:	b1 81       	ldd	r27, Z+1	; 0x01
    14d6:	9d 01       	movw	r18, r26
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	31 83       	std	Z+1, r19	; 0x01
    14de:	20 83       	st	Z, r18
    14e0:	8c 93       	st	X, r24
    14e2:	26 81       	ldd	r18, Z+6	; 0x06
    14e4:	37 81       	ldd	r19, Z+7	; 0x07
    14e6:	2f 5f       	subi	r18, 0xFF	; 255
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	37 83       	std	Z+7, r19	; 0x07
    14ec:	26 83       	std	Z+6, r18	; 0x06
    14ee:	14 c0       	rjmp	.+40     	; 0x1518 <fputc+0x6e>
    14f0:	8b 01       	movw	r16, r22
    14f2:	ec 01       	movw	r28, r24
    14f4:	fb 01       	movw	r30, r22
    14f6:	00 84       	ldd	r0, Z+8	; 0x08
    14f8:	f1 85       	ldd	r31, Z+9	; 0x09
    14fa:	e0 2d       	mov	r30, r0
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	e1 f6       	brne	.-72     	; 0x14ba <fputc+0x10>
    1502:	d8 01       	movw	r26, r16
    1504:	16 96       	adiw	r26, 0x06	; 6
    1506:	8d 91       	ld	r24, X+
    1508:	9c 91       	ld	r25, X
    150a:	17 97       	sbiw	r26, 0x07	; 7
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	17 96       	adiw	r26, 0x07	; 7
    1510:	9c 93       	st	X, r25
    1512:	8e 93       	st	-X, r24
    1514:	16 97       	sbiw	r26, 0x06	; 6
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <sprintf>:
    1522:	ae e0       	ldi	r26, 0x0E	; 14
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e7 e9       	ldi	r30, 0x97	; 151
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__prologue_saves__+0x1c>
    152e:	0d 89       	ldd	r16, Y+21	; 0x15
    1530:	1e 89       	ldd	r17, Y+22	; 0x16
    1532:	86 e0       	ldi	r24, 0x06	; 6
    1534:	8c 83       	std	Y+4, r24	; 0x04
    1536:	1a 83       	std	Y+2, r17	; 0x02
    1538:	09 83       	std	Y+1, r16	; 0x01
    153a:	8f ef       	ldi	r24, 0xFF	; 255
    153c:	9f e7       	ldi	r25, 0x7F	; 127
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	ae 01       	movw	r20, r28
    1544:	47 5e       	subi	r20, 0xE7	; 231
    1546:	5f 4f       	sbci	r21, 0xFF	; 255
    1548:	6f 89       	ldd	r22, Y+23	; 0x17
    154a:	78 8d       	ldd	r23, Y+24	; 0x18
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	0e 94 89 05 	call	0xb12	; 0xb12 <vfprintf>
    1554:	ef 81       	ldd	r30, Y+7	; 0x07
    1556:	f8 85       	ldd	r31, Y+8	; 0x08
    1558:	e0 0f       	add	r30, r16
    155a:	f1 1f       	adc	r31, r17
    155c:	10 82       	st	Z, r1
    155e:	2e 96       	adiw	r28, 0x0e	; 14
    1560:	e4 e0       	ldi	r30, 0x04	; 4
    1562:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__epilogue_restores__+0x1c>

00001566 <__ultoa_invert>:
    1566:	fa 01       	movw	r30, r20
    1568:	aa 27       	eor	r26, r26
    156a:	28 30       	cpi	r18, 0x08	; 8
    156c:	51 f1       	breq	.+84     	; 0x15c2 <__ultoa_invert+0x5c>
    156e:	20 31       	cpi	r18, 0x10	; 16
    1570:	81 f1       	breq	.+96     	; 0x15d2 <__ultoa_invert+0x6c>
    1572:	e8 94       	clt
    1574:	6f 93       	push	r22
    1576:	6e 7f       	andi	r22, 0xFE	; 254
    1578:	6e 5f       	subi	r22, 0xFE	; 254
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	af 4f       	sbci	r26, 0xFF	; 255
    1582:	b1 e0       	ldi	r27, 0x01	; 1
    1584:	3e d0       	rcall	.+124    	; 0x1602 <__ultoa_invert+0x9c>
    1586:	b4 e0       	ldi	r27, 0x04	; 4
    1588:	3c d0       	rcall	.+120    	; 0x1602 <__ultoa_invert+0x9c>
    158a:	67 0f       	add	r22, r23
    158c:	78 1f       	adc	r23, r24
    158e:	89 1f       	adc	r24, r25
    1590:	9a 1f       	adc	r25, r26
    1592:	a1 1d       	adc	r26, r1
    1594:	68 0f       	add	r22, r24
    1596:	79 1f       	adc	r23, r25
    1598:	8a 1f       	adc	r24, r26
    159a:	91 1d       	adc	r25, r1
    159c:	a1 1d       	adc	r26, r1
    159e:	6a 0f       	add	r22, r26
    15a0:	71 1d       	adc	r23, r1
    15a2:	81 1d       	adc	r24, r1
    15a4:	91 1d       	adc	r25, r1
    15a6:	a1 1d       	adc	r26, r1
    15a8:	20 d0       	rcall	.+64     	; 0x15ea <__ultoa_invert+0x84>
    15aa:	09 f4       	brne	.+2      	; 0x15ae <__ultoa_invert+0x48>
    15ac:	68 94       	set
    15ae:	3f 91       	pop	r19
    15b0:	2a e0       	ldi	r18, 0x0A	; 10
    15b2:	26 9f       	mul	r18, r22
    15b4:	11 24       	eor	r1, r1
    15b6:	30 19       	sub	r19, r0
    15b8:	30 5d       	subi	r19, 0xD0	; 208
    15ba:	31 93       	st	Z+, r19
    15bc:	de f6       	brtc	.-74     	; 0x1574 <__ultoa_invert+0xe>
    15be:	cf 01       	movw	r24, r30
    15c0:	08 95       	ret
    15c2:	46 2f       	mov	r20, r22
    15c4:	47 70       	andi	r20, 0x07	; 7
    15c6:	40 5d       	subi	r20, 0xD0	; 208
    15c8:	41 93       	st	Z+, r20
    15ca:	b3 e0       	ldi	r27, 0x03	; 3
    15cc:	0f d0       	rcall	.+30     	; 0x15ec <__ultoa_invert+0x86>
    15ce:	c9 f7       	brne	.-14     	; 0x15c2 <__ultoa_invert+0x5c>
    15d0:	f6 cf       	rjmp	.-20     	; 0x15be <__ultoa_invert+0x58>
    15d2:	46 2f       	mov	r20, r22
    15d4:	4f 70       	andi	r20, 0x0F	; 15
    15d6:	40 5d       	subi	r20, 0xD0	; 208
    15d8:	4a 33       	cpi	r20, 0x3A	; 58
    15da:	18 f0       	brcs	.+6      	; 0x15e2 <__ultoa_invert+0x7c>
    15dc:	49 5d       	subi	r20, 0xD9	; 217
    15de:	31 fd       	sbrc	r19, 1
    15e0:	40 52       	subi	r20, 0x20	; 32
    15e2:	41 93       	st	Z+, r20
    15e4:	02 d0       	rcall	.+4      	; 0x15ea <__ultoa_invert+0x84>
    15e6:	a9 f7       	brne	.-22     	; 0x15d2 <__ultoa_invert+0x6c>
    15e8:	ea cf       	rjmp	.-44     	; 0x15be <__ultoa_invert+0x58>
    15ea:	b4 e0       	ldi	r27, 0x04	; 4
    15ec:	a6 95       	lsr	r26
    15ee:	97 95       	ror	r25
    15f0:	87 95       	ror	r24
    15f2:	77 95       	ror	r23
    15f4:	67 95       	ror	r22
    15f6:	ba 95       	dec	r27
    15f8:	c9 f7       	brne	.-14     	; 0x15ec <__ultoa_invert+0x86>
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	61 05       	cpc	r22, r1
    15fe:	71 05       	cpc	r23, r1
    1600:	08 95       	ret
    1602:	9b 01       	movw	r18, r22
    1604:	ac 01       	movw	r20, r24
    1606:	0a 2e       	mov	r0, r26
    1608:	06 94       	lsr	r0
    160a:	57 95       	ror	r21
    160c:	47 95       	ror	r20
    160e:	37 95       	ror	r19
    1610:	27 95       	ror	r18
    1612:	ba 95       	dec	r27
    1614:	c9 f7       	brne	.-14     	; 0x1608 <__ultoa_invert+0xa2>
    1616:	62 0f       	add	r22, r18
    1618:	73 1f       	adc	r23, r19
    161a:	84 1f       	adc	r24, r20
    161c:	95 1f       	adc	r25, r21
    161e:	a0 1d       	adc	r26, r0
    1620:	08 95       	ret

00001622 <strtod>:
    1622:	a0 e0       	ldi	r26, 0x00	; 0
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e1       	ldi	r30, 0x17	; 23
    1628:	fb e0       	ldi	r31, 0x0B	; 11
    162a:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__prologue_saves__+0xc>
    162e:	ec 01       	movw	r28, r24
    1630:	6b 01       	movw	r12, r22
    1632:	61 15       	cp	r22, r1
    1634:	71 05       	cpc	r23, r1
    1636:	19 f0       	breq	.+6      	; 0x163e <strtod+0x1c>
    1638:	fb 01       	movw	r30, r22
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
    163e:	7e 01       	movw	r14, r28
    1640:	ff ef       	ldi	r31, 0xFF	; 255
    1642:	ef 1a       	sub	r14, r31
    1644:	ff 0a       	sbc	r15, r31
    1646:	08 81       	ld	r16, Y
    1648:	80 2f       	mov	r24, r16
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 5f 0c 	call	0x18be	; 0x18be <isspace>
    1650:	89 2b       	or	r24, r25
    1652:	11 f0       	breq	.+4      	; 0x1658 <strtod+0x36>
    1654:	e7 01       	movw	r28, r14
    1656:	f3 cf       	rjmp	.-26     	; 0x163e <strtod+0x1c>
    1658:	0d 32       	cpi	r16, 0x2D	; 45
    165a:	39 f4       	brne	.+14     	; 0x166a <strtod+0x48>
    165c:	7e 01       	movw	r14, r28
    165e:	82 e0       	ldi	r24, 0x02	; 2
    1660:	e8 0e       	add	r14, r24
    1662:	f1 1c       	adc	r15, r1
    1664:	09 81       	ldd	r16, Y+1	; 0x01
    1666:	11 e0       	ldi	r17, 0x01	; 1
    1668:	08 c0       	rjmp	.+16     	; 0x167a <strtod+0x58>
    166a:	0b 32       	cpi	r16, 0x2B	; 43
    166c:	29 f4       	brne	.+10     	; 0x1678 <strtod+0x56>
    166e:	7e 01       	movw	r14, r28
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	e9 0e       	add	r14, r25
    1674:	f1 1c       	adc	r15, r1
    1676:	09 81       	ldd	r16, Y+1	; 0x01
    1678:	10 e0       	ldi	r17, 0x00	; 0
    167a:	e7 01       	movw	r28, r14
    167c:	21 97       	sbiw	r28, 0x01	; 1
    167e:	43 e0       	ldi	r20, 0x03	; 3
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	6e e5       	ldi	r22, 0x5E	; 94
    1684:	71 e0       	ldi	r23, 0x01	; 1
    1686:	ce 01       	movw	r24, r28
    1688:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <strncasecmp_P>
    168c:	89 2b       	or	r24, r25
    168e:	c1 f4       	brne	.+48     	; 0x16c0 <strtod+0x9e>
    1690:	23 96       	adiw	r28, 0x03	; 3
    1692:	45 e0       	ldi	r20, 0x05	; 5
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	69 e5       	ldi	r22, 0x59	; 89
    1698:	71 e0       	ldi	r23, 0x01	; 1
    169a:	ce 01       	movw	r24, r28
    169c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <strncasecmp_P>
    16a0:	89 2b       	or	r24, r25
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <strtod+0x84>
    16a4:	25 96       	adiw	r28, 0x05	; 5
    16a6:	c1 14       	cp	r12, r1
    16a8:	d1 04       	cpc	r13, r1
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <strtod+0x90>
    16ac:	f6 01       	movw	r30, r12
    16ae:	d1 83       	std	Z+1, r29	; 0x01
    16b0:	c0 83       	st	Z, r28
    16b2:	11 11       	cpse	r17, r1
    16b4:	f6 c0       	rjmp	.+492    	; 0x18a2 <strtod+0x280>
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 e8       	ldi	r24, 0x80	; 128
    16bc:	9f e7       	ldi	r25, 0x7F	; 127
    16be:	fa c0       	rjmp	.+500    	; 0x18b4 <strtod+0x292>
    16c0:	43 e0       	ldi	r20, 0x03	; 3
    16c2:	50 e0       	ldi	r21, 0x00	; 0
    16c4:	66 e5       	ldi	r22, 0x56	; 86
    16c6:	71 e0       	ldi	r23, 0x01	; 1
    16c8:	ce 01       	movw	r24, r28
    16ca:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <strncasecmp_P>
    16ce:	89 2b       	or	r24, r25
    16d0:	59 f4       	brne	.+22     	; 0x16e8 <strtod+0xc6>
    16d2:	c1 14       	cp	r12, r1
    16d4:	d1 04       	cpc	r13, r1
    16d6:	09 f4       	brne	.+2      	; 0x16da <strtod+0xb8>
    16d8:	e9 c0       	rjmp	.+466    	; 0x18ac <strtod+0x28a>
    16da:	f2 e0       	ldi	r31, 0x02	; 2
    16dc:	ef 0e       	add	r14, r31
    16de:	f1 1c       	adc	r15, r1
    16e0:	f6 01       	movw	r30, r12
    16e2:	f1 82       	std	Z+1, r15	; 0x01
    16e4:	e0 82       	st	Z, r14
    16e6:	e2 c0       	rjmp	.+452    	; 0x18ac <strtod+0x28a>
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	a9 01       	movw	r20, r18
    16ee:	c0 e0       	ldi	r28, 0x00	; 0
    16f0:	d0 e0       	ldi	r29, 0x00	; 0
    16f2:	f7 01       	movw	r30, r14
    16f4:	80 ed       	ldi	r24, 0xD0	; 208
    16f6:	a8 2e       	mov	r10, r24
    16f8:	a0 0e       	add	r10, r16
    16fa:	89 e0       	ldi	r24, 0x09	; 9
    16fc:	8a 15       	cp	r24, r10
    16fe:	30 f1       	brcs	.+76     	; 0x174c <strtod+0x12a>
    1700:	91 2f       	mov	r25, r17
    1702:	92 60       	ori	r25, 0x02	; 2
    1704:	b9 2e       	mov	r11, r25
    1706:	81 2f       	mov	r24, r17
    1708:	88 70       	andi	r24, 0x08	; 8
    170a:	12 ff       	sbrs	r17, 2
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <strtod+0xf4>
    170e:	81 11       	cpse	r24, r1
    1710:	24 c0       	rjmp	.+72     	; 0x175a <strtod+0x138>
    1712:	21 96       	adiw	r28, 0x01	; 1
    1714:	22 c0       	rjmp	.+68     	; 0x175a <strtod+0x138>
    1716:	81 11       	cpse	r24, r1
    1718:	21 97       	sbiw	r28, 0x01	; 1
    171a:	a5 e0       	ldi	r26, 0x05	; 5
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__muluhisi3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	aa 1f       	adc	r26, r26
    172c:	bb 1f       	adc	r27, r27
    172e:	9c 01       	movw	r18, r24
    1730:	ad 01       	movw	r20, r26
    1732:	2a 0d       	add	r18, r10
    1734:	31 1d       	adc	r19, r1
    1736:	41 1d       	adc	r20, r1
    1738:	51 1d       	adc	r21, r1
    173a:	28 39       	cpi	r18, 0x98	; 152
    173c:	89 e9       	ldi	r24, 0x99	; 153
    173e:	38 07       	cpc	r19, r24
    1740:	48 07       	cpc	r20, r24
    1742:	89 e1       	ldi	r24, 0x19	; 25
    1744:	58 07       	cpc	r21, r24
    1746:	48 f0       	brcs	.+18     	; 0x175a <strtod+0x138>
    1748:	16 60       	ori	r17, 0x06	; 6
    174a:	06 c0       	rjmp	.+12     	; 0x1758 <strtod+0x136>
    174c:	9e ef       	ldi	r25, 0xFE	; 254
    174e:	a9 12       	cpse	r10, r25
    1750:	0a c0       	rjmp	.+20     	; 0x1766 <strtod+0x144>
    1752:	13 fd       	sbrc	r17, 3
    1754:	40 c0       	rjmp	.+128    	; 0x17d6 <strtod+0x1b4>
    1756:	18 60       	ori	r17, 0x08	; 8
    1758:	b1 2e       	mov	r11, r17
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	e8 1a       	sub	r14, r24
    175e:	f8 0a       	sbc	r15, r24
    1760:	00 81       	ld	r16, Z
    1762:	1b 2d       	mov	r17, r11
    1764:	c6 cf       	rjmp	.-116    	; 0x16f2 <strtod+0xd0>
    1766:	80 2f       	mov	r24, r16
    1768:	8f 7d       	andi	r24, 0xDF	; 223
    176a:	85 34       	cpi	r24, 0x45	; 69
    176c:	a1 f5       	brne	.+104    	; 0x17d6 <strtod+0x1b4>
    176e:	80 81       	ld	r24, Z
    1770:	8d 32       	cpi	r24, 0x2D	; 45
    1772:	11 f4       	brne	.+4      	; 0x1778 <strtod+0x156>
    1774:	10 61       	ori	r17, 0x10	; 16
    1776:	06 c0       	rjmp	.+12     	; 0x1784 <strtod+0x162>
    1778:	8b 32       	cpi	r24, 0x2B	; 43
    177a:	21 f0       	breq	.+8      	; 0x1784 <strtod+0x162>
    177c:	31 96       	adiw	r30, 0x01	; 1
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	70 e0       	ldi	r23, 0x00	; 0
    1782:	04 c0       	rjmp	.+8      	; 0x178c <strtod+0x16a>
    1784:	81 81       	ldd	r24, Z+1	; 0x01
    1786:	32 96       	adiw	r30, 0x02	; 2
    1788:	62 e0       	ldi	r22, 0x02	; 2
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	80 53       	subi	r24, 0x30	; 48
    178e:	8a 30       	cpi	r24, 0x0A	; 10
    1790:	18 f0       	brcs	.+6      	; 0x1798 <strtod+0x176>
    1792:	e6 1b       	sub	r30, r22
    1794:	f7 0b       	sbc	r31, r23
    1796:	1f c0       	rjmp	.+62     	; 0x17d6 <strtod+0x1b4>
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	60 38       	cpi	r22, 0x80	; 128
    179e:	9c e0       	ldi	r25, 0x0C	; 12
    17a0:	79 07       	cpc	r23, r25
    17a2:	5c f4       	brge	.+22     	; 0x17ba <strtod+0x198>
    17a4:	db 01       	movw	r26, r22
    17a6:	aa 0f       	add	r26, r26
    17a8:	bb 1f       	adc	r27, r27
    17aa:	aa 0f       	add	r26, r26
    17ac:	bb 1f       	adc	r27, r27
    17ae:	6a 0f       	add	r22, r26
    17b0:	7b 1f       	adc	r23, r27
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	68 0f       	add	r22, r24
    17b8:	71 1d       	adc	r23, r1
    17ba:	31 96       	adiw	r30, 0x01	; 1
    17bc:	df 01       	movw	r26, r30
    17be:	11 97       	sbiw	r26, 0x01	; 1
    17c0:	8c 91       	ld	r24, X
    17c2:	80 53       	subi	r24, 0x30	; 48
    17c4:	8a 30       	cpi	r24, 0x0A	; 10
    17c6:	50 f3       	brcs	.-44     	; 0x179c <strtod+0x17a>
    17c8:	14 ff       	sbrs	r17, 4
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <strtod+0x1b0>
    17cc:	71 95       	neg	r23
    17ce:	61 95       	neg	r22
    17d0:	71 09       	sbc	r23, r1
    17d2:	c6 0f       	add	r28, r22
    17d4:	d7 1f       	adc	r29, r23
    17d6:	11 ff       	sbrs	r17, 1
    17d8:	08 c0       	rjmp	.+16     	; 0x17ea <strtod+0x1c8>
    17da:	c1 14       	cp	r12, r1
    17dc:	d1 04       	cpc	r13, r1
    17de:	29 f0       	breq	.+10     	; 0x17ea <strtod+0x1c8>
    17e0:	cf 01       	movw	r24, r30
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	f6 01       	movw	r30, r12
    17e6:	91 83       	std	Z+1, r25	; 0x01
    17e8:	80 83       	st	Z, r24
    17ea:	ca 01       	movw	r24, r20
    17ec:	b9 01       	movw	r22, r18
    17ee:	0e 94 85 0c 	call	0x190a	; 0x190a <__floatunsisf>
    17f2:	21 2f       	mov	r18, r17
    17f4:	23 70       	andi	r18, 0x03	; 3
    17f6:	23 30       	cpi	r18, 0x03	; 3
    17f8:	19 f0       	breq	.+6      	; 0x1800 <strtod+0x1de>
    17fa:	4b 01       	movw	r8, r22
    17fc:	5c 01       	movw	r10, r24
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <strtod+0x1ea>
    1800:	4b 01       	movw	r8, r22
    1802:	5c 01       	movw	r10, r24
    1804:	b7 fa       	bst	r11, 7
    1806:	b0 94       	com	r11
    1808:	b7 f8       	bld	r11, 7
    180a:	b0 94       	com	r11
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	a9 01       	movw	r20, r18
    1812:	c5 01       	movw	r24, r10
    1814:	b4 01       	movw	r22, r8
    1816:	0e 94 80 0c 	call	0x1900	; 0x1900 <__cmpsf2>
    181a:	88 23       	and	r24, r24
    181c:	09 f4       	brne	.+2      	; 0x1820 <strtod+0x1fe>
    181e:	3e c0       	rjmp	.+124    	; 0x189c <strtod+0x27a>
    1820:	d7 ff       	sbrs	r29, 7
    1822:	06 c0       	rjmp	.+12     	; 0x1830 <strtod+0x20e>
    1824:	d1 95       	neg	r29
    1826:	c1 95       	neg	r28
    1828:	d1 09       	sbc	r29, r1
    182a:	05 e7       	ldi	r16, 0x75	; 117
    182c:	11 e0       	ldi	r17, 0x01	; 1
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <strtod+0x212>
    1830:	0d e8       	ldi	r16, 0x8D	; 141
    1832:	11 e0       	ldi	r17, 0x01	; 1
    1834:	68 01       	movw	r12, r16
    1836:	f8 e1       	ldi	r31, 0x18	; 24
    1838:	cf 1a       	sub	r12, r31
    183a:	d1 08       	sbc	r13, r1
    183c:	90 e2       	ldi	r25, 0x20	; 32
    183e:	e9 2e       	mov	r14, r25
    1840:	f1 2c       	mov	r15, r1
    1842:	ce 15       	cp	r28, r14
    1844:	df 05       	cpc	r29, r15
    1846:	74 f0       	brlt	.+28     	; 0x1864 <strtod+0x242>
    1848:	f8 01       	movw	r30, r16
    184a:	25 91       	lpm	r18, Z+
    184c:	35 91       	lpm	r19, Z+
    184e:	45 91       	lpm	r20, Z+
    1850:	54 91       	lpm	r21, Z
    1852:	c5 01       	movw	r24, r10
    1854:	b4 01       	movw	r22, r8
    1856:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <__mulsf3>
    185a:	4b 01       	movw	r8, r22
    185c:	5c 01       	movw	r10, r24
    185e:	ce 19       	sub	r28, r14
    1860:	df 09       	sbc	r29, r15
    1862:	ef cf       	rjmp	.-34     	; 0x1842 <strtod+0x220>
    1864:	04 50       	subi	r16, 0x04	; 4
    1866:	11 09       	sbc	r17, r1
    1868:	f5 94       	asr	r15
    186a:	e7 94       	ror	r14
    186c:	0c 15       	cp	r16, r12
    186e:	1d 05       	cpc	r17, r13
    1870:	41 f7       	brne	.-48     	; 0x1842 <strtod+0x220>
    1872:	8a 2d       	mov	r24, r10
    1874:	88 0f       	add	r24, r24
    1876:	8b 2d       	mov	r24, r11
    1878:	88 1f       	adc	r24, r24
    187a:	8f 3f       	cpi	r24, 0xFF	; 255
    187c:	49 f0       	breq	.+18     	; 0x1890 <strtod+0x26e>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	a9 01       	movw	r20, r18
    1884:	c5 01       	movw	r24, r10
    1886:	b4 01       	movw	r22, r8
    1888:	0e 94 80 0c 	call	0x1900	; 0x1900 <__cmpsf2>
    188c:	81 11       	cpse	r24, r1
    188e:	06 c0       	rjmp	.+12     	; 0x189c <strtod+0x27a>
    1890:	82 e2       	ldi	r24, 0x22	; 34
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <errno+0x1>
    1898:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <errno>
    189c:	c5 01       	movw	r24, r10
    189e:	b4 01       	movw	r22, r8
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <strtod+0x292>
    18a2:	60 e0       	ldi	r22, 0x00	; 0
    18a4:	70 e0       	ldi	r23, 0x00	; 0
    18a6:	80 e8       	ldi	r24, 0x80	; 128
    18a8:	9f ef       	ldi	r25, 0xFF	; 255
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <strtod+0x292>
    18ac:	60 e0       	ldi	r22, 0x00	; 0
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	80 ec       	ldi	r24, 0xC0	; 192
    18b2:	9f e7       	ldi	r25, 0x7F	; 127
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	ec e0       	ldi	r30, 0x0C	; 12
    18ba:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__epilogue_restores__+0xc>

000018be <isspace>:
    18be:	91 11       	cpse	r25, r1
    18c0:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__ctype_isfalse>
    18c4:	80 32       	cpi	r24, 0x20	; 32
    18c6:	19 f0       	breq	.+6      	; 0x18ce <isspace+0x10>
    18c8:	89 50       	subi	r24, 0x09	; 9
    18ca:	85 50       	subi	r24, 0x05	; 5
    18cc:	c8 f7       	brcc	.-14     	; 0x18c0 <isspace+0x2>
    18ce:	08 95       	ret

000018d0 <strncasecmp_P>:
    18d0:	fb 01       	movw	r30, r22
    18d2:	dc 01       	movw	r26, r24
    18d4:	41 50       	subi	r20, 0x01	; 1
    18d6:	50 40       	sbci	r21, 0x00	; 0
    18d8:	88 f0       	brcs	.+34     	; 0x18fc <strncasecmp_P+0x2c>
    18da:	8d 91       	ld	r24, X+
    18dc:	81 34       	cpi	r24, 0x41	; 65
    18de:	1c f0       	brlt	.+6      	; 0x18e6 <strncasecmp_P+0x16>
    18e0:	8b 35       	cpi	r24, 0x5B	; 91
    18e2:	0c f4       	brge	.+2      	; 0x18e6 <strncasecmp_P+0x16>
    18e4:	80 5e       	subi	r24, 0xE0	; 224
    18e6:	65 91       	lpm	r22, Z+
    18e8:	61 34       	cpi	r22, 0x41	; 65
    18ea:	1c f0       	brlt	.+6      	; 0x18f2 <strncasecmp_P+0x22>
    18ec:	6b 35       	cpi	r22, 0x5B	; 91
    18ee:	0c f4       	brge	.+2      	; 0x18f2 <strncasecmp_P+0x22>
    18f0:	60 5e       	subi	r22, 0xE0	; 224
    18f2:	86 1b       	sub	r24, r22
    18f4:	61 11       	cpse	r22, r1
    18f6:	71 f3       	breq	.-36     	; 0x18d4 <strncasecmp_P+0x4>
    18f8:	99 0b       	sbc	r25, r25
    18fa:	08 95       	ret
    18fc:	88 1b       	sub	r24, r24
    18fe:	fc cf       	rjmp	.-8      	; 0x18f8 <strncasecmp_P+0x28>

00001900 <__cmpsf2>:
    1900:	0e 94 c2 0c 	call	0x1984	; 0x1984 <__fp_cmp>
    1904:	08 f4       	brcc	.+2      	; 0x1908 <__cmpsf2+0x8>
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	08 95       	ret

0000190a <__floatunsisf>:
    190a:	e8 94       	clt
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <__floatsisf+0x12>

0000190e <__floatsisf>:
    190e:	97 fb       	bst	r25, 7
    1910:	3e f4       	brtc	.+14     	; 0x1920 <__floatsisf+0x12>
    1912:	90 95       	com	r25
    1914:	80 95       	com	r24
    1916:	70 95       	com	r23
    1918:	61 95       	neg	r22
    191a:	7f 4f       	sbci	r23, 0xFF	; 255
    191c:	8f 4f       	sbci	r24, 0xFF	; 255
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	99 23       	and	r25, r25
    1922:	a9 f0       	breq	.+42     	; 0x194e <__floatsisf+0x40>
    1924:	f9 2f       	mov	r31, r25
    1926:	96 e9       	ldi	r25, 0x96	; 150
    1928:	bb 27       	eor	r27, r27
    192a:	93 95       	inc	r25
    192c:	f6 95       	lsr	r31
    192e:	87 95       	ror	r24
    1930:	77 95       	ror	r23
    1932:	67 95       	ror	r22
    1934:	b7 95       	ror	r27
    1936:	f1 11       	cpse	r31, r1
    1938:	f8 cf       	rjmp	.-16     	; 0x192a <__floatsisf+0x1c>
    193a:	fa f4       	brpl	.+62     	; 0x197a <__floatsisf+0x6c>
    193c:	bb 0f       	add	r27, r27
    193e:	11 f4       	brne	.+4      	; 0x1944 <__floatsisf+0x36>
    1940:	60 ff       	sbrs	r22, 0
    1942:	1b c0       	rjmp	.+54     	; 0x197a <__floatsisf+0x6c>
    1944:	6f 5f       	subi	r22, 0xFF	; 255
    1946:	7f 4f       	sbci	r23, 0xFF	; 255
    1948:	8f 4f       	sbci	r24, 0xFF	; 255
    194a:	9f 4f       	sbci	r25, 0xFF	; 255
    194c:	16 c0       	rjmp	.+44     	; 0x197a <__floatsisf+0x6c>
    194e:	88 23       	and	r24, r24
    1950:	11 f0       	breq	.+4      	; 0x1956 <__floatsisf+0x48>
    1952:	96 e9       	ldi	r25, 0x96	; 150
    1954:	11 c0       	rjmp	.+34     	; 0x1978 <__floatsisf+0x6a>
    1956:	77 23       	and	r23, r23
    1958:	21 f0       	breq	.+8      	; 0x1962 <__floatsisf+0x54>
    195a:	9e e8       	ldi	r25, 0x8E	; 142
    195c:	87 2f       	mov	r24, r23
    195e:	76 2f       	mov	r23, r22
    1960:	05 c0       	rjmp	.+10     	; 0x196c <__floatsisf+0x5e>
    1962:	66 23       	and	r22, r22
    1964:	71 f0       	breq	.+28     	; 0x1982 <__floatsisf+0x74>
    1966:	96 e8       	ldi	r25, 0x86	; 134
    1968:	86 2f       	mov	r24, r22
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	2a f0       	brmi	.+10     	; 0x197a <__floatsisf+0x6c>
    1970:	9a 95       	dec	r25
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	88 1f       	adc	r24, r24
    1978:	da f7       	brpl	.-10     	; 0x1970 <__floatsisf+0x62>
    197a:	88 0f       	add	r24, r24
    197c:	96 95       	lsr	r25
    197e:	87 95       	ror	r24
    1980:	97 f9       	bld	r25, 7
    1982:	08 95       	ret

00001984 <__fp_cmp>:
    1984:	99 0f       	add	r25, r25
    1986:	00 08       	sbc	r0, r0
    1988:	55 0f       	add	r21, r21
    198a:	aa 0b       	sbc	r26, r26
    198c:	e0 e8       	ldi	r30, 0x80	; 128
    198e:	fe ef       	ldi	r31, 0xFE	; 254
    1990:	16 16       	cp	r1, r22
    1992:	17 06       	cpc	r1, r23
    1994:	e8 07       	cpc	r30, r24
    1996:	f9 07       	cpc	r31, r25
    1998:	c0 f0       	brcs	.+48     	; 0x19ca <__fp_cmp+0x46>
    199a:	12 16       	cp	r1, r18
    199c:	13 06       	cpc	r1, r19
    199e:	e4 07       	cpc	r30, r20
    19a0:	f5 07       	cpc	r31, r21
    19a2:	98 f0       	brcs	.+38     	; 0x19ca <__fp_cmp+0x46>
    19a4:	62 1b       	sub	r22, r18
    19a6:	73 0b       	sbc	r23, r19
    19a8:	84 0b       	sbc	r24, r20
    19aa:	95 0b       	sbc	r25, r21
    19ac:	39 f4       	brne	.+14     	; 0x19bc <__fp_cmp+0x38>
    19ae:	0a 26       	eor	r0, r26
    19b0:	61 f0       	breq	.+24     	; 0x19ca <__fp_cmp+0x46>
    19b2:	23 2b       	or	r18, r19
    19b4:	24 2b       	or	r18, r20
    19b6:	25 2b       	or	r18, r21
    19b8:	21 f4       	brne	.+8      	; 0x19c2 <__fp_cmp+0x3e>
    19ba:	08 95       	ret
    19bc:	0a 26       	eor	r0, r26
    19be:	09 f4       	brne	.+2      	; 0x19c2 <__fp_cmp+0x3e>
    19c0:	a1 40       	sbci	r26, 0x01	; 1
    19c2:	a6 95       	lsr	r26
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	81 1d       	adc	r24, r1
    19c8:	81 1d       	adc	r24, r1
    19ca:	08 95       	ret

000019cc <__mulsf3>:
    19cc:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__mulsf3x>
    19d0:	0c 94 6d 0d 	jmp	0x1ada	; 0x1ada <__fp_round>
    19d4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__fp_pscA>
    19d8:	38 f0       	brcs	.+14     	; 0x19e8 <__mulsf3+0x1c>
    19da:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_pscB>
    19de:	20 f0       	brcs	.+8      	; 0x19e8 <__mulsf3+0x1c>
    19e0:	95 23       	and	r25, r21
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <__mulsf3+0x1c>
    19e4:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_inf>
    19e8:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__fp_nan>
    19ec:	11 24       	eor	r1, r1
    19ee:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_szero>

000019f2 <__mulsf3x>:
    19f2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fp_split3>
    19f6:	70 f3       	brcs	.-36     	; 0x19d4 <__mulsf3+0x8>

000019f8 <__mulsf3_pse>:
    19f8:	95 9f       	mul	r25, r21
    19fa:	c1 f3       	breq	.-16     	; 0x19ec <__mulsf3+0x20>
    19fc:	95 0f       	add	r25, r21
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	55 1f       	adc	r21, r21
    1a02:	62 9f       	mul	r22, r18
    1a04:	f0 01       	movw	r30, r0
    1a06:	72 9f       	mul	r23, r18
    1a08:	bb 27       	eor	r27, r27
    1a0a:	f0 0d       	add	r31, r0
    1a0c:	b1 1d       	adc	r27, r1
    1a0e:	63 9f       	mul	r22, r19
    1a10:	aa 27       	eor	r26, r26
    1a12:	f0 0d       	add	r31, r0
    1a14:	b1 1d       	adc	r27, r1
    1a16:	aa 1f       	adc	r26, r26
    1a18:	64 9f       	mul	r22, r20
    1a1a:	66 27       	eor	r22, r22
    1a1c:	b0 0d       	add	r27, r0
    1a1e:	a1 1d       	adc	r26, r1
    1a20:	66 1f       	adc	r22, r22
    1a22:	82 9f       	mul	r24, r18
    1a24:	22 27       	eor	r18, r18
    1a26:	b0 0d       	add	r27, r0
    1a28:	a1 1d       	adc	r26, r1
    1a2a:	62 1f       	adc	r22, r18
    1a2c:	73 9f       	mul	r23, r19
    1a2e:	b0 0d       	add	r27, r0
    1a30:	a1 1d       	adc	r26, r1
    1a32:	62 1f       	adc	r22, r18
    1a34:	83 9f       	mul	r24, r19
    1a36:	a0 0d       	add	r26, r0
    1a38:	61 1d       	adc	r22, r1
    1a3a:	22 1f       	adc	r18, r18
    1a3c:	74 9f       	mul	r23, r20
    1a3e:	33 27       	eor	r19, r19
    1a40:	a0 0d       	add	r26, r0
    1a42:	61 1d       	adc	r22, r1
    1a44:	23 1f       	adc	r18, r19
    1a46:	84 9f       	mul	r24, r20
    1a48:	60 0d       	add	r22, r0
    1a4a:	21 1d       	adc	r18, r1
    1a4c:	82 2f       	mov	r24, r18
    1a4e:	76 2f       	mov	r23, r22
    1a50:	6a 2f       	mov	r22, r26
    1a52:	11 24       	eor	r1, r1
    1a54:	9f 57       	subi	r25, 0x7F	; 127
    1a56:	50 40       	sbci	r21, 0x00	; 0
    1a58:	9a f0       	brmi	.+38     	; 0x1a80 <__mulsf3_pse+0x88>
    1a5a:	f1 f0       	breq	.+60     	; 0x1a98 <__mulsf3_pse+0xa0>
    1a5c:	88 23       	and	r24, r24
    1a5e:	4a f0       	brmi	.+18     	; 0x1a72 <__mulsf3_pse+0x7a>
    1a60:	ee 0f       	add	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	bb 1f       	adc	r27, r27
    1a66:	66 1f       	adc	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	91 50       	subi	r25, 0x01	; 1
    1a6e:	50 40       	sbci	r21, 0x00	; 0
    1a70:	a9 f7       	brne	.-22     	; 0x1a5c <__mulsf3_pse+0x64>
    1a72:	9e 3f       	cpi	r25, 0xFE	; 254
    1a74:	51 05       	cpc	r21, r1
    1a76:	80 f0       	brcs	.+32     	; 0x1a98 <__mulsf3_pse+0xa0>
    1a78:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__fp_inf>
    1a7c:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__fp_szero>
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	e4 f3       	brlt	.-8      	; 0x1a7c <__mulsf3_pse+0x84>
    1a84:	98 3e       	cpi	r25, 0xE8	; 232
    1a86:	d4 f3       	brlt	.-12     	; 0x1a7c <__mulsf3_pse+0x84>
    1a88:	86 95       	lsr	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b7 95       	ror	r27
    1a90:	f7 95       	ror	r31
    1a92:	e7 95       	ror	r30
    1a94:	9f 5f       	subi	r25, 0xFF	; 255
    1a96:	c1 f7       	brne	.-16     	; 0x1a88 <__mulsf3_pse+0x90>
    1a98:	fe 2b       	or	r31, r30
    1a9a:	88 0f       	add	r24, r24
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	96 95       	lsr	r25
    1aa0:	87 95       	ror	r24
    1aa2:	97 f9       	bld	r25, 7
    1aa4:	08 95       	ret

00001aa6 <__ctype_isfalse>:
    1aa6:	99 27       	eor	r25, r25
    1aa8:	88 27       	eor	r24, r24

00001aaa <__ctype_istrue>:
    1aaa:	08 95       	ret

00001aac <__fp_inf>:
    1aac:	97 f9       	bld	r25, 7
    1aae:	9f 67       	ori	r25, 0x7F	; 127
    1ab0:	80 e8       	ldi	r24, 0x80	; 128
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	08 95       	ret

00001ab8 <__fp_nan>:
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	80 ec       	ldi	r24, 0xC0	; 192
    1abc:	08 95       	ret

00001abe <__fp_pscA>:
    1abe:	00 24       	eor	r0, r0
    1ac0:	0a 94       	dec	r0
    1ac2:	16 16       	cp	r1, r22
    1ac4:	17 06       	cpc	r1, r23
    1ac6:	18 06       	cpc	r1, r24
    1ac8:	09 06       	cpc	r0, r25
    1aca:	08 95       	ret

00001acc <__fp_pscB>:
    1acc:	00 24       	eor	r0, r0
    1ace:	0a 94       	dec	r0
    1ad0:	12 16       	cp	r1, r18
    1ad2:	13 06       	cpc	r1, r19
    1ad4:	14 06       	cpc	r1, r20
    1ad6:	05 06       	cpc	r0, r21
    1ad8:	08 95       	ret

00001ada <__fp_round>:
    1ada:	09 2e       	mov	r0, r25
    1adc:	03 94       	inc	r0
    1ade:	00 0c       	add	r0, r0
    1ae0:	11 f4       	brne	.+4      	; 0x1ae6 <__fp_round+0xc>
    1ae2:	88 23       	and	r24, r24
    1ae4:	52 f0       	brmi	.+20     	; 0x1afa <__fp_round+0x20>
    1ae6:	bb 0f       	add	r27, r27
    1ae8:	40 f4       	brcc	.+16     	; 0x1afa <__fp_round+0x20>
    1aea:	bf 2b       	or	r27, r31
    1aec:	11 f4       	brne	.+4      	; 0x1af2 <__fp_round+0x18>
    1aee:	60 ff       	sbrs	r22, 0
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__fp_round+0x20>
    1af2:	6f 5f       	subi	r22, 0xFF	; 255
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	8f 4f       	sbci	r24, 0xFF	; 255
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	08 95       	ret

00001afc <__fp_split3>:
    1afc:	57 fd       	sbrc	r21, 7
    1afe:	90 58       	subi	r25, 0x80	; 128
    1b00:	44 0f       	add	r20, r20
    1b02:	55 1f       	adc	r21, r21
    1b04:	59 f0       	breq	.+22     	; 0x1b1c <__fp_splitA+0x10>
    1b06:	5f 3f       	cpi	r21, 0xFF	; 255
    1b08:	71 f0       	breq	.+28     	; 0x1b26 <__fp_splitA+0x1a>
    1b0a:	47 95       	ror	r20

00001b0c <__fp_splitA>:
    1b0c:	88 0f       	add	r24, r24
    1b0e:	97 fb       	bst	r25, 7
    1b10:	99 1f       	adc	r25, r25
    1b12:	61 f0       	breq	.+24     	; 0x1b2c <__fp_splitA+0x20>
    1b14:	9f 3f       	cpi	r25, 0xFF	; 255
    1b16:	79 f0       	breq	.+30     	; 0x1b36 <__fp_splitA+0x2a>
    1b18:	87 95       	ror	r24
    1b1a:	08 95       	ret
    1b1c:	12 16       	cp	r1, r18
    1b1e:	13 06       	cpc	r1, r19
    1b20:	14 06       	cpc	r1, r20
    1b22:	55 1f       	adc	r21, r21
    1b24:	f2 cf       	rjmp	.-28     	; 0x1b0a <__fp_split3+0xe>
    1b26:	46 95       	lsr	r20
    1b28:	f1 df       	rcall	.-30     	; 0x1b0c <__fp_splitA>
    1b2a:	08 c0       	rjmp	.+16     	; 0x1b3c <__fp_splitA+0x30>
    1b2c:	16 16       	cp	r1, r22
    1b2e:	17 06       	cpc	r1, r23
    1b30:	18 06       	cpc	r1, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	f1 cf       	rjmp	.-30     	; 0x1b18 <__fp_splitA+0xc>
    1b36:	86 95       	lsr	r24
    1b38:	71 05       	cpc	r23, r1
    1b3a:	61 05       	cpc	r22, r1
    1b3c:	08 94       	sec
    1b3e:	08 95       	ret

00001b40 <__fp_zero>:
    1b40:	e8 94       	clt

00001b42 <__fp_szero>:
    1b42:	bb 27       	eor	r27, r27
    1b44:	66 27       	eor	r22, r22
    1b46:	77 27       	eor	r23, r23
    1b48:	cb 01       	movw	r24, r22
    1b4a:	97 f9       	bld	r25, 7
    1b4c:	08 95       	ret

00001b4e <__muluhisi3>:
    1b4e:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__umulhisi3>
    1b52:	a5 9f       	mul	r26, r21
    1b54:	90 0d       	add	r25, r0
    1b56:	b4 9f       	mul	r27, r20
    1b58:	90 0d       	add	r25, r0
    1b5a:	a4 9f       	mul	r26, r20
    1b5c:	80 0d       	add	r24, r0
    1b5e:	91 1d       	adc	r25, r1
    1b60:	11 24       	eor	r1, r1
    1b62:	08 95       	ret

00001b64 <__umulhisi3>:
    1b64:	a2 9f       	mul	r26, r18
    1b66:	b0 01       	movw	r22, r0
    1b68:	b3 9f       	mul	r27, r19
    1b6a:	c0 01       	movw	r24, r0
    1b6c:	a3 9f       	mul	r26, r19
    1b6e:	70 0d       	add	r23, r0
    1b70:	81 1d       	adc	r24, r1
    1b72:	11 24       	eor	r1, r1
    1b74:	91 1d       	adc	r25, r1
    1b76:	b2 9f       	mul	r27, r18
    1b78:	70 0d       	add	r23, r0
    1b7a:	81 1d       	adc	r24, r1
    1b7c:	11 24       	eor	r1, r1
    1b7e:	91 1d       	adc	r25, r1
    1b80:	08 95       	ret

00001b82 <_exit>:
    1b82:	f8 94       	cli

00001b84 <__stop_program>:
    1b84:	ff cf       	rjmp	.-2      	; 0x1b84 <__stop_program>
