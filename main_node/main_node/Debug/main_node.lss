
main_node.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001be4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  00001be4  00001c78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000194  00800260  00800260  00001e78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00001f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c42  00000000  00000000  00001fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000712  00000000  00000000  00002be2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cda  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008fb  00000000  00000000  00004702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004ffd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 00 	jmp	0x192	; 0x192 <__ctors_end>
       4:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
       c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      10:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      14:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      18:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      1c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      20:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_8>
      24:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      28:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      2c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      30:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      34:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      38:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      3c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      40:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      44:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      48:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      4c:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>
      50:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <pstr_nan>:
     156:	4e 41 4e                                            NAN

00000159 <pstr_inity>:
     159:	49 4e 49 54 59                                      INITY

0000015e <pstr_inf>:
     15e:	49 4e 46                                            INF

00000161 <pwr_m10>:
     161:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     171:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000179 <pwr_p10>:
     179:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     189:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000192 <__ctors_end>:
     192:	11 24       	eor	r1, r1
     194:	1f be       	out	0x3f, r1	; 63
     196:	cf e5       	ldi	r28, 0x5F	; 95
     198:	d4 e0       	ldi	r29, 0x04	; 4
     19a:	de bf       	out	0x3e, r29	; 62
     19c:	cd bf       	out	0x3d, r28	; 61

0000019e <__do_copy_data>:
     19e:	12 e0       	ldi	r17, 0x02	; 2
     1a0:	a0 e6       	ldi	r26, 0x60	; 96
     1a2:	b0 e0       	ldi	r27, 0x00	; 0
     1a4:	e4 ee       	ldi	r30, 0xE4	; 228
     1a6:	fb e1       	ldi	r31, 0x1B	; 27
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x10>
     1aa:	05 90       	lpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	a0 36       	cpi	r26, 0x60	; 96
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0xc>

000001b4 <__do_clear_bss>:
     1b4:	23 e0       	ldi	r18, 0x03	; 3
     1b6:	a0 e6       	ldi	r26, 0x60	; 96
     1b8:	b2 e0       	ldi	r27, 0x02	; 2
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	a4 3f       	cpi	r26, 0xF4	; 244
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	0e 94 9a 04 	call	0x934	; 0x934 <main>
     1c8:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <_exit>

000001cc <__bad_interrupt>:
     1cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001d0 <lcd_init_sim>:
#define _SFR_ASM_COMPAT 1
#define __SFR_OFFSET 0

.global lcd_init_sim
lcd_init_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     1d0:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     1d2:	9f 93       	push	r25
ldi r24, 40 ; Όταν ο ελεγκτής της lcd τροφοδοτείται με
     1d4:	88 e2       	ldi	r24, 0x28	; 40
ldi r25, 0 ; ρεύμα εκτελεί την δική του αρχικοποίηση.
     1d6:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_msec ; Αναμονή 40 msec μέχρι αυτή να ολοκληρωθεί.
     1d8:	6d d0       	rcall	.+218    	; 0x2b4 <wait_msec>
ldi r24, 0x30
     1da:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1dc:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1de:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1e0:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1e2:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     1e6:	70 d0       	rcall	.+224    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     1e8:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     1ea:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     1ec:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     1ee:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     1f0:	6b d0       	rcall	.+214    	; 0x2c8 <wait_usec>
pop r25
     1f2:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     1f4:	8f 91       	pop	r24
ldi r24, 0x30
     1f6:	80 e3       	ldi	r24, 0x30	; 48
out PORTD, r24
     1f8:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     1fa:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     1fc:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     1fe:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     200:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     202:	62 d0       	rcall	.+196    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     204:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     206:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     208:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     20a:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     20c:	5d d0       	rcall	.+186    	; 0x2c8 <wait_usec>
pop r25
     20e:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     210:	8f 91       	pop	r24
ldi r24,0x20 ; αλλαγή σε 4-bit mode
     212:	80 e2       	ldi	r24, 0x20	; 32
out PORTD, r24
     214:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3
     216:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     218:	93 98       	cbi	0x12, 3	; 18
ldi r24,39
     21a:	87 e2       	ldi	r24, 0x27	; 39
ldi r25,0
     21c:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     21e:	54 d0       	rcall	.+168    	; 0x2c8 <wait_usec>
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     220:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     222:	9f 93       	push	r25
ldi r24 ,lo8(1000) ; πρόσβασης
     224:	88 ee       	ldi	r24, 0xE8	; 232
ldi r25 ,hi8(1000)
     226:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec
     228:	4f d0       	rcall	.+158    	; 0x2c8 <wait_usec>
pop r25
     22a:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     22c:	8f 91       	pop	r24
ldi r24,0x28 ; επιλογή χαρακτήρων μεγέθους 5x8 κουκίδων
     22e:	88 e2       	ldi	r24, 0x28	; 40
rcall lcd_command_sim ; και εμφάνιση δύο γραμμών στην οθόνη
     230:	0f d0       	rcall	.+30     	; 0x250 <lcd_command_sim>
ldi r24,0x0c ; ενεργοποίηση της οθόνης, απόκρυψη του κέρσορα
     232:	8c e0       	ldi	r24, 0x0C	; 12
rcall lcd_command_sim
     234:	0d d0       	rcall	.+26     	; 0x250 <lcd_command_sim>
ldi r24,0x01 ; καθαρισμός της οθόνης
     236:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     238:	0b d0       	rcall	.+22     	; 0x250 <lcd_command_sim>
ldi r24, lo8(1530)
     23a:	8a ef       	ldi	r24, 0xFA	; 250
ldi r25, hi8(1530)
     23c:	95 e0       	ldi	r25, 0x05	; 5
rcall wait_usec
     23e:	44 d0       	rcall	.+136    	; 0x2c8 <wait_usec>
ldi r24 ,0x06 ; ενεργοποίηση αυτόματης αύξησης κατά 1 της διεύθυνσης
     240:	86 e0       	ldi	r24, 0x06	; 6
rcall lcd_command_sim ; που είναι αποθηκευμένη στον μετρητή διευθύνσεων και
     242:	06 d0       	rcall	.+12     	; 0x250 <lcd_command_sim>
; απενεργοποίηση της ολίσθησης ολόκληρης της οθόνης
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     244:	9f 91       	pop	r25
pop r24
     246:	8f 91       	pop	r24
ret
     248:	08 95       	ret

0000024a <lcd_clear>:


.global lcd_clear
lcd_clear:
ldi r24,0x01 ; καθαρισμός της οθόνης
     24a:	81 e0       	ldi	r24, 0x01	; 1
rcall lcd_command_sim
     24c:	01 d0       	rcall	.+2      	; 0x250 <lcd_command_sim>
ret
     24e:	08 95       	ret

00000250 <lcd_command_sim>:

lcd_command_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     250:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     252:	9f 93       	push	r25
cbi PORTD, PD2 ; επιλογή του καταχωρητή εντολών (PD2=0)
     254:	92 98       	cbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή της εντολής και αναμονή 39μsec
     256:	06 d0       	rcall	.+12     	; 0x264 <write_2_nibbles_sim>
ldi r24, 39 ; για την ολοκλήρωση της εκτέλεσης της από τον ελεγκτή της lcd.
     258:	87 e2       	ldi	r24, 0x27	; 39
ldi r25, 0 ; ΣΗΜ.: υπάρχουν δύο εντολές, οι clear display και return home,
     25a:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec ; που απαιτούν σημαντικά μεγαλύτερο χρονικό διάστημα.
     25c:	35 d0       	rcall	.+106    	; 0x2c8 <wait_usec>
pop r25 ; επανάφερε τους καταχωρητές r25:r24
     25e:	9f 91       	pop	r25
pop r24
     260:	8f 91       	pop	r24
ret
     262:	08 95       	ret

00000264 <write_2_nibbles_sim>:

write_2_nibbles_sim:
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     264:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     266:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     268:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     26a:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     26c:	2d d0       	rcall	.+90     	; 0x2c8 <wait_usec>
pop r25
     26e:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     270:	8f 91       	pop	r24
push r24 ; στέλνει τα 4 MSB
     272:	8f 93       	push	r24
in r25, PIND ; διαβάζονται τα 4 LSB και τα ξαναστέλνουμε
     274:	90 b3       	in	r25, 0x10	; 16
andi r25, 0x0f ; για να μην χαλάσουμε την όποια προηγούμενη κατάσταση
     276:	9f 70       	andi	r25, 0x0F	; 15
andi r24, 0xf0 ; απομονώνονται τα 4 MSB και
     278:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25 ; συνδυάζονται με τα προϋπάρχοντα 4 LSB
     27a:	89 0f       	add	r24, r25
out PORTD, r24 ; και δίνονται στην έξοδο
     27c:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; δημιουργείται παλμός Enable στον ακροδέκτη PD3
     27e:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3 ; PD3=1 και μετά PD3=0
     280:	93 98       	cbi	0x12, 3	; 18
push r24 ; τμήμα κώδικα που προστίθεται για τη σωστή
     282:	8f 93       	push	r24
push r25 ; λειτουργία του προγραμματος απομακρυσμένης
     284:	9f 93       	push	r25
ldi r24 ,lo8(6000) ; πρόσβασης
     286:	80 e7       	ldi	r24, 0x70	; 112
ldi r25 ,hi8(6000)
     288:	97 e1       	ldi	r25, 0x17	; 23
rcall wait_usec
     28a:	1e d0       	rcall	.+60     	; 0x2c8 <wait_usec>
pop r25
     28c:	9f 91       	pop	r25
pop r24 ; τέλος τμήμα κώδικα
     28e:	8f 91       	pop	r24
pop r24 ; στέλνει τα 4 LSB. Ανακτάται το byte.
     290:	8f 91       	pop	r24
swap r24 ; εναλλάσσονται τα 4 MSB με τα 4 LSB
     292:	82 95       	swap	r24
andi r24 ,0xf0 ; που με την σειρά τους αποστέλλονται
     294:	80 7f       	andi	r24, 0xF0	; 240
add r24, r25
     296:	89 0f       	add	r24, r25
out PORTD, r24
     298:	82 bb       	out	0x12, r24	; 18
sbi PORTD, PD3 ; Νέος παλμός Enable
     29a:	93 9a       	sbi	0x12, 3	; 18
cbi PORTD, PD3
     29c:	93 98       	cbi	0x12, 3	; 18
ret
     29e:	08 95       	ret

000002a0 <lcd_data_sim>:

lcd_data_sim:
push r24 ; αποθήκευσε τους καταχωρητές r25:r24 γιατί τους
     2a0:	8f 93       	push	r24
push r25 ; αλλάζουμε μέσα στη ρουτίνα
     2a2:	9f 93       	push	r25
sbi PORTD, PD2 ; επιλογή του καταχωρητή δεδομένων (PD2=1)
     2a4:	92 9a       	sbi	0x12, 2	; 18
rcall write_2_nibbles_sim ; αποστολή του byte
     2a6:	de df       	rcall	.-68     	; 0x264 <write_2_nibbles_sim>
ldi r24 ,43 ; αναμονή 43μsec μέχρι να ολοκληρωθεί η λήψη
     2a8:	8b e2       	ldi	r24, 0x2B	; 43
ldi r25 ,0 ; των δεδομένων από τον ελεγκτή της lcd
     2aa:	90 e0       	ldi	r25, 0x00	; 0
rcall wait_usec
     2ac:	0d d0       	rcall	.+26     	; 0x2c8 <wait_usec>
pop r25 ;επανάφερε τους καταχωρητές r25:r24
     2ae:	9f 91       	pop	r25
pop r24
     2b0:	8f 91       	pop	r24
ret
     2b2:	08 95       	ret

000002b4 <wait_msec>:

.global wait_msec
wait_msec:
push r24 ; 2 κύκλοι (0.250 μsec)
     2b4:	8f 93       	push	r24
push r25 ; 2 κύκλοι
     2b6:	9f 93       	push	r25
ldi r24 , lo8(998) ; φόρτωσε τον καταχ. r25:r24 με 998 (1 κύκλος - 0.125 μsec)
     2b8:	86 ee       	ldi	r24, 0xE6	; 230
ldi r25 , hi8(998) ; 1 κύκλος (0.125 μsec)
     2ba:	93 e0       	ldi	r25, 0x03	; 3
rcall wait_usec ; 3 κύκλοι (0.375 μsec), προκαλεί συνολικά καθυστέρηση 998.375 μsec
     2bc:	05 d0       	rcall	.+10     	; 0x2c8 <wait_usec>
pop r25 ; 2 κύκλοι (0.250 μsec)
     2be:	9f 91       	pop	r25
pop r24 ; 2 κύκλοι
     2c0:	8f 91       	pop	r24
sbiw r24 , 1 ; 2 κύκλοι
     2c2:	01 97       	sbiw	r24, 0x01	; 1
brne wait_msec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2c4:	b9 f7       	brne	.-18     	; 0x2b4 <wait_msec>
ret ; 4 κύκλοι (0.500 μsec)
     2c6:	08 95       	ret

000002c8 <wait_usec>:

wait_usec:
sbiw r24 ,1 ; 2 κύκλοι (0.250 μsec)
     2c8:	01 97       	sbiw	r24, 0x01	; 1
	...
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
nop ; 1 κύκλος (0.125 μsec)
brne wait_usec ; 1 ή 2 κύκλοι (0.125 ή 0.250 μsec)
     2d2:	d1 f7       	brne	.-12     	; 0x2c8 <wait_usec>
ret ; 4 κύκλοι (0.500 μsec)
     2d4:	08 95       	ret

000002d6 <print>:


.global print
print:
rcall lcd_data_sim
     2d6:	e4 df       	rcall	.-56     	; 0x2a0 <lcd_data_sim>
     2d8:	08 95       	ret

000002da <print_string>:
		if(c=='\n')
		c='U';
		string_to_print[i]=c;
	}
	print_string(string_to_print);
}
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	ec 01       	movw	r28, r24
     2e2:	10 e0       	ldi	r17, 0x00	; 0
     2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <print_string+0x1a>
     2e6:	fe 01       	movw	r30, r28
     2e8:	e8 0f       	add	r30, r24
     2ea:	f9 1f       	adc	r31, r25
     2ec:	80 81       	ld	r24, Z
     2ee:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <print>
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
     2f4:	81 2f       	mov	r24, r17
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	fe 01       	movw	r30, r28
     2fa:	01 90       	ld	r0, Z+
     2fc:	00 20       	and	r0, r0
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <print_string+0x20>
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	ec 1b       	sub	r30, r28
     304:	fd 0b       	sbc	r31, r29
     306:	8e 17       	cp	r24, r30
     308:	9f 07       	cpc	r25, r31
     30a:	68 f3       	brcs	.-38     	; 0x2e6 <print_string+0xc>
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	08 95       	ret

00000314 <usart_init>:
     314:	1b b8       	out	0x0b, r1	; 11
     316:	28 e1       	ldi	r18, 0x18	; 24
     318:	2a b9       	out	0x0a, r18	; 10
     31a:	90 bd       	out	0x20, r25	; 32
     31c:	89 b9       	out	0x09, r24	; 9
     31e:	86 e8       	ldi	r24, 0x86	; 134
     320:	80 bd       	out	0x20, r24	; 32
     322:	08 95       	ret

00000324 <usart_transmit>:
     324:	5d 9b       	sbis	0x0b, 5	; 11
     326:	fe cf       	rjmp	.-4      	; 0x324 <usart_transmit>
     328:	8c b9       	out	0x0c, r24	; 12
     32a:	08 95       	ret

0000032c <usart_receive>:
     32c:	5f 9b       	sbis	0x0b, 7	; 11
     32e:	fe cf       	rjmp	.-4      	; 0x32c <usart_receive>
     330:	8c b1       	in	r24, 0x0c	; 12
     332:	08 95       	ret

00000334 <clear_buffer>:
     334:	84 e6       	ldi	r24, 0x64	; 100
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <wait_msec>
     33c:	02 c0       	rjmp	.+4      	; 0x342 <clear_buffer+0xe>
     33e:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     342:	5f 99       	sbic	0x0b, 7	; 11
     344:	fc cf       	rjmp	.-8      	; 0x33e <clear_buffer+0xa>
     346:	08 95       	ret

00000348 <serialWrite>:
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	ec 01       	movw	r28, r24
     350:	10 e0       	ldi	r17, 0x00	; 0
     352:	07 c0       	rjmp	.+14     	; 0x362 <serialWrite+0x1a>
     354:	fe 01       	movw	r30, r28
     356:	e8 0f       	add	r30, r24
     358:	f9 1f       	adc	r31, r25
     35a:	80 81       	ld	r24, Z
     35c:	0e 94 92 01 	call	0x324	; 0x324 <usart_transmit>
     360:	1f 5f       	subi	r17, 0xFF	; 255
     362:	81 2f       	mov	r24, r17
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	fe 01       	movw	r30, r28
     368:	01 90       	ld	r0, Z+
     36a:	00 20       	and	r0, r0
     36c:	e9 f7       	brne	.-6      	; 0x368 <serialWrite+0x20>
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	ec 1b       	sub	r30, r28
     372:	fd 0b       	sbc	r31, r29
     374:	8e 17       	cp	r24, r30
     376:	9f 07       	cpc	r25, r31
     378:	68 f3       	brcs	.-38     	; 0x354 <serialWrite+0xc>
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	1f 91       	pop	r17
     380:	08 95       	ret

00000382 <sendCommand>:
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	ec 01       	movw	r28, r24
     388:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
     38c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     390:	0c c0       	rjmp	.+24     	; 0x3aa <sendCommand+0x28>
     392:	86 34       	cpi	r24, 0x46	; 70
     394:	41 f4       	brne	.+16     	; 0x3a6 <sendCommand+0x24>
     396:	02 c0       	rjmp	.+4      	; 0x39c <sendCommand+0x1a>
     398:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     39c:	5f 99       	sbic	0x0b, 7	; 11
     39e:	fc cf       	rjmp	.-8      	; 0x398 <sendCommand+0x16>
     3a0:	ce 01       	movw	r24, r28
     3a2:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
     3a6:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     3aa:	83 35       	cpi	r24, 0x53	; 83
     3ac:	91 f7       	brne	.-28     	; 0x392 <sendCommand+0x10>
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <sendCommand+0x32>
     3b0:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     3b4:	5f 99       	sbic	0x0b, 7	; 11
     3b6:	fc cf       	rjmp	.-8      	; 0x3b0 <sendCommand+0x2e>
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <__vector_8>:

ISR(TIMER1_OVF_vect) {
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	cf 92       	push	r12
     3ca:	df 92       	push	r13
     3cc:	ef 92       	push	r14
     3ce:	ff 92       	push	r15
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	4f 93       	push	r20
     3da:	5f 93       	push	r21
     3dc:	6f 93       	push	r22
     3de:	7f 93       	push	r23
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ef 93       	push	r30
     3ee:	ff 93       	push	r31
	cli();
     3f0:	f8 94       	cli
    char c;
    bool failed;
    int counter =0, watering_pot = 0, leds;
	
	PORTB = PORTB^0xFF;
     3f2:	88 b3       	in	r24, 0x18	; 24
     3f4:	80 95       	com	r24
     3f6:	88 bb       	out	0x18, r24	; 24
    if(!first) {
     3f8:	80 91 eb 03 	lds	r24, 0x03EB	; 0x8003eb <first>
     3fc:	81 11       	cpse	r24, r1
     3fe:	7a c2       	rjmp	.+1268   	; 0x8f4 <__stack+0x495>
     400:	ee 24       	eor	r14, r14
     402:	e3 94       	inc	r14
     404:	f1 2c       	mov	r15, r1
     406:	a8 c1       	rjmp	.+848    	; 0x758 <__stack+0x2f9>
        for(int k=1; k<=middle_boards; ++k){
            failed=false;
			counter =0;
			
			//get moisture average
			PORTB = 0x00;
     408:	18 ba       	out	0x18, r1	; 24
			clear_buffer(); //flush potential ServedClient
     40a:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Moist_avg%d\"\n", k);
     40e:	ff 92       	push	r15
     410:	ef 92       	push	r14
     412:	80 e6       	ldi	r24, 0x60	; 96
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	9f 93       	push	r25
     418:	8f 93       	push	r24
     41a:	87 e6       	ldi	r24, 0x67	; 103
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	9f 93       	push	r25
     420:	8f 93       	push	r24
     422:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
			serialWrite(string_to_send);
     426:	87 e6       	ldi	r24, 0x67	; 103
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>

            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     43e:	82 32       	cpi	r24, 0x22	; 34
     440:	e1 f7       	brne	.-8      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
            c=usart_receive(); //read most significant digit
     442:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(c=='F')
     446:	86 34       	cpi	r24, 0x46	; 70
     448:	11 f0       	breq	.+4      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
    int counter =0, watering_pot = 0, leds;
	
	PORTB = PORTB^0xFF;
    if(!first) {
        for(int k=1; k<=middle_boards; ++k){
            failed=false;
     44a:	c0 e0       	ldi	r28, 0x00	; 0
     44c:	01 c0       	rjmp	.+2      	; 0x450 <__DATA_REGION_LENGTH__+0x50>

            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
     44e:	c1 e0       	ldi	r28, 0x01	; 1
    int counter =0, watering_pot = 0, leds;
	
	PORTB = PORTB^0xFF;
    if(!first) {
        for(int k=1; k<=middle_boards; ++k){
            failed=false;
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	0b c0       	rjmp	.+22     	; 0x46c <__stack+0xd>
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     456:	68 01       	movw	r12, r16
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	c2 1a       	sub	r12, r18
     45c:	d2 0a       	sbc	r13, r18
     45e:	f8 01       	movw	r30, r16
     460:	e4 51       	subi	r30, 0x14	; 20
     462:	fc 4f       	sbci	r31, 0xFC	; 252
     464:	80 83       	st	Z, r24
	            c = usart_receive();
     466:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     46a:	86 01       	movw	r16, r12
            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
     46c:	82 32       	cpi	r24, 0x22	; 34
     46e:	11 f0       	breq	.+4      	; 0x474 <__stack+0x15>
     470:	cc 23       	and	r28, r28
     472:	89 f3       	breq	.-30     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
     474:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(!failed){
     478:	c1 11       	cpse	r28, r1
     47a:	2f c0       	rjmp	.+94     	; 0x4da <__stack+0x7b>
     47c:	25 e0       	ldi	r18, 0x05	; 5
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	0c c0       	rjmp	.+24     	; 0x49a <__stack+0x3b>
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
     482:	f9 01       	movw	r30, r18
     484:	e8 1b       	sub	r30, r24
     486:	f9 0b       	sbc	r31, r25
     488:	e4 51       	subi	r30, 0x14	; 20
     48a:	fc 4f       	sbci	r31, 0xFC	; 252
     48c:	80 81       	ld	r24, Z
     48e:	f9 01       	movw	r30, r18
     490:	e4 51       	subi	r30, 0x14	; 20
     492:	fc 4f       	sbci	r31, 0xFC	; 252
     494:	80 83       	st	Z, r24
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     496:	21 50       	subi	r18, 0x01	; 1
     498:	31 09       	sbc	r19, r1
     49a:	86 e0       	ldi	r24, 0x06	; 6
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	80 1b       	sub	r24, r16
     4a0:	91 0b       	sbc	r25, r17
     4a2:	28 17       	cp	r18, r24
     4a4:	39 07       	cpc	r19, r25
     4a6:	6c f7       	brge	.-38     	; 0x482 <__stack+0x23>
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <__stack+0x5d>
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
		            conv_buffer[i] = '0';
     4ae:	f9 01       	movw	r30, r18
     4b0:	e4 51       	subi	r30, 0x14	; 20
     4b2:	fc 4f       	sbci	r31, 0xFC	; 252
     4b4:	40 e3       	ldi	r20, 0x30	; 48
     4b6:	40 83       	st	Z, r20
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
     4b8:	2f 5f       	subi	r18, 0xFF	; 255
     4ba:	3f 4f       	sbci	r19, 0xFF	; 255
     4bc:	28 17       	cp	r18, r24
     4be:	39 07       	cpc	r19, r25
     4c0:	b4 f3       	brlt	.-20     	; 0x4ae <__stack+0x4f>
		            conv_buffer[i] = '0';
	            }
	            //print_string(conv_buffer);
	            moist_avgs[k-1]=atoi(conv_buffer);
     4c2:	8c ee       	ldi	r24, 0xEC	; 236
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	0e 94 70 09 	call	0x12e0	; 0x12e0 <atoi>
     4ca:	f7 01       	movw	r30, r14
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	ee 0f       	add	r30, r30
     4d0:	ff 1f       	adc	r31, r31
     4d2:	e0 5a       	subi	r30, 0xA0	; 160
     4d4:	fd 4f       	sbci	r31, 0xFD	; 253
     4d6:	91 83       	std	Z+1, r25	; 0x01
     4d8:	80 83       	st	Z, r24
            }
			
			//get temperature average
			clear_buffer(); //flush potential ServedClient
     4da:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Tmp_avg%d\"\n", k);
     4de:	ff 92       	push	r15
     4e0:	ef 92       	push	r14
     4e2:	8c e7       	ldi	r24, 0x7C	; 124
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	87 e6       	ldi	r24, 0x67	; 103
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
			serialWrite(string_to_send);
     4f6:	87 e6       	ldi	r24, 0x67	; 103
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
            
			counter = 0;
			while(usart_receive() != '"' && !failed);
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     50e:	82 32       	cpi	r24, 0x22	; 34
     510:	11 f0       	breq	.+4      	; 0x516 <__stack+0xb7>
     512:	cc 23       	and	r28, r28
     514:	d1 f3       	breq	.-12     	; 0x50a <__stack+0xab>
			c = usart_receive();
     516:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(c=='F')
     51a:	86 34       	cpi	r24, 0x46	; 70
     51c:	09 f4       	brne	.+2      	; 0x520 <__stack+0xc1>
			failed=true;
     51e:	c1 e0       	ldi	r28, 0x01	; 1
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	10 e0       	ldi	r17, 0x00	; 0
     524:	0b c0       	rjmp	.+22     	; 0x53c <__stack+0xdd>
			while(c != '"' && !failed){
				conv_buffer[counter++]=c;
     526:	68 01       	movw	r12, r16
     528:	3f ef       	ldi	r19, 0xFF	; 255
     52a:	c3 1a       	sub	r12, r19
     52c:	d3 0a       	sbc	r13, r19
     52e:	f8 01       	movw	r30, r16
     530:	e4 51       	subi	r30, 0x14	; 20
     532:	fc 4f       	sbci	r31, 0xFC	; 252
     534:	80 83       	st	Z, r24
				c = usart_receive();
     536:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			while(usart_receive() != '"' && !failed);
			c = usart_receive();
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){
				conv_buffer[counter++]=c;
     53a:	86 01       	movw	r16, r12
			counter = 0;
			while(usart_receive() != '"' && !failed);
			c = usart_receive();
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){
     53c:	82 32       	cpi	r24, 0x22	; 34
     53e:	11 f0       	breq	.+4      	; 0x544 <__stack+0xe5>
     540:	cc 23       	and	r28, r28
     542:	89 f3       	breq	.-30     	; 0x526 <__stack+0xc7>
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
     544:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(!failed){
     548:	c1 11       	cpse	r28, r1
     54a:	33 c0       	rjmp	.+102    	; 0x5b2 <__stack+0x153>
     54c:	25 e0       	ldi	r18, 0x05	; 5
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	0c c0       	rjmp	.+24     	; 0x56a <__stack+0x10b>
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
     552:	f9 01       	movw	r30, r18
     554:	e8 1b       	sub	r30, r24
     556:	f9 0b       	sbc	r31, r25
     558:	e4 51       	subi	r30, 0x14	; 20
     55a:	fc 4f       	sbci	r31, 0xFC	; 252
     55c:	80 81       	ld	r24, Z
     55e:	f9 01       	movw	r30, r18
     560:	e4 51       	subi	r30, 0x14	; 20
     562:	fc 4f       	sbci	r31, 0xFC	; 252
     564:	80 83       	st	Z, r24
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     566:	21 50       	subi	r18, 0x01	; 1
     568:	31 09       	sbc	r19, r1
     56a:	86 e0       	ldi	r24, 0x06	; 6
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	80 1b       	sub	r24, r16
     570:	91 0b       	sbc	r25, r17
     572:	28 17       	cp	r18, r24
     574:	39 07       	cpc	r19, r25
     576:	6c f7       	brge	.-38     	; 0x552 <__stack+0xf3>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	07 c0       	rjmp	.+14     	; 0x58c <__stack+0x12d>
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
					conv_buffer[i] = '0';
     57e:	f9 01       	movw	r30, r18
     580:	e4 51       	subi	r30, 0x14	; 20
     582:	fc 4f       	sbci	r31, 0xFC	; 252
     584:	40 e3       	ldi	r20, 0x30	; 48
     586:	40 83       	st	Z, r20
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	28 17       	cp	r18, r24
     58e:	39 07       	cpc	r19, r25
     590:	b4 f3       	brlt	.-20     	; 0x57e <__stack+0x11f>
					conv_buffer[i] = '0';
				}
				tmp_avgs[k-1]=atof(conv_buffer);
     592:	8c ee       	ldi	r24, 0xEC	; 236
     594:	93 e0       	ldi	r25, 0x03	; 3
     596:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <atof>
     59a:	f7 01       	movw	r30, r14
     59c:	31 97       	sbiw	r30, 0x01	; 1
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	e9 59       	subi	r30, 0x99	; 153
     5a8:	fc 4f       	sbci	r31, 0xFC	; 252
     5aa:	60 83       	st	Z, r22
     5ac:	71 83       	std	Z+1, r23	; 0x01
     5ae:	82 83       	std	Z+2, r24	; 0x02
     5b0:	93 83       	std	Z+3, r25	; 0x03
			}
		
		
			//get moisture variance
			clear_buffer(); //flush potential ServedClient
     5b2:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Moist_var%d\"\n", k);
     5b6:	ff 92       	push	r15
     5b8:	ef 92       	push	r14
     5ba:	86 e9       	ldi	r24, 0x96	; 150
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	87 e6       	ldi	r24, 0x67	; 103
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
			serialWrite(string_to_send);
     5ce:	87 e6       	ldi	r24, 0x67	; 103
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
            
            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     5e6:	82 32       	cpi	r24, 0x22	; 34
     5e8:	11 f0       	breq	.+4      	; 0x5ee <__stack+0x18f>
     5ea:	cc 23       	and	r28, r28
     5ec:	d1 f3       	breq	.-12     	; 0x5e2 <__stack+0x183>
            c=usart_receive(); //read most significant digit
     5ee:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(c=='F')
     5f2:	86 34       	cpi	r24, 0x46	; 70
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <__stack+0x199>
            failed=true;
     5f6:	c1 e0       	ldi	r28, 0x01	; 1
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	10 e0       	ldi	r17, 0x00	; 0
     5fc:	0b c0       	rjmp	.+22     	; 0x614 <__stack+0x1b5>
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     5fe:	68 01       	movw	r12, r16
     600:	9f ef       	ldi	r25, 0xFF	; 255
     602:	c9 1a       	sub	r12, r25
     604:	d9 0a       	sbc	r13, r25
     606:	f8 01       	movw	r30, r16
     608:	e4 51       	subi	r30, 0x14	; 20
     60a:	fc 4f       	sbci	r31, 0xFC	; 252
     60c:	80 83       	st	Z, r24
	            c = usart_receive();
     60e:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
	            conv_buffer[counter++]=c;
     612:	86 01       	movw	r16, r12
            counter=0;
            while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
            c=usart_receive(); //read most significant digit
            if(c=='F')
            failed=true;
            while(c != '"' && !failed){ // read the whole number (until " is read)
     614:	82 32       	cpi	r24, 0x22	; 34
     616:	11 f0       	breq	.+4      	; 0x61c <__stack+0x1bd>
     618:	cc 23       	and	r28, r28
     61a:	89 f3       	breq	.-30     	; 0x5fe <__stack+0x19f>
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
     61c:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
            if(!failed){
     620:	c1 11       	cpse	r28, r1
     622:	2f c0       	rjmp	.+94     	; 0x682 <__stack+0x223>
     624:	25 e0       	ldi	r18, 0x05	; 5
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	0c c0       	rjmp	.+24     	; 0x642 <__stack+0x1e3>
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
     62a:	f9 01       	movw	r30, r18
     62c:	e8 1b       	sub	r30, r24
     62e:	f9 0b       	sbc	r31, r25
     630:	e4 51       	subi	r30, 0x14	; 20
     632:	fc 4f       	sbci	r31, 0xFC	; 252
     634:	80 81       	ld	r24, Z
     636:	f9 01       	movw	r30, r18
     638:	e4 51       	subi	r30, 0x14	; 20
     63a:	fc 4f       	sbci	r31, 0xFC	; 252
     63c:	80 83       	st	Z, r24
	            conv_buffer[counter++]=c;
	            c = usart_receive();
            }
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     63e:	21 50       	subi	r18, 0x01	; 1
     640:	31 09       	sbc	r19, r1
     642:	86 e0       	ldi	r24, 0x06	; 6
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	80 1b       	sub	r24, r16
     648:	91 0b       	sbc	r25, r17
     64a:	28 17       	cp	r18, r24
     64c:	39 07       	cpc	r19, r25
     64e:	6c f7       	brge	.-38     	; 0x62a <__stack+0x1cb>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	07 c0       	rjmp	.+14     	; 0x664 <__stack+0x205>
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
		            conv_buffer[i] = '0';
     656:	f9 01       	movw	r30, r18
     658:	e4 51       	subi	r30, 0x14	; 20
     65a:	fc 4f       	sbci	r31, 0xFC	; 252
     65c:	40 e3       	ldi	r20, 0x30	; 48
     65e:	40 83       	st	Z, r20
            c = usart_receive(); // also flush '\n' out of read buffer
            if(!failed){
	            for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
		            conv_buffer[i] = conv_buffer[i - (6-counter)];
	            }
	            for(int i=0; i<(6-counter); i++){
     660:	2f 5f       	subi	r18, 0xFF	; 255
     662:	3f 4f       	sbci	r19, 0xFF	; 255
     664:	28 17       	cp	r18, r24
     666:	39 07       	cpc	r19, r25
     668:	b4 f3       	brlt	.-20     	; 0x656 <__stack+0x1f7>
		            conv_buffer[i] = '0';
	            }
	            //print_string(conv_buffer);
	            moist_vars[k-1]=atoi(conv_buffer);
     66a:	8c ee       	ldi	r24, 0xEC	; 236
     66c:	93 e0       	ldi	r25, 0x03	; 3
     66e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <atoi>
     672:	f7 01       	movw	r30, r14
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	ec 59       	subi	r30, 0x9C	; 156
     67c:	fd 4f       	sbci	r31, 0xFD	; 253
     67e:	91 83       	std	Z+1, r25	; 0x01
     680:	80 83       	st	Z, r24
            }
			
			
			//get temperature variance
			clear_buffer(); //flush potential ServedClient
     682:	0e 94 9a 01 	call	0x334	; 0x334 <clear_buffer>
			sprintf(string_to_send, "ESP:getValue:\"Tmp_var%d\"\n", k);
     686:	ff 92       	push	r15
     688:	ef 92       	push	r14
     68a:	82 eb       	ldi	r24, 0xB2	; 178
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	87 e6       	ldi	r24, 0x67	; 103
     694:	92 e0       	ldi	r25, 0x02	; 2
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
			serialWrite(string_to_send);
     69e:	87 e6       	ldi	r24, 0x67	; 103
     6a0:	92 e0       	ldi	r25, 0x02	; 2
     6a2:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
            
			counter=0;
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
     6b6:	82 32       	cpi	r24, 0x22	; 34
     6b8:	11 f0       	breq	.+4      	; 0x6be <__stack+0x25f>
     6ba:	cc 23       	and	r28, r28
     6bc:	d1 f3       	breq	.-12     	; 0x6b2 <__stack+0x253>
			c=usart_receive(); //read most significant digit
     6be:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(c=='F')
     6c2:	86 34       	cpi	r24, 0x46	; 70
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <__stack+0x269>
			failed=true;
     6c6:	c1 e0       	ldi	r28, 0x01	; 1
     6c8:	00 e0       	ldi	r16, 0x00	; 0
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	0b c0       	rjmp	.+22     	; 0x6e4 <__stack+0x285>
			while(c != '"' && !failed){ // read the whole number (until " is read)
				conv_buffer[counter++]=c;
     6ce:	68 01       	movw	r12, r16
     6d0:	2f ef       	ldi	r18, 0xFF	; 255
     6d2:	c2 1a       	sub	r12, r18
     6d4:	d2 0a       	sbc	r13, r18
     6d6:	f8 01       	movw	r30, r16
     6d8:	e4 51       	subi	r30, 0x14	; 20
     6da:	fc 4f       	sbci	r31, 0xFC	; 252
     6dc:	80 83       	st	Z, r24
				c = usart_receive();
     6de:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){ // read the whole number (until " is read)
				conv_buffer[counter++]=c;
     6e2:	86 01       	movw	r16, r12
			counter=0;
			while(usart_receive() != '"' && !failed); //scan input till you find ". The number will follow
			c=usart_receive(); //read most significant digit
			if(c=='F')
			failed=true;
			while(c != '"' && !failed){ // read the whole number (until " is read)
     6e4:	82 32       	cpi	r24, 0x22	; 34
     6e6:	11 f0       	breq	.+4      	; 0x6ec <__stack+0x28d>
     6e8:	cc 23       	and	r28, r28
     6ea:	89 f3       	breq	.-30     	; 0x6ce <__stack+0x26f>
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
     6ec:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
			if(!failed){
     6f0:	c1 11       	cpse	r28, r1
     6f2:	2f c0       	rjmp	.+94     	; 0x752 <__stack+0x2f3>
     6f4:	25 e0       	ldi	r18, 0x05	; 5
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	0c c0       	rjmp	.+24     	; 0x712 <__stack+0x2b3>
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
     6fa:	f9 01       	movw	r30, r18
     6fc:	e8 1b       	sub	r30, r24
     6fe:	f9 0b       	sbc	r31, r25
     700:	e4 51       	subi	r30, 0x14	; 20
     702:	fc 4f       	sbci	r31, 0xFC	; 252
     704:	80 81       	ld	r24, Z
     706:	f9 01       	movw	r30, r18
     708:	e4 51       	subi	r30, 0x14	; 20
     70a:	fc 4f       	sbci	r31, 0xFC	; 252
     70c:	80 83       	st	Z, r24
				conv_buffer[counter++]=c;
				c = usart_receive();
			}
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
     70e:	21 50       	subi	r18, 0x01	; 1
     710:	31 09       	sbc	r19, r1
     712:	86 e0       	ldi	r24, 0x06	; 6
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	80 1b       	sub	r24, r16
     718:	91 0b       	sbc	r25, r17
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	6c f7       	brge	.-38     	; 0x6fa <__stack+0x29b>
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	07 c0       	rjmp	.+14     	; 0x734 <__stack+0x2d5>
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
					conv_buffer[i] = '0';
     726:	f9 01       	movw	r30, r18
     728:	e4 51       	subi	r30, 0x14	; 20
     72a:	fc 4f       	sbci	r31, 0xFC	; 252
     72c:	40 e3       	ldi	r20, 0x30	; 48
     72e:	40 83       	st	Z, r20
			c = usart_receive(); // also flush '\n' out of read buffer
			if(!failed){
				for(int i=5; i>=6-counter; i--){ // place number at the end of the buffer and fill the start of it with 0s so that it can be converted to an int
					conv_buffer[i] = conv_buffer[i - (6-counter)];
				}
				for(int i=0; i<(6-counter); i++){
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	28 17       	cp	r18, r24
     736:	39 07       	cpc	r19, r25
     738:	b4 f3       	brlt	.-20     	; 0x726 <__stack+0x2c7>
					conv_buffer[i] = '0';
				}
				tmp_vars[k-1]=atoi(conv_buffer);
     73a:	8c ee       	ldi	r24, 0xEC	; 236
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <atoi>
     742:	f7 01       	movw	r30, r14
     744:	31 97       	sbiw	r30, 0x01	; 1
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	ee 59       	subi	r30, 0x9E	; 158
     74c:	fd 4f       	sbci	r31, 0xFD	; 253
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	80 83       	st	Z, r24
    bool failed;
    int counter =0, watering_pot = 0, leds;
	
	PORTB = PORTB^0xFF;
    if(!first) {
        for(int k=1; k<=middle_boards; ++k){
     752:	3f ef       	ldi	r19, 0xFF	; 255
     754:	e3 1a       	sub	r14, r19
     756:	f3 0a       	sbc	r15, r19
     758:	82 e0       	ldi	r24, 0x02	; 2
     75a:	e8 16       	cp	r14, r24
     75c:	f1 04       	cpc	r15, r1
     75e:	0c f4       	brge	.+2      	; 0x762 <__stack+0x303>
     760:	53 ce       	rjmp	.-858    	; 0x408 <__DATA_REGION_LENGTH__+0x8>
					conv_buffer[i] = '0';
				}
				tmp_vars[k-1]=atoi(conv_buffer);
			}
        }
        if(!failed) {
     762:	c1 11       	cpse	r28, r1
     764:	c9 c0       	rjmp	.+402    	; 0x8f8 <__stack+0x499>
            lcd_clear();
     766:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_clear>
            leds = 1;
            watering_pot=0;
            for(int k=1; k<=middle_boards; ++k){//fix temperature!!!!!!
     76a:	c1 e0       	ldi	r28, 0x01	; 1
     76c:	d0 e0       	ldi	r29, 0x00	; 0
				tmp_vars[k-1]=atoi(conv_buffer);
			}
        }
        if(!failed) {
            lcd_clear();
            leds = 1;
     76e:	ee 24       	eor	r14, r14
     770:	e3 94       	inc	r14
     772:	f1 2c       	mov	r15, r1
            watering_pot=0;
     774:	c1 2c       	mov	r12, r1
     776:	d1 2c       	mov	r13, r1
            for(int k=1; k<=middle_boards; ++k){//fix temperature!!!!!!
     778:	b7 c0       	rjmp	.+366    	; 0x8e8 <__stack+0x489>
                sprintf(string_to_print, "T%d: %.1f ", k, tmp_avgs[k-1]);
     77a:	8e 01       	movw	r16, r28
     77c:	01 50       	subi	r16, 0x01	; 1
     77e:	11 09       	sbc	r17, r1
     780:	f8 01       	movw	r30, r16
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	e9 59       	subi	r30, 0x99	; 153
     78c:	fc 4f       	sbci	r31, 0xFC	; 252
     78e:	80 81       	ld	r24, Z
     790:	91 81       	ldd	r25, Z+1	; 0x01
     792:	22 81       	ldd	r18, Z+2	; 0x02
     794:	33 81       	ldd	r19, Z+3	; 0x03
     796:	3f 93       	push	r19
     798:	2f 93       	push	r18
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	df 93       	push	r29
     7a0:	cf 93       	push	r28
     7a2:	8c ec       	ldi	r24, 0xCC	; 204
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	8b e6       	ldi	r24, 0x6B	; 107
     7ac:	93 e0       	ldi	r25, 0x03	; 3
     7ae:	9f 93       	push	r25
     7b0:	8f 93       	push	r24
     7b2:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
                print_string(string_to_print);
     7b6:	8b e6       	ldi	r24, 0x6B	; 107
     7b8:	93 e0       	ldi	r25, 0x03	; 3
     7ba:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>

                if(moist_avgs[k-1]>=640){
     7be:	f8 01       	movw	r30, r16
     7c0:	ee 0f       	add	r30, r30
     7c2:	ff 1f       	adc	r31, r31
     7c4:	e0 5a       	subi	r30, 0xA0	; 160
     7c6:	fd 4f       	sbci	r31, 0xFD	; 253
     7c8:	80 81       	ld	r24, Z
     7ca:	91 81       	ldd	r25, Z+1	; 0x01
     7cc:	2d b7       	in	r18, 0x3d	; 61
     7ce:	3e b7       	in	r19, 0x3e	; 62
     7d0:	26 5f       	subi	r18, 0xF6	; 246
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	3e bf       	out	0x3e, r19	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	2d bf       	out	0x3d, r18	; 61
     7de:	80 38       	cpi	r24, 0x80	; 128
     7e0:	32 e0       	ldi	r19, 0x02	; 2
     7e2:	93 07       	cpc	r25, r19
     7e4:	7c f0       	brlt	.+30     	; 0x804 <__stack+0x3a5>
                    strcpy(string_to_print, "VDRY");
     7e6:	85 e0       	ldi	r24, 0x05	; 5
     7e8:	e7 ed       	ldi	r30, 0xD7	; 215
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ab e6       	ldi	r26, 0x6B	; 107
     7ee:	b3 e0       	ldi	r27, 0x03	; 3
     7f0:	01 90       	ld	r0, Z+
     7f2:	0d 92       	st	X+, r0
     7f4:	8a 95       	dec	r24
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <__stack+0x391>
                    dry[k-1]=1;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	f8 01       	movw	r30, r16
     7fc:	ea 59       	subi	r30, 0x9A	; 154
     7fe:	fd 4f       	sbci	r31, 0xFD	; 253
     800:	80 83       	st	Z, r24
     802:	33 c0       	rjmp	.+102    	; 0x86a <__stack+0x40b>
                }
                else if(moist_avgs[k-1]>=410){
     804:	8a 39       	cpi	r24, 0x9A	; 154
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	92 07       	cpc	r25, r18
     80a:	84 f0       	brlt	.+32     	; 0x82c <__stack+0x3cd>
                    dry[k-1]=1;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	f8 01       	movw	r30, r16
     810:	ea 59       	subi	r30, 0x9A	; 154
     812:	fd 4f       	sbci	r31, 0xFD	; 253
     814:	80 83       	st	Z, r24
                    strcpy(string_to_print, "DRY");
     816:	eb e6       	ldi	r30, 0x6B	; 107
     818:	f3 e0       	ldi	r31, 0x03	; 3
     81a:	84 e4       	ldi	r24, 0x44	; 68
     81c:	92 e5       	ldi	r25, 0x52	; 82
     81e:	91 83       	std	Z+1, r25	; 0x01
     820:	80 83       	st	Z, r24
     822:	89 e5       	ldi	r24, 0x59	; 89
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	93 83       	std	Z+3, r25	; 0x03
     828:	82 83       	std	Z+2, r24	; 0x02
     82a:	1f c0       	rjmp	.+62     	; 0x86a <__stack+0x40b>
                }
                else if(moist_avgs[k-1]>=200) {
     82c:	88 3c       	cpi	r24, 0xC8	; 200
     82e:	91 05       	cpc	r25, r1
     830:	7c f0       	brlt	.+30     	; 0x850 <__stack+0x3f1>
                    dry[k-1]=0;
     832:	f8 01       	movw	r30, r16
     834:	ea 59       	subi	r30, 0x9A	; 154
     836:	fd 4f       	sbci	r31, 0xFD	; 253
     838:	10 82       	st	Z, r1
                    strcpy(string_to_print, "HUM");
     83a:	eb e6       	ldi	r30, 0x6B	; 107
     83c:	f3 e0       	ldi	r31, 0x03	; 3
     83e:	88 e4       	ldi	r24, 0x48	; 72
     840:	95 e5       	ldi	r25, 0x55	; 85
     842:	91 83       	std	Z+1, r25	; 0x01
     844:	80 83       	st	Z, r24
     846:	8d e4       	ldi	r24, 0x4D	; 77
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	93 83       	std	Z+3, r25	; 0x03
     84c:	82 83       	std	Z+2, r24	; 0x02
     84e:	0d c0       	rjmp	.+26     	; 0x86a <__stack+0x40b>
                }
                else{
                    dry[k-1]=0;
     850:	f8 01       	movw	r30, r16
     852:	ea 59       	subi	r30, 0x9A	; 154
     854:	fd 4f       	sbci	r31, 0xFD	; 253
     856:	10 82       	st	Z, r1
                    strcpy(string_to_print, "VHUM");
     858:	85 e0       	ldi	r24, 0x05	; 5
     85a:	ec ed       	ldi	r30, 0xDC	; 220
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	ab e6       	ldi	r26, 0x6B	; 107
     860:	b3 e0       	ldi	r27, 0x03	; 3
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	8a 95       	dec	r24
     868:	e1 f7       	brne	.-8      	; 0x862 <__stack+0x403>
                }

                print_string(string_to_print);
     86a:	8b e6       	ldi	r24, 0x6B	; 107
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>
				print('\n'); //change line wont work on actual LCD
     872:	8a e0       	ldi	r24, 0x0A	; 10
     874:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <print>
				
				if(tmp_vars[k-1]>=15) {
     878:	f8 01       	movw	r30, r16
     87a:	ee 0f       	add	r30, r30
     87c:	ff 1f       	adc	r31, r31
     87e:	ee 59       	subi	r30, 0x9E	; 158
     880:	fd 4f       	sbci	r31, 0xFD	; 253
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	0f 97       	sbiw	r24, 0x0f	; 15
     888:	6c f0       	brlt	.+26     	; 0x8a4 <__stack+0x445>
					strcpy(string_to_print, "TMP VAR! ");
     88a:	8a e0       	ldi	r24, 0x0A	; 10
     88c:	e1 ee       	ldi	r30, 0xE1	; 225
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	ab e6       	ldi	r26, 0x6B	; 107
     892:	b3 e0       	ldi	r27, 0x03	; 3
     894:	01 90       	ld	r0, Z+
     896:	0d 92       	st	X+, r0
     898:	8a 95       	dec	r24
     89a:	e1 f7       	brne	.-8      	; 0x894 <__stack+0x435>
					print_string(string_to_print);
     89c:	8b e6       	ldi	r24, 0x6B	; 107
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>
				}
				if(moist_vars[k-1]>=80) {
     8a4:	f8 01       	movw	r30, r16
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	ec 59       	subi	r30, 0x9C	; 156
     8ac:	fd 4f       	sbci	r31, 0xFD	; 253
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	80 35       	cpi	r24, 0x50	; 80
     8b4:	91 05       	cpc	r25, r1
     8b6:	6c f0       	brlt	.+26     	; 0x8d2 <__stack+0x473>
					strcpy(string_to_print, "MST VAR!");
     8b8:	89 e0       	ldi	r24, 0x09	; 9
     8ba:	eb ee       	ldi	r30, 0xEB	; 235
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	ab e6       	ldi	r26, 0x6B	; 107
     8c0:	b3 e0       	ldi	r27, 0x03	; 3
     8c2:	01 90       	ld	r0, Z+
     8c4:	0d 92       	st	X+, r0
     8c6:	8a 95       	dec	r24
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <__stack+0x463>
					print_string(string_to_print);
     8ca:	8b e6       	ldi	r24, 0x6B	; 107
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 6d 01 	call	0x2da	; 0x2da <print_string>
				}
                
                if(dry[k-1])
     8d2:	f8 01       	movw	r30, r16
     8d4:	ea 59       	subi	r30, 0x9A	; 154
     8d6:	fd 4f       	sbci	r31, 0xFD	; 253
     8d8:	80 81       	ld	r24, Z
     8da:	88 23       	and	r24, r24
     8dc:	11 f0       	breq	.+4      	; 0x8e2 <__stack+0x483>
                    watering_pot = watering_pot | leds;
     8de:	ce 28       	or	r12, r14
     8e0:	df 28       	or	r13, r15
                leds = leds << 1;
     8e2:	ee 0c       	add	r14, r14
     8e4:	ff 1c       	adc	r15, r15
        }
        if(!failed) {
            lcd_clear();
            leds = 1;
            watering_pot=0;
            for(int k=1; k<=middle_boards; ++k){//fix temperature!!!!!!
     8e6:	21 96       	adiw	r28, 0x01	; 1
     8e8:	c2 30       	cpi	r28, 0x02	; 2
     8ea:	d1 05       	cpc	r29, r1
     8ec:	0c f4       	brge	.+2      	; 0x8f0 <__stack+0x491>
     8ee:	45 cf       	rjmp	.-374    	; 0x77a <__stack+0x31b>
                
                if(dry[k-1])
                    watering_pot = watering_pot | leds;
                leds = leds << 1;
            }
            PORTB = watering_pot;
     8f0:	c8 ba       	out	0x18, r12	; 24
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x499>
        }
    }
    else
        first=false;
     8f4:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <first>
	sei();
     8f8:	78 94       	sei
    TCNT1 = 3036;
     8fa:	8c ed       	ldi	r24, 0xDC	; 220
     8fc:	9b e0       	ldi	r25, 0x0B	; 11
     8fe:	9d bd       	out	0x2d, r25	; 45
     900:	8c bd       	out	0x2c, r24	; 44
}
     902:	ff 91       	pop	r31
     904:	ef 91       	pop	r30
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	bf 91       	pop	r27
     90c:	af 91       	pop	r26
     90e:	9f 91       	pop	r25
     910:	8f 91       	pop	r24
     912:	7f 91       	pop	r23
     914:	6f 91       	pop	r22
     916:	5f 91       	pop	r21
     918:	4f 91       	pop	r20
     91a:	3f 91       	pop	r19
     91c:	2f 91       	pop	r18
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <main>:


int main() {
	first = true;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	80 93 eb 03 	sts	0x03EB, r24	; 0x8003eb <first>
	DDRB = 0xFF;
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
     93e:	81 bb       	out	0x11, r24	; 17
	
	lcd_init_sim();
     940:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init_sim>
	usart_init(MYUBRR);
     944:	83 e3       	ldi	r24, 0x33	; 51
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 8a 01 	call	0x314	; 0x314 <usart_init>
	lcd_clear();
     94c:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_clear>
	
    for(int i=0; i<middle_boards; ++i) { //initialize_values
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	1e c0       	rjmp	.+60     	; 0x992 <main+0x5e>
        moist_avgs[i]=0;
     956:	9c 01       	movw	r18, r24
     958:	22 0f       	add	r18, r18
     95a:	33 1f       	adc	r19, r19
     95c:	f9 01       	movw	r30, r18
     95e:	e0 5a       	subi	r30, 0xA0	; 160
     960:	fd 4f       	sbci	r31, 0xFD	; 253
     962:	11 82       	std	Z+1, r1	; 0x01
     964:	10 82       	st	Z, r1
        tmp_avgs[i]=0.0;
     966:	fc 01       	movw	r30, r24
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	e9 59       	subi	r30, 0x99	; 153
     972:	fc 4f       	sbci	r31, 0xFC	; 252
     974:	10 82       	st	Z, r1
     976:	11 82       	std	Z+1, r1	; 0x01
     978:	12 82       	std	Z+2, r1	; 0x02
     97a:	13 82       	std	Z+3, r1	; 0x03
        moist_vars[i]=0;
     97c:	f9 01       	movw	r30, r18
     97e:	ec 59       	subi	r30, 0x9C	; 156
     980:	fd 4f       	sbci	r31, 0xFD	; 253
     982:	11 82       	std	Z+1, r1	; 0x01
     984:	10 82       	st	Z, r1
        tmp_vars[i]=0;
     986:	f9 01       	movw	r30, r18
     988:	ee 59       	subi	r30, 0x9E	; 158
     98a:	fd 4f       	sbci	r31, 0xFD	; 253
     98c:	11 82       	std	Z+1, r1	; 0x01
     98e:	10 82       	st	Z, r1
	
	lcd_init_sim();
	usart_init(MYUBRR);
	lcd_clear();
	
    for(int i=0; i<middle_boards; ++i) { //initialize_values
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	18 16       	cp	r1, r24
     994:	19 06       	cpc	r1, r25
     996:	fc f6       	brge	.-66     	; 0x956 <main+0x22>
        tmp_avgs[i]=0.0;
        moist_vars[i]=0;
        tmp_vars[i]=0;
    }

    usart_transmit('\n'); //to flush serial
     998:	8a e0       	ldi	r24, 0x0A	; 10
     99a:	0e 94 92 01 	call	0x324	; 0x324 <usart_transmit>
    
    strcpy(string_to_send, "ESP:restart\n");
     99e:	8d e0       	ldi	r24, 0x0D	; 13
     9a0:	e4 ef       	ldi	r30, 0xF4	; 244
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	a7 e6       	ldi	r26, 0x67	; 103
     9a6:	b2 e0       	ldi	r27, 0x02	; 2
     9a8:	01 90       	ld	r0, Z+
     9aa:	0d 92       	st	X+, r0
     9ac:	8a 95       	dec	r24
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <main+0x74>
    serialWrite(string_to_send);
     9b0:	87 e6       	ldi	r24, 0x67	; 103
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 a4 01 	call	0x348	; 0x348 <serialWrite>
    
    usart_receive(); //wait until restart is complete
     9b8:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
    while(UCSRA&(1<<RXC)) //flush read buffer
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <main+0x8e>
		usart_receive();
     9be:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
    
    strcpy(string_to_send, "ESP:restart\n");
    serialWrite(string_to_send);
    
    usart_receive(); //wait until restart is complete
    while(UCSRA&(1<<RXC)) //flush read buffer
     9c2:	5f 99       	sbic	0x0b, 7	; 11
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <main+0x8a>
		usart_receive();
    
    wait_msec(4000);
     9c6:	80 ea       	ldi	r24, 0xA0	; 160
     9c8:	9f e0       	ldi	r25, 0x0F	; 15
     9ca:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <wait_msec>
	
	while(UCSRA&(1<<RXC)) //flush read buffer
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <main+0xa0>
	usart_receive();
     9d0:	0e 94 96 01 	call	0x32c	; 0x32c <usart_receive>
    while(UCSRA&(1<<RXC)) //flush read buffer
		usart_receive();
    
    wait_msec(4000);
	
	while(UCSRA&(1<<RXC)) //flush read buffer
     9d4:	5f 99       	sbic	0x0b, 7	; 11
     9d6:	fc cf       	rjmp	.-8      	; 0x9d0 <main+0x9c>
	usart_receive();
	
	strcpy(string_to_send, "ESP:ssid:\"Main_Board\"\n");
     9d8:	87 e1       	ldi	r24, 0x17	; 23
     9da:	e1 e0       	ldi	r30, 0x01	; 1
     9dc:	f1 e0       	ldi	r31, 0x01	; 1
     9de:	a7 e6       	ldi	r26, 0x67	; 103
     9e0:	b2 e0       	ldi	r27, 0x02	; 2
     9e2:	01 90       	ld	r0, Z+
     9e4:	0d 92       	st	X+, r0
     9e6:	8a 95       	dec	r24
     9e8:	e1 f7       	brne	.-8      	; 0x9e2 <main+0xae>
	sendCommand(string_to_send);
     9ea:	87 e6       	ldi	r24, 0x67	; 103
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
	
	strcpy(string_to_send, "ESP:addSensor: \"Moist_Sensor\"\n");
     9f2:	8f e1       	ldi	r24, 0x1F	; 31
     9f4:	e8 e1       	ldi	r30, 0x18	; 24
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	a7 e6       	ldi	r26, 0x67	; 103
     9fa:	b2 e0       	ldi	r27, 0x02	; 2
     9fc:	01 90       	ld	r0, Z+
     9fe:	0d 92       	st	X+, r0
     a00:	8a 95       	dec	r24
     a02:	e1 f7       	brne	.-8      	; 0x9fc <main+0xc8>
	sendCommand(string_to_send);
     a04:	87 e6       	ldi	r24, 0x67	; 103
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

	strcpy(string_to_send, "ESP:addSensor: \"Tmp_Sensor\"\n");
     a0c:	8d e1       	ldi	r24, 0x1D	; 29
     a0e:	e7 e3       	ldi	r30, 0x37	; 55
     a10:	f1 e0       	ldi	r31, 0x01	; 1
     a12:	a7 e6       	ldi	r26, 0x67	; 103
     a14:	b2 e0       	ldi	r27, 0x02	; 2
     a16:	01 90       	ld	r0, Z+
     a18:	0d 92       	st	X+, r0
     a1a:	8a 95       	dec	r24
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <main+0xe2>
	sendCommand(string_to_send);
     a1e:	87 e6       	ldi	r24, 0x67	; 103
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
	
	for(int i=1; i<=middle_boards; ++i) {
     a26:	c1 e0       	ldi	r28, 0x01	; 1
     a28:	d0 e0       	ldi	r29, 0x00	; 0
     a2a:	85 c0       	rjmp	.+266    	; 0xb36 <main+0x202>

		sprintf(string_to_send, "ESP:addSensor: \"Moist_avg%d\"\n", i);
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	84 e5       	ldi	r24, 0x54	; 84
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	9f 93       	push	r25
     a36:	8f 93       	push	r24
     a38:	07 e6       	ldi	r16, 0x67	; 103
     a3a:	12 e0       	ldi	r17, 0x02	; 2
     a3c:	1f 93       	push	r17
     a3e:	0f 93       	push	r16
     a40:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send);
     a44:	c8 01       	movw	r24, r16
     a46:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:addSensor: \"Tmp_avg%d\"\n", i);
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	82 e7       	ldi	r24, 0x72	; 114
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	1f 93       	push	r17
     a58:	0f 93       	push	r16
     a5a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send);
     a5e:	c8 01       	movw	r24, r16
     a60:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:addSensor: \"Moist_var%d\"\n", i);
     a64:	df 93       	push	r29
     a66:	cf 93       	push	r28
     a68:	8e e8       	ldi	r24, 0x8E	; 142
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	1f 93       	push	r17
     a72:	0f 93       	push	r16
     a74:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send);
     a78:	c8 01       	movw	r24, r16
     a7a:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:addSensor: \"Tmp_var%d\"\n", i);
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	8c ea       	ldi	r24, 0xAC	; 172
     a84:	91 e0       	ldi	r25, 0x01	; 1
     a86:	9f 93       	push	r25
     a88:	8f 93       	push	r24
     a8a:	1f 93       	push	r17
     a8c:	0f 93       	push	r16
     a8e:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send);
     a92:	c8 01       	movw	r24, r16
     a94:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
		
		sprintf(string_to_send, "ESP:sensorValue:\"Moist_avg%d\"[%d]\n", i, 0);
     a98:	1f 92       	push	r1
     a9a:	1f 92       	push	r1
     a9c:	df 93       	push	r29
     a9e:	cf 93       	push	r28
     aa0:	88 ec       	ldi	r24, 0xC8	; 200
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	1f 93       	push	r17
     aaa:	0f 93       	push	r16
     aac:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send); //initialize value of sensors to 0
     ab0:	8d b7       	in	r24, 0x3d	; 61
     ab2:	9e b7       	in	r25, 0x3e	; 62
     ab4:	80 96       	adiw	r24, 0x20	; 32
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	9e bf       	out	0x3e, r25	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	8d bf       	out	0x3d, r24	; 61
     ac0:	c8 01       	movw	r24, r16
     ac2:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
		
		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_avg%d\"[%.1f]\n", i, 0.0);
     ac6:	1f 92       	push	r1
     ac8:	1f 92       	push	r1
     aca:	1f 92       	push	r1
     acc:	1f 92       	push	r1
     ace:	df 93       	push	r29
     ad0:	cf 93       	push	r28
     ad2:	8b ee       	ldi	r24, 0xEB	; 235
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	9f 93       	push	r25
     ad8:	8f 93       	push	r24
     ada:	1f 93       	push	r17
     adc:	0f 93       	push	r16
     ade:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send);
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:sensorValue:\"Moist_var%d\"[%d]\n", i, 0);
     ae8:	1f 92       	push	r1
     aea:	1f 92       	push	r1
     aec:	df 93       	push	r29
     aee:	cf 93       	push	r28
     af0:	8e e0       	ldi	r24, 0x0E	; 14
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	9f 93       	push	r25
     af6:	8f 93       	push	r24
     af8:	1f 93       	push	r17
     afa:	0f 93       	push	r16
     afc:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send);
     b00:	c8 01       	movw	r24, r16
     b02:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>

		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_var%d\"[%d]\n", i, 0);
     b06:	1f 92       	push	r1
     b08:	1f 92       	push	r1
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	81 e3       	ldi	r24, 0x31	; 49
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	9f 93       	push	r25
     b14:	8f 93       	push	r24
     b16:	1f 93       	push	r17
     b18:	0f 93       	push	r16
     b1a:	0e 94 c0 0a 	call	0x1580	; 0x1580 <sprintf>
		sendCommand(string_to_send);
     b1e:	c8 01       	movw	r24, r16
     b20:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
	sendCommand(string_to_send);

	strcpy(string_to_send, "ESP:addSensor: \"Tmp_Sensor\"\n");
	sendCommand(string_to_send);
	
	for(int i=1; i<=middle_boards; ++i) {
     b24:	21 96       	adiw	r28, 0x01	; 1
     b26:	8d b7       	in	r24, 0x3d	; 61
     b28:	9e b7       	in	r25, 0x3e	; 62
     b2a:	4a 96       	adiw	r24, 0x1a	; 26
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	9e bf       	out	0x3e, r25	; 62
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	8d bf       	out	0x3d, r24	; 61
     b36:	c2 30       	cpi	r28, 0x02	; 2
     b38:	d1 05       	cpc	r29, r1
     b3a:	0c f4       	brge	.+2      	; 0xb3e <main+0x20a>
     b3c:	77 cf       	rjmp	.-274    	; 0xa2c <main+0xf8>
		sprintf(string_to_send, "ESP:sensorValue:\"Tmp_var%d\"[%d]\n", i, 0);
		sendCommand(string_to_send);
		
	}
	
	strcpy(string_to_send, "ESP:APStart\n");
     b3e:	8d e0       	ldi	r24, 0x0D	; 13
     b40:	e2 e5       	ldi	r30, 0x52	; 82
     b42:	f2 e0       	ldi	r31, 0x02	; 2
     b44:	a7 e6       	ldi	r26, 0x67	; 103
     b46:	b2 e0       	ldi	r27, 0x02	; 2
     b48:	01 90       	ld	r0, Z+
     b4a:	0d 92       	st	X+, r0
     b4c:	8a 95       	dec	r24
     b4e:	e1 f7       	brne	.-8      	; 0xb48 <main+0x214>
	sendCommand(string_to_send);
     b50:	87 e6       	ldi	r24, 0x67	; 103
     b52:	92 e0       	ldi	r25, 0x02	; 2
     b54:	0e 94 c1 01 	call	0x382	; 0x382 <sendCommand>
	
	PORTB = 0xFF;
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	88 bb       	out	0x18, r24	; 24
    TCCR1B = 0x05; //CK/1024
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 3036; //8 seconds
     b60:	8c ed       	ldi	r24, 0xDC	; 220
     b62:	9b e0       	ldi	r25, 0x0B	; 11
     b64:	9d bd       	out	0x2d, r25	; 45
     b66:	8c bd       	out	0x2c, r24	; 44
	TIMSK = 0x04; //enable overflow interrupt for TCNT1
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	89 bf       	out	0x39, r24	; 57
    sei();
     b6c:	78 94       	sei
     b6e:	ff cf       	rjmp	.-2      	; 0xb6e <main+0x23a>

00000b70 <vfprintf>:
     b70:	a0 e1       	ldi	r26, 0x10	; 16
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	ee eb       	ldi	r30, 0xBE	; 190
     b76:	f5 e0       	ldi	r31, 0x05	; 5
     b78:	0c 94 35 09 	jmp	0x126a	; 0x126a <__prologue_saves__>
     b7c:	7c 01       	movw	r14, r24
     b7e:	1b 01       	movw	r2, r22
     b80:	6a 01       	movw	r12, r20
     b82:	fc 01       	movw	r30, r24
     b84:	17 82       	std	Z+7, r1	; 0x07
     b86:	16 82       	std	Z+6, r1	; 0x06
     b88:	83 81       	ldd	r24, Z+3	; 0x03
     b8a:	81 ff       	sbrs	r24, 1
     b8c:	44 c3       	rjmp	.+1672   	; 0x1216 <vfprintf+0x6a6>
     b8e:	9e 01       	movw	r18, r28
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	39 01       	movw	r6, r18
     b96:	f7 01       	movw	r30, r14
     b98:	93 81       	ldd	r25, Z+3	; 0x03
     b9a:	f1 01       	movw	r30, r2
     b9c:	93 fd       	sbrc	r25, 3
     b9e:	85 91       	lpm	r24, Z+
     ba0:	93 ff       	sbrs	r25, 3
     ba2:	81 91       	ld	r24, Z+
     ba4:	1f 01       	movw	r2, r30
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <vfprintf+0x3c>
     baa:	31 c3       	rjmp	.+1634   	; 0x120e <vfprintf+0x69e>
     bac:	85 32       	cpi	r24, 0x25	; 37
     bae:	39 f4       	brne	.+14     	; 0xbbe <vfprintf+0x4e>
     bb0:	93 fd       	sbrc	r25, 3
     bb2:	85 91       	lpm	r24, Z+
     bb4:	93 ff       	sbrs	r25, 3
     bb6:	81 91       	ld	r24, Z+
     bb8:	1f 01       	movw	r2, r30
     bba:	85 32       	cpi	r24, 0x25	; 37
     bbc:	39 f4       	brne	.+14     	; 0xbcc <vfprintf+0x5c>
     bbe:	b7 01       	movw	r22, r14
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     bc6:	56 01       	movw	r10, r12
     bc8:	65 01       	movw	r12, r10
     bca:	e5 cf       	rjmp	.-54     	; 0xb96 <vfprintf+0x26>
     bcc:	10 e0       	ldi	r17, 0x00	; 0
     bce:	51 2c       	mov	r5, r1
     bd0:	91 2c       	mov	r9, r1
     bd2:	ff e1       	ldi	r31, 0x1F	; 31
     bd4:	f9 15       	cp	r31, r9
     bd6:	d8 f0       	brcs	.+54     	; 0xc0e <vfprintf+0x9e>
     bd8:	8b 32       	cpi	r24, 0x2B	; 43
     bda:	79 f0       	breq	.+30     	; 0xbfa <vfprintf+0x8a>
     bdc:	38 f4       	brcc	.+14     	; 0xbec <vfprintf+0x7c>
     bde:	80 32       	cpi	r24, 0x20	; 32
     be0:	79 f0       	breq	.+30     	; 0xc00 <vfprintf+0x90>
     be2:	83 32       	cpi	r24, 0x23	; 35
     be4:	a1 f4       	brne	.+40     	; 0xc0e <vfprintf+0x9e>
     be6:	f9 2d       	mov	r31, r9
     be8:	f0 61       	ori	r31, 0x10	; 16
     bea:	2e c0       	rjmp	.+92     	; 0xc48 <vfprintf+0xd8>
     bec:	8d 32       	cpi	r24, 0x2D	; 45
     bee:	61 f0       	breq	.+24     	; 0xc08 <vfprintf+0x98>
     bf0:	80 33       	cpi	r24, 0x30	; 48
     bf2:	69 f4       	brne	.+26     	; 0xc0e <vfprintf+0x9e>
     bf4:	29 2d       	mov	r18, r9
     bf6:	21 60       	ori	r18, 0x01	; 1
     bf8:	2d c0       	rjmp	.+90     	; 0xc54 <vfprintf+0xe4>
     bfa:	39 2d       	mov	r19, r9
     bfc:	32 60       	ori	r19, 0x02	; 2
     bfe:	93 2e       	mov	r9, r19
     c00:	89 2d       	mov	r24, r9
     c02:	84 60       	ori	r24, 0x04	; 4
     c04:	98 2e       	mov	r9, r24
     c06:	2a c0       	rjmp	.+84     	; 0xc5c <vfprintf+0xec>
     c08:	e9 2d       	mov	r30, r9
     c0a:	e8 60       	ori	r30, 0x08	; 8
     c0c:	15 c0       	rjmp	.+42     	; 0xc38 <vfprintf+0xc8>
     c0e:	97 fc       	sbrc	r9, 7
     c10:	2d c0       	rjmp	.+90     	; 0xc6c <vfprintf+0xfc>
     c12:	20 ed       	ldi	r18, 0xD0	; 208
     c14:	28 0f       	add	r18, r24
     c16:	2a 30       	cpi	r18, 0x0A	; 10
     c18:	88 f4       	brcc	.+34     	; 0xc3c <vfprintf+0xcc>
     c1a:	96 fe       	sbrs	r9, 6
     c1c:	06 c0       	rjmp	.+12     	; 0xc2a <vfprintf+0xba>
     c1e:	3a e0       	ldi	r19, 0x0A	; 10
     c20:	13 9f       	mul	r17, r19
     c22:	20 0d       	add	r18, r0
     c24:	11 24       	eor	r1, r1
     c26:	12 2f       	mov	r17, r18
     c28:	19 c0       	rjmp	.+50     	; 0xc5c <vfprintf+0xec>
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	58 9e       	mul	r5, r24
     c2e:	20 0d       	add	r18, r0
     c30:	11 24       	eor	r1, r1
     c32:	52 2e       	mov	r5, r18
     c34:	e9 2d       	mov	r30, r9
     c36:	e0 62       	ori	r30, 0x20	; 32
     c38:	9e 2e       	mov	r9, r30
     c3a:	10 c0       	rjmp	.+32     	; 0xc5c <vfprintf+0xec>
     c3c:	8e 32       	cpi	r24, 0x2E	; 46
     c3e:	31 f4       	brne	.+12     	; 0xc4c <vfprintf+0xdc>
     c40:	96 fc       	sbrc	r9, 6
     c42:	e5 c2       	rjmp	.+1482   	; 0x120e <vfprintf+0x69e>
     c44:	f9 2d       	mov	r31, r9
     c46:	f0 64       	ori	r31, 0x40	; 64
     c48:	9f 2e       	mov	r9, r31
     c4a:	08 c0       	rjmp	.+16     	; 0xc5c <vfprintf+0xec>
     c4c:	8c 36       	cpi	r24, 0x6C	; 108
     c4e:	21 f4       	brne	.+8      	; 0xc58 <vfprintf+0xe8>
     c50:	29 2d       	mov	r18, r9
     c52:	20 68       	ori	r18, 0x80	; 128
     c54:	92 2e       	mov	r9, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0xec>
     c58:	88 36       	cpi	r24, 0x68	; 104
     c5a:	41 f4       	brne	.+16     	; 0xc6c <vfprintf+0xfc>
     c5c:	f1 01       	movw	r30, r2
     c5e:	93 fd       	sbrc	r25, 3
     c60:	85 91       	lpm	r24, Z+
     c62:	93 ff       	sbrs	r25, 3
     c64:	81 91       	ld	r24, Z+
     c66:	1f 01       	movw	r2, r30
     c68:	81 11       	cpse	r24, r1
     c6a:	b3 cf       	rjmp	.-154    	; 0xbd2 <vfprintf+0x62>
     c6c:	9b eb       	ldi	r25, 0xBB	; 187
     c6e:	98 0f       	add	r25, r24
     c70:	93 30       	cpi	r25, 0x03	; 3
     c72:	20 f4       	brcc	.+8      	; 0xc7c <vfprintf+0x10c>
     c74:	99 2d       	mov	r25, r9
     c76:	90 61       	ori	r25, 0x10	; 16
     c78:	80 5e       	subi	r24, 0xE0	; 224
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <vfprintf+0x11a>
     c7c:	9b e9       	ldi	r25, 0x9B	; 155
     c7e:	98 0f       	add	r25, r24
     c80:	93 30       	cpi	r25, 0x03	; 3
     c82:	08 f0       	brcs	.+2      	; 0xc86 <vfprintf+0x116>
     c84:	66 c1       	rjmp	.+716    	; 0xf52 <vfprintf+0x3e2>
     c86:	99 2d       	mov	r25, r9
     c88:	9f 7e       	andi	r25, 0xEF	; 239
     c8a:	96 ff       	sbrs	r25, 6
     c8c:	16 e0       	ldi	r17, 0x06	; 6
     c8e:	9f 73       	andi	r25, 0x3F	; 63
     c90:	99 2e       	mov	r9, r25
     c92:	85 36       	cpi	r24, 0x65	; 101
     c94:	19 f4       	brne	.+6      	; 0xc9c <vfprintf+0x12c>
     c96:	90 64       	ori	r25, 0x40	; 64
     c98:	99 2e       	mov	r9, r25
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <vfprintf+0x13c>
     c9c:	86 36       	cpi	r24, 0x66	; 102
     c9e:	21 f4       	brne	.+8      	; 0xca8 <vfprintf+0x138>
     ca0:	39 2f       	mov	r19, r25
     ca2:	30 68       	ori	r19, 0x80	; 128
     ca4:	93 2e       	mov	r9, r19
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <vfprintf+0x13c>
     ca8:	11 11       	cpse	r17, r1
     caa:	11 50       	subi	r17, 0x01	; 1
     cac:	97 fe       	sbrs	r9, 7
     cae:	07 c0       	rjmp	.+14     	; 0xcbe <vfprintf+0x14e>
     cb0:	1c 33       	cpi	r17, 0x3C	; 60
     cb2:	50 f4       	brcc	.+20     	; 0xcc8 <vfprintf+0x158>
     cb4:	44 24       	eor	r4, r4
     cb6:	43 94       	inc	r4
     cb8:	41 0e       	add	r4, r17
     cba:	27 e0       	ldi	r18, 0x07	; 7
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <vfprintf+0x164>
     cbe:	18 30       	cpi	r17, 0x08	; 8
     cc0:	38 f0       	brcs	.+14     	; 0xcd0 <vfprintf+0x160>
     cc2:	27 e0       	ldi	r18, 0x07	; 7
     cc4:	17 e0       	ldi	r17, 0x07	; 7
     cc6:	05 c0       	rjmp	.+10     	; 0xcd2 <vfprintf+0x162>
     cc8:	27 e0       	ldi	r18, 0x07	; 7
     cca:	9c e3       	ldi	r25, 0x3C	; 60
     ccc:	49 2e       	mov	r4, r25
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <vfprintf+0x164>
     cd0:	21 2f       	mov	r18, r17
     cd2:	41 2c       	mov	r4, r1
     cd4:	56 01       	movw	r10, r12
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	a8 0e       	add	r10, r24
     cda:	b1 1c       	adc	r11, r1
     cdc:	f6 01       	movw	r30, r12
     cde:	60 81       	ld	r22, Z
     ce0:	71 81       	ldd	r23, Z+1	; 0x01
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	04 2d       	mov	r16, r4
     ce8:	a3 01       	movw	r20, r6
     cea:	0e 94 8e 09 	call	0x131c	; 0x131c <__ftoa_engine>
     cee:	6c 01       	movw	r12, r24
     cf0:	f9 81       	ldd	r31, Y+1	; 0x01
     cf2:	fc 87       	std	Y+12, r31	; 0x0c
     cf4:	f0 ff       	sbrs	r31, 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x18c>
     cf8:	f3 ff       	sbrs	r31, 3
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <vfprintf+0x198>
     cfc:	91 fc       	sbrc	r9, 1
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0x19c>
     d00:	92 fe       	sbrs	r9, 2
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <vfprintf+0x1a0>
     d04:	00 e2       	ldi	r16, 0x20	; 32
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <vfprintf+0x1a2>
     d08:	0d e2       	ldi	r16, 0x2D	; 45
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <vfprintf+0x1a2>
     d0c:	0b e2       	ldi	r16, 0x2B	; 43
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <vfprintf+0x1a2>
     d10:	00 e0       	ldi	r16, 0x00	; 0
     d12:	8c 85       	ldd	r24, Y+12	; 0x0c
     d14:	8c 70       	andi	r24, 0x0C	; 12
     d16:	19 f0       	breq	.+6      	; 0xd1e <vfprintf+0x1ae>
     d18:	01 11       	cpse	r16, r1
     d1a:	5a c2       	rjmp	.+1204   	; 0x11d0 <vfprintf+0x660>
     d1c:	9b c2       	rjmp	.+1334   	; 0x1254 <vfprintf+0x6e4>
     d1e:	97 fe       	sbrs	r9, 7
     d20:	10 c0       	rjmp	.+32     	; 0xd42 <vfprintf+0x1d2>
     d22:	4c 0c       	add	r4, r12
     d24:	fc 85       	ldd	r31, Y+12	; 0x0c
     d26:	f4 ff       	sbrs	r31, 4
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <vfprintf+0x1c2>
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	81 33       	cpi	r24, 0x31	; 49
     d2e:	09 f4       	brne	.+2      	; 0xd32 <vfprintf+0x1c2>
     d30:	4a 94       	dec	r4
     d32:	14 14       	cp	r1, r4
     d34:	74 f5       	brge	.+92     	; 0xd92 <vfprintf+0x222>
     d36:	28 e0       	ldi	r18, 0x08	; 8
     d38:	24 15       	cp	r18, r4
     d3a:	78 f5       	brcc	.+94     	; 0xd9a <vfprintf+0x22a>
     d3c:	88 e0       	ldi	r24, 0x08	; 8
     d3e:	48 2e       	mov	r4, r24
     d40:	2c c0       	rjmp	.+88     	; 0xd9a <vfprintf+0x22a>
     d42:	96 fc       	sbrc	r9, 6
     d44:	2a c0       	rjmp	.+84     	; 0xd9a <vfprintf+0x22a>
     d46:	81 2f       	mov	r24, r17
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	8c 15       	cp	r24, r12
     d4c:	9d 05       	cpc	r25, r13
     d4e:	9c f0       	brlt	.+38     	; 0xd76 <vfprintf+0x206>
     d50:	3c ef       	ldi	r19, 0xFC	; 252
     d52:	c3 16       	cp	r12, r19
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	d3 06       	cpc	r13, r19
     d58:	74 f0       	brlt	.+28     	; 0xd76 <vfprintf+0x206>
     d5a:	89 2d       	mov	r24, r9
     d5c:	80 68       	ori	r24, 0x80	; 128
     d5e:	98 2e       	mov	r9, r24
     d60:	0a c0       	rjmp	.+20     	; 0xd76 <vfprintf+0x206>
     d62:	e2 e0       	ldi	r30, 0x02	; 2
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	ec 0f       	add	r30, r28
     d68:	fd 1f       	adc	r31, r29
     d6a:	e1 0f       	add	r30, r17
     d6c:	f1 1d       	adc	r31, r1
     d6e:	80 81       	ld	r24, Z
     d70:	80 33       	cpi	r24, 0x30	; 48
     d72:	19 f4       	brne	.+6      	; 0xd7a <vfprintf+0x20a>
     d74:	11 50       	subi	r17, 0x01	; 1
     d76:	11 11       	cpse	r17, r1
     d78:	f4 cf       	rjmp	.-24     	; 0xd62 <vfprintf+0x1f2>
     d7a:	97 fe       	sbrs	r9, 7
     d7c:	0e c0       	rjmp	.+28     	; 0xd9a <vfprintf+0x22a>
     d7e:	44 24       	eor	r4, r4
     d80:	43 94       	inc	r4
     d82:	41 0e       	add	r4, r17
     d84:	81 2f       	mov	r24, r17
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	c8 16       	cp	r12, r24
     d8a:	d9 06       	cpc	r13, r25
     d8c:	2c f4       	brge	.+10     	; 0xd98 <vfprintf+0x228>
     d8e:	1c 19       	sub	r17, r12
     d90:	04 c0       	rjmp	.+8      	; 0xd9a <vfprintf+0x22a>
     d92:	44 24       	eor	r4, r4
     d94:	43 94       	inc	r4
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <vfprintf+0x22a>
     d98:	10 e0       	ldi	r17, 0x00	; 0
     d9a:	97 fe       	sbrs	r9, 7
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x23a>
     d9e:	1c 14       	cp	r1, r12
     da0:	1d 04       	cpc	r1, r13
     da2:	34 f4       	brge	.+12     	; 0xdb0 <vfprintf+0x240>
     da4:	c6 01       	movw	r24, r12
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	05 c0       	rjmp	.+10     	; 0xdb4 <vfprintf+0x244>
     daa:	85 e0       	ldi	r24, 0x05	; 5
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <vfprintf+0x244>
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	01 11       	cpse	r16, r1
     db6:	01 96       	adiw	r24, 0x01	; 1
     db8:	11 23       	and	r17, r17
     dba:	31 f0       	breq	.+12     	; 0xdc8 <vfprintf+0x258>
     dbc:	21 2f       	mov	r18, r17
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	2f 5f       	subi	r18, 0xFF	; 255
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	25 2d       	mov	r18, r5
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	82 17       	cp	r24, r18
     dce:	93 07       	cpc	r25, r19
     dd0:	14 f4       	brge	.+4      	; 0xdd6 <vfprintf+0x266>
     dd2:	58 1a       	sub	r5, r24
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <vfprintf+0x268>
     dd6:	51 2c       	mov	r5, r1
     dd8:	89 2d       	mov	r24, r9
     dda:	89 70       	andi	r24, 0x09	; 9
     ddc:	49 f4       	brne	.+18     	; 0xdf0 <vfprintf+0x280>
     dde:	55 20       	and	r5, r5
     de0:	39 f0       	breq	.+14     	; 0xdf0 <vfprintf+0x280>
     de2:	b7 01       	movw	r22, r14
     de4:	80 e2       	ldi	r24, 0x20	; 32
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     dec:	5a 94       	dec	r5
     dee:	f7 cf       	rjmp	.-18     	; 0xdde <vfprintf+0x26e>
     df0:	00 23       	and	r16, r16
     df2:	29 f0       	breq	.+10     	; 0xdfe <vfprintf+0x28e>
     df4:	b7 01       	movw	r22, r14
     df6:	80 2f       	mov	r24, r16
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     dfe:	93 fc       	sbrc	r9, 3
     e00:	09 c0       	rjmp	.+18     	; 0xe14 <vfprintf+0x2a4>
     e02:	55 20       	and	r5, r5
     e04:	39 f0       	breq	.+14     	; 0xe14 <vfprintf+0x2a4>
     e06:	b7 01       	movw	r22, r14
     e08:	80 e3       	ldi	r24, 0x30	; 48
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     e10:	5a 94       	dec	r5
     e12:	f7 cf       	rjmp	.-18     	; 0xe02 <vfprintf+0x292>
     e14:	97 fe       	sbrs	r9, 7
     e16:	4c c0       	rjmp	.+152    	; 0xeb0 <vfprintf+0x340>
     e18:	46 01       	movw	r8, r12
     e1a:	d7 fe       	sbrs	r13, 7
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <vfprintf+0x2b2>
     e1e:	81 2c       	mov	r8, r1
     e20:	91 2c       	mov	r9, r1
     e22:	c6 01       	movw	r24, r12
     e24:	88 19       	sub	r24, r8
     e26:	99 09       	sbc	r25, r9
     e28:	f3 01       	movw	r30, r6
     e2a:	e8 0f       	add	r30, r24
     e2c:	f9 1f       	adc	r31, r25
     e2e:	fe 87       	std	Y+14, r31	; 0x0e
     e30:	ed 87       	std	Y+13, r30	; 0x0d
     e32:	96 01       	movw	r18, r12
     e34:	24 19       	sub	r18, r4
     e36:	31 09       	sbc	r19, r1
     e38:	38 8b       	std	Y+16, r19	; 0x10
     e3a:	2f 87       	std	Y+15, r18	; 0x0f
     e3c:	01 2f       	mov	r16, r17
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	11 95       	neg	r17
     e42:	01 95       	neg	r16
     e44:	11 09       	sbc	r17, r1
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	83 16       	cp	r8, r19
     e4a:	93 06       	cpc	r9, r19
     e4c:	29 f4       	brne	.+10     	; 0xe58 <vfprintf+0x2e8>
     e4e:	b7 01       	movw	r22, r14
     e50:	8e e2       	ldi	r24, 0x2E	; 46
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     e58:	c8 14       	cp	r12, r8
     e5a:	d9 04       	cpc	r13, r9
     e5c:	4c f0       	brlt	.+18     	; 0xe70 <vfprintf+0x300>
     e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e60:	98 89       	ldd	r25, Y+16	; 0x10
     e62:	88 15       	cp	r24, r8
     e64:	99 05       	cpc	r25, r9
     e66:	24 f4       	brge	.+8      	; 0xe70 <vfprintf+0x300>
     e68:	ed 85       	ldd	r30, Y+13	; 0x0d
     e6a:	fe 85       	ldd	r31, Y+14	; 0x0e
     e6c:	81 81       	ldd	r24, Z+1	; 0x01
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <vfprintf+0x302>
     e70:	80 e3       	ldi	r24, 0x30	; 48
     e72:	f1 e0       	ldi	r31, 0x01	; 1
     e74:	8f 1a       	sub	r8, r31
     e76:	91 08       	sbc	r9, r1
     e78:	2d 85       	ldd	r18, Y+13	; 0x0d
     e7a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e7c:	2f 5f       	subi	r18, 0xFF	; 255
     e7e:	3f 4f       	sbci	r19, 0xFF	; 255
     e80:	3e 87       	std	Y+14, r19	; 0x0e
     e82:	2d 87       	std	Y+13, r18	; 0x0d
     e84:	80 16       	cp	r8, r16
     e86:	91 06       	cpc	r9, r17
     e88:	2c f0       	brlt	.+10     	; 0xe94 <vfprintf+0x324>
     e8a:	b7 01       	movw	r22, r14
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     e92:	d9 cf       	rjmp	.-78     	; 0xe46 <vfprintf+0x2d6>
     e94:	c8 14       	cp	r12, r8
     e96:	d9 04       	cpc	r13, r9
     e98:	41 f4       	brne	.+16     	; 0xeaa <vfprintf+0x33a>
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	96 33       	cpi	r25, 0x36	; 54
     e9e:	20 f4       	brcc	.+8      	; 0xea8 <vfprintf+0x338>
     ea0:	95 33       	cpi	r25, 0x35	; 53
     ea2:	19 f4       	brne	.+6      	; 0xeaa <vfprintf+0x33a>
     ea4:	3c 85       	ldd	r19, Y+12	; 0x0c
     ea6:	34 ff       	sbrs	r19, 4
     ea8:	81 e3       	ldi	r24, 0x31	; 49
     eaa:	b7 01       	movw	r22, r14
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	4e c0       	rjmp	.+156    	; 0xf4c <vfprintf+0x3dc>
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	81 33       	cpi	r24, 0x31	; 49
     eb4:	19 f0       	breq	.+6      	; 0xebc <vfprintf+0x34c>
     eb6:	9c 85       	ldd	r25, Y+12	; 0x0c
     eb8:	9f 7e       	andi	r25, 0xEF	; 239
     eba:	9c 87       	std	Y+12, r25	; 0x0c
     ebc:	b7 01       	movw	r22, r14
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     ec4:	11 11       	cpse	r17, r1
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <vfprintf+0x362>
     ec8:	94 fc       	sbrc	r9, 4
     eca:	18 c0       	rjmp	.+48     	; 0xefc <vfprintf+0x38c>
     ecc:	85 e6       	ldi	r24, 0x65	; 101
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	17 c0       	rjmp	.+46     	; 0xf00 <vfprintf+0x390>
     ed2:	b7 01       	movw	r22, r14
     ed4:	8e e2       	ldi	r24, 0x2E	; 46
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     edc:	1e 5f       	subi	r17, 0xFE	; 254
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	01 e0       	ldi	r16, 0x01	; 1
     ee2:	08 0f       	add	r16, r24
     ee4:	f3 01       	movw	r30, r6
     ee6:	e8 0f       	add	r30, r24
     ee8:	f1 1d       	adc	r31, r1
     eea:	80 81       	ld	r24, Z
     eec:	b7 01       	movw	r22, r14
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     ef4:	80 2f       	mov	r24, r16
     ef6:	01 13       	cpse	r16, r17
     ef8:	f3 cf       	rjmp	.-26     	; 0xee0 <vfprintf+0x370>
     efa:	e6 cf       	rjmp	.-52     	; 0xec8 <vfprintf+0x358>
     efc:	85 e4       	ldi	r24, 0x45	; 69
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	b7 01       	movw	r22, r14
     f02:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f06:	d7 fc       	sbrc	r13, 7
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0x3a6>
     f0a:	c1 14       	cp	r12, r1
     f0c:	d1 04       	cpc	r13, r1
     f0e:	41 f4       	brne	.+16     	; 0xf20 <vfprintf+0x3b0>
     f10:	ec 85       	ldd	r30, Y+12	; 0x0c
     f12:	e4 ff       	sbrs	r30, 4
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <vfprintf+0x3b0>
     f16:	d1 94       	neg	r13
     f18:	c1 94       	neg	r12
     f1a:	d1 08       	sbc	r13, r1
     f1c:	8d e2       	ldi	r24, 0x2D	; 45
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <vfprintf+0x3b2>
     f20:	8b e2       	ldi	r24, 0x2B	; 43
     f22:	b7 01       	movw	r22, r14
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f2a:	80 e3       	ldi	r24, 0x30	; 48
     f2c:	2a e0       	ldi	r18, 0x0A	; 10
     f2e:	c2 16       	cp	r12, r18
     f30:	d1 04       	cpc	r13, r1
     f32:	2c f0       	brlt	.+10     	; 0xf3e <vfprintf+0x3ce>
     f34:	8f 5f       	subi	r24, 0xFF	; 255
     f36:	fa e0       	ldi	r31, 0x0A	; 10
     f38:	cf 1a       	sub	r12, r31
     f3a:	d1 08       	sbc	r13, r1
     f3c:	f7 cf       	rjmp	.-18     	; 0xf2c <vfprintf+0x3bc>
     f3e:	b7 01       	movw	r22, r14
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f46:	b7 01       	movw	r22, r14
     f48:	c6 01       	movw	r24, r12
     f4a:	c0 96       	adiw	r24, 0x30	; 48
     f4c:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     f50:	54 c1       	rjmp	.+680    	; 0x11fa <vfprintf+0x68a>
     f52:	83 36       	cpi	r24, 0x63	; 99
     f54:	31 f0       	breq	.+12     	; 0xf62 <vfprintf+0x3f2>
     f56:	83 37       	cpi	r24, 0x73	; 115
     f58:	79 f0       	breq	.+30     	; 0xf78 <vfprintf+0x408>
     f5a:	83 35       	cpi	r24, 0x53	; 83
     f5c:	09 f0       	breq	.+2      	; 0xf60 <vfprintf+0x3f0>
     f5e:	56 c0       	rjmp	.+172    	; 0x100c <vfprintf+0x49c>
     f60:	20 c0       	rjmp	.+64     	; 0xfa2 <vfprintf+0x432>
     f62:	56 01       	movw	r10, r12
     f64:	32 e0       	ldi	r19, 0x02	; 2
     f66:	a3 0e       	add	r10, r19
     f68:	b1 1c       	adc	r11, r1
     f6a:	f6 01       	movw	r30, r12
     f6c:	80 81       	ld	r24, Z
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	01 e0       	ldi	r16, 0x01	; 1
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	63 01       	movw	r12, r6
     f76:	12 c0       	rjmp	.+36     	; 0xf9c <vfprintf+0x42c>
     f78:	56 01       	movw	r10, r12
     f7a:	f2 e0       	ldi	r31, 0x02	; 2
     f7c:	af 0e       	add	r10, r31
     f7e:	b1 1c       	adc	r11, r1
     f80:	f6 01       	movw	r30, r12
     f82:	c0 80       	ld	r12, Z
     f84:	d1 80       	ldd	r13, Z+1	; 0x01
     f86:	96 fe       	sbrs	r9, 6
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <vfprintf+0x420>
     f8a:	61 2f       	mov	r22, r17
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <vfprintf+0x424>
     f90:	6f ef       	ldi	r22, 0xFF	; 255
     f92:	7f ef       	ldi	r23, 0xFF	; 255
     f94:	c6 01       	movw	r24, r12
     f96:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <strnlen>
     f9a:	8c 01       	movw	r16, r24
     f9c:	f9 2d       	mov	r31, r9
     f9e:	ff 77       	andi	r31, 0x7F	; 127
     fa0:	14 c0       	rjmp	.+40     	; 0xfca <vfprintf+0x45a>
     fa2:	56 01       	movw	r10, r12
     fa4:	22 e0       	ldi	r18, 0x02	; 2
     fa6:	a2 0e       	add	r10, r18
     fa8:	b1 1c       	adc	r11, r1
     faa:	f6 01       	movw	r30, r12
     fac:	c0 80       	ld	r12, Z
     fae:	d1 80       	ldd	r13, Z+1	; 0x01
     fb0:	96 fe       	sbrs	r9, 6
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <vfprintf+0x44a>
     fb4:	61 2f       	mov	r22, r17
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x44e>
     fba:	6f ef       	ldi	r22, 0xFF	; 255
     fbc:	7f ef       	ldi	r23, 0xFF	; 255
     fbe:	c6 01       	movw	r24, r12
     fc0:	0e 94 66 0a 	call	0x14cc	; 0x14cc <strnlen_P>
     fc4:	8c 01       	movw	r16, r24
     fc6:	f9 2d       	mov	r31, r9
     fc8:	f0 68       	ori	r31, 0x80	; 128
     fca:	9f 2e       	mov	r9, r31
     fcc:	f3 fd       	sbrc	r31, 3
     fce:	1a c0       	rjmp	.+52     	; 0x1004 <vfprintf+0x494>
     fd0:	85 2d       	mov	r24, r5
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	08 17       	cp	r16, r24
     fd6:	19 07       	cpc	r17, r25
     fd8:	a8 f4       	brcc	.+42     	; 0x1004 <vfprintf+0x494>
     fda:	b7 01       	movw	r22, r14
     fdc:	80 e2       	ldi	r24, 0x20	; 32
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     fe4:	5a 94       	dec	r5
     fe6:	f4 cf       	rjmp	.-24     	; 0xfd0 <vfprintf+0x460>
     fe8:	f6 01       	movw	r30, r12
     fea:	97 fc       	sbrc	r9, 7
     fec:	85 91       	lpm	r24, Z+
     fee:	97 fe       	sbrs	r9, 7
     ff0:	81 91       	ld	r24, Z+
     ff2:	6f 01       	movw	r12, r30
     ff4:	b7 01       	movw	r22, r14
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
     ffc:	51 10       	cpse	r5, r1
     ffe:	5a 94       	dec	r5
    1000:	01 50       	subi	r16, 0x01	; 1
    1002:	11 09       	sbc	r17, r1
    1004:	01 15       	cp	r16, r1
    1006:	11 05       	cpc	r17, r1
    1008:	79 f7       	brne	.-34     	; 0xfe8 <vfprintf+0x478>
    100a:	f7 c0       	rjmp	.+494    	; 0x11fa <vfprintf+0x68a>
    100c:	84 36       	cpi	r24, 0x64	; 100
    100e:	11 f0       	breq	.+4      	; 0x1014 <vfprintf+0x4a4>
    1010:	89 36       	cpi	r24, 0x69	; 105
    1012:	61 f5       	brne	.+88     	; 0x106c <vfprintf+0x4fc>
    1014:	56 01       	movw	r10, r12
    1016:	97 fe       	sbrs	r9, 7
    1018:	09 c0       	rjmp	.+18     	; 0x102c <vfprintf+0x4bc>
    101a:	24 e0       	ldi	r18, 0x04	; 4
    101c:	a2 0e       	add	r10, r18
    101e:	b1 1c       	adc	r11, r1
    1020:	f6 01       	movw	r30, r12
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	0a c0       	rjmp	.+20     	; 0x1040 <vfprintf+0x4d0>
    102c:	f2 e0       	ldi	r31, 0x02	; 2
    102e:	af 0e       	add	r10, r31
    1030:	b1 1c       	adc	r11, r1
    1032:	f6 01       	movw	r30, r12
    1034:	60 81       	ld	r22, Z
    1036:	71 81       	ldd	r23, Z+1	; 0x01
    1038:	07 2e       	mov	r0, r23
    103a:	00 0c       	add	r0, r0
    103c:	88 0b       	sbc	r24, r24
    103e:	99 0b       	sbc	r25, r25
    1040:	f9 2d       	mov	r31, r9
    1042:	ff 76       	andi	r31, 0x6F	; 111
    1044:	9f 2e       	mov	r9, r31
    1046:	97 ff       	sbrs	r25, 7
    1048:	09 c0       	rjmp	.+18     	; 0x105c <vfprintf+0x4ec>
    104a:	90 95       	com	r25
    104c:	80 95       	com	r24
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	f0 68       	ori	r31, 0x80	; 128
    105a:	9f 2e       	mov	r9, r31
    105c:	2a e0       	ldi	r18, 0x0A	; 10
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	a3 01       	movw	r20, r6
    1062:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__ultoa_invert>
    1066:	c8 2e       	mov	r12, r24
    1068:	c6 18       	sub	r12, r6
    106a:	3f c0       	rjmp	.+126    	; 0x10ea <vfprintf+0x57a>
    106c:	09 2d       	mov	r16, r9
    106e:	85 37       	cpi	r24, 0x75	; 117
    1070:	21 f4       	brne	.+8      	; 0x107a <vfprintf+0x50a>
    1072:	0f 7e       	andi	r16, 0xEF	; 239
    1074:	2a e0       	ldi	r18, 0x0A	; 10
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	1d c0       	rjmp	.+58     	; 0x10b4 <vfprintf+0x544>
    107a:	09 7f       	andi	r16, 0xF9	; 249
    107c:	8f 36       	cpi	r24, 0x6F	; 111
    107e:	91 f0       	breq	.+36     	; 0x10a4 <vfprintf+0x534>
    1080:	18 f4       	brcc	.+6      	; 0x1088 <vfprintf+0x518>
    1082:	88 35       	cpi	r24, 0x58	; 88
    1084:	59 f0       	breq	.+22     	; 0x109c <vfprintf+0x52c>
    1086:	c3 c0       	rjmp	.+390    	; 0x120e <vfprintf+0x69e>
    1088:	80 37       	cpi	r24, 0x70	; 112
    108a:	19 f0       	breq	.+6      	; 0x1092 <vfprintf+0x522>
    108c:	88 37       	cpi	r24, 0x78	; 120
    108e:	11 f0       	breq	.+4      	; 0x1094 <vfprintf+0x524>
    1090:	be c0       	rjmp	.+380    	; 0x120e <vfprintf+0x69e>
    1092:	00 61       	ori	r16, 0x10	; 16
    1094:	04 ff       	sbrs	r16, 4
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <vfprintf+0x53a>
    1098:	04 60       	ori	r16, 0x04	; 4
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <vfprintf+0x53a>
    109c:	94 fe       	sbrs	r9, 4
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <vfprintf+0x540>
    10a0:	06 60       	ori	r16, 0x06	; 6
    10a2:	06 c0       	rjmp	.+12     	; 0x10b0 <vfprintf+0x540>
    10a4:	28 e0       	ldi	r18, 0x08	; 8
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <vfprintf+0x544>
    10aa:	20 e1       	ldi	r18, 0x10	; 16
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <vfprintf+0x544>
    10b0:	20 e1       	ldi	r18, 0x10	; 16
    10b2:	32 e0       	ldi	r19, 0x02	; 2
    10b4:	56 01       	movw	r10, r12
    10b6:	07 ff       	sbrs	r16, 7
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <vfprintf+0x55c>
    10ba:	84 e0       	ldi	r24, 0x04	; 4
    10bc:	a8 0e       	add	r10, r24
    10be:	b1 1c       	adc	r11, r1
    10c0:	f6 01       	movw	r30, r12
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    10ca:	08 c0       	rjmp	.+16     	; 0x10dc <vfprintf+0x56c>
    10cc:	f2 e0       	ldi	r31, 0x02	; 2
    10ce:	af 0e       	add	r10, r31
    10d0:	b1 1c       	adc	r11, r1
    10d2:	f6 01       	movw	r30, r12
    10d4:	60 81       	ld	r22, Z
    10d6:	71 81       	ldd	r23, Z+1	; 0x01
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a3 01       	movw	r20, r6
    10de:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <__ultoa_invert>
    10e2:	c8 2e       	mov	r12, r24
    10e4:	c6 18       	sub	r12, r6
    10e6:	0f 77       	andi	r16, 0x7F	; 127
    10e8:	90 2e       	mov	r9, r16
    10ea:	96 fe       	sbrs	r9, 6
    10ec:	0b c0       	rjmp	.+22     	; 0x1104 <vfprintf+0x594>
    10ee:	09 2d       	mov	r16, r9
    10f0:	0e 7f       	andi	r16, 0xFE	; 254
    10f2:	c1 16       	cp	r12, r17
    10f4:	50 f4       	brcc	.+20     	; 0x110a <vfprintf+0x59a>
    10f6:	94 fe       	sbrs	r9, 4
    10f8:	0a c0       	rjmp	.+20     	; 0x110e <vfprintf+0x59e>
    10fa:	92 fc       	sbrc	r9, 2
    10fc:	08 c0       	rjmp	.+16     	; 0x110e <vfprintf+0x59e>
    10fe:	09 2d       	mov	r16, r9
    1100:	0e 7e       	andi	r16, 0xEE	; 238
    1102:	05 c0       	rjmp	.+10     	; 0x110e <vfprintf+0x59e>
    1104:	dc 2c       	mov	r13, r12
    1106:	09 2d       	mov	r16, r9
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <vfprintf+0x5a0>
    110a:	dc 2c       	mov	r13, r12
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <vfprintf+0x5a0>
    110e:	d1 2e       	mov	r13, r17
    1110:	04 ff       	sbrs	r16, 4
    1112:	0d c0       	rjmp	.+26     	; 0x112e <vfprintf+0x5be>
    1114:	fe 01       	movw	r30, r28
    1116:	ec 0d       	add	r30, r12
    1118:	f1 1d       	adc	r31, r1
    111a:	80 81       	ld	r24, Z
    111c:	80 33       	cpi	r24, 0x30	; 48
    111e:	11 f4       	brne	.+4      	; 0x1124 <vfprintf+0x5b4>
    1120:	09 7e       	andi	r16, 0xE9	; 233
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <vfprintf+0x5c6>
    1124:	02 ff       	sbrs	r16, 2
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <vfprintf+0x5c4>
    1128:	d3 94       	inc	r13
    112a:	d3 94       	inc	r13
    112c:	04 c0       	rjmp	.+8      	; 0x1136 <vfprintf+0x5c6>
    112e:	80 2f       	mov	r24, r16
    1130:	86 78       	andi	r24, 0x86	; 134
    1132:	09 f0       	breq	.+2      	; 0x1136 <vfprintf+0x5c6>
    1134:	d3 94       	inc	r13
    1136:	03 fd       	sbrc	r16, 3
    1138:	11 c0       	rjmp	.+34     	; 0x115c <vfprintf+0x5ec>
    113a:	00 ff       	sbrs	r16, 0
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0x5da>
    113e:	1c 2d       	mov	r17, r12
    1140:	d5 14       	cp	r13, r5
    1142:	80 f4       	brcc	.+32     	; 0x1164 <vfprintf+0x5f4>
    1144:	15 0d       	add	r17, r5
    1146:	1d 19       	sub	r17, r13
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <vfprintf+0x5f4>
    114a:	d5 14       	cp	r13, r5
    114c:	58 f4       	brcc	.+22     	; 0x1164 <vfprintf+0x5f4>
    114e:	b7 01       	movw	r22, r14
    1150:	80 e2       	ldi	r24, 0x20	; 32
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    1158:	d3 94       	inc	r13
    115a:	f7 cf       	rjmp	.-18     	; 0x114a <vfprintf+0x5da>
    115c:	d5 14       	cp	r13, r5
    115e:	10 f4       	brcc	.+4      	; 0x1164 <vfprintf+0x5f4>
    1160:	5d 18       	sub	r5, r13
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <vfprintf+0x5f6>
    1164:	51 2c       	mov	r5, r1
    1166:	04 ff       	sbrs	r16, 4
    1168:	10 c0       	rjmp	.+32     	; 0x118a <vfprintf+0x61a>
    116a:	b7 01       	movw	r22, r14
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    1174:	02 ff       	sbrs	r16, 2
    1176:	17 c0       	rjmp	.+46     	; 0x11a6 <vfprintf+0x636>
    1178:	01 fd       	sbrc	r16, 1
    117a:	03 c0       	rjmp	.+6      	; 0x1182 <vfprintf+0x612>
    117c:	88 e7       	ldi	r24, 0x78	; 120
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <vfprintf+0x616>
    1182:	88 e5       	ldi	r24, 0x58	; 88
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	b7 01       	movw	r22, r14
    1188:	0c c0       	rjmp	.+24     	; 0x11a2 <vfprintf+0x632>
    118a:	80 2f       	mov	r24, r16
    118c:	86 78       	andi	r24, 0x86	; 134
    118e:	59 f0       	breq	.+22     	; 0x11a6 <vfprintf+0x636>
    1190:	01 ff       	sbrs	r16, 1
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <vfprintf+0x628>
    1194:	8b e2       	ldi	r24, 0x2B	; 43
    1196:	01 c0       	rjmp	.+2      	; 0x119a <vfprintf+0x62a>
    1198:	80 e2       	ldi	r24, 0x20	; 32
    119a:	07 fd       	sbrc	r16, 7
    119c:	8d e2       	ldi	r24, 0x2D	; 45
    119e:	b7 01       	movw	r22, r14
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    11a6:	c1 16       	cp	r12, r17
    11a8:	38 f4       	brcc	.+14     	; 0x11b8 <vfprintf+0x648>
    11aa:	b7 01       	movw	r22, r14
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    11b4:	11 50       	subi	r17, 0x01	; 1
    11b6:	f7 cf       	rjmp	.-18     	; 0x11a6 <vfprintf+0x636>
    11b8:	ca 94       	dec	r12
    11ba:	f3 01       	movw	r30, r6
    11bc:	ec 0d       	add	r30, r12
    11be:	f1 1d       	adc	r31, r1
    11c0:	80 81       	ld	r24, Z
    11c2:	b7 01       	movw	r22, r14
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    11ca:	c1 10       	cpse	r12, r1
    11cc:	f5 cf       	rjmp	.-22     	; 0x11b8 <vfprintf+0x648>
    11ce:	15 c0       	rjmp	.+42     	; 0x11fa <vfprintf+0x68a>
    11d0:	f4 e0       	ldi	r31, 0x04	; 4
    11d2:	f5 15       	cp	r31, r5
    11d4:	60 f5       	brcc	.+88     	; 0x122e <vfprintf+0x6be>
    11d6:	84 e0       	ldi	r24, 0x04	; 4
    11d8:	58 1a       	sub	r5, r24
    11da:	93 fe       	sbrs	r9, 3
    11dc:	1f c0       	rjmp	.+62     	; 0x121c <vfprintf+0x6ac>
    11de:	01 11       	cpse	r16, r1
    11e0:	27 c0       	rjmp	.+78     	; 0x1230 <vfprintf+0x6c0>
    11e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e4:	23 ff       	sbrs	r18, 3
    11e6:	2a c0       	rjmp	.+84     	; 0x123c <vfprintf+0x6cc>
    11e8:	04 e5       	ldi	r16, 0x54	; 84
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	39 2d       	mov	r19, r9
    11ee:	30 71       	andi	r19, 0x10	; 16
    11f0:	93 2e       	mov	r9, r19
    11f2:	f8 01       	movw	r30, r16
    11f4:	84 91       	lpm	r24, Z
    11f6:	81 11       	cpse	r24, r1
    11f8:	24 c0       	rjmp	.+72     	; 0x1242 <vfprintf+0x6d2>
    11fa:	55 20       	and	r5, r5
    11fc:	09 f4       	brne	.+2      	; 0x1200 <vfprintf+0x690>
    11fe:	e4 cc       	rjmp	.-1592   	; 0xbc8 <vfprintf+0x58>
    1200:	b7 01       	movw	r22, r14
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    120a:	5a 94       	dec	r5
    120c:	f6 cf       	rjmp	.-20     	; 0x11fa <vfprintf+0x68a>
    120e:	f7 01       	movw	r30, r14
    1210:	86 81       	ldd	r24, Z+6	; 0x06
    1212:	97 81       	ldd	r25, Z+7	; 0x07
    1214:	26 c0       	rjmp	.+76     	; 0x1262 <vfprintf+0x6f2>
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	23 c0       	rjmp	.+70     	; 0x1262 <vfprintf+0x6f2>
    121c:	b7 01       	movw	r22, r14
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    1226:	5a 94       	dec	r5
    1228:	51 10       	cpse	r5, r1
    122a:	f8 cf       	rjmp	.-16     	; 0x121c <vfprintf+0x6ac>
    122c:	d8 cf       	rjmp	.-80     	; 0x11de <vfprintf+0x66e>
    122e:	51 2c       	mov	r5, r1
    1230:	b7 01       	movw	r22, r14
    1232:	80 2f       	mov	r24, r16
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    123a:	d3 cf       	rjmp	.-90     	; 0x11e2 <vfprintf+0x672>
    123c:	08 e5       	ldi	r16, 0x58	; 88
    123e:	10 e0       	ldi	r17, 0x00	; 0
    1240:	d5 cf       	rjmp	.-86     	; 0x11ec <vfprintf+0x67c>
    1242:	91 10       	cpse	r9, r1
    1244:	80 52       	subi	r24, 0x20	; 32
    1246:	b7 01       	movw	r22, r14
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 84 0a 	call	0x1508	; 0x1508 <fputc>
    124e:	0f 5f       	subi	r16, 0xFF	; 255
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	cf cf       	rjmp	.-98     	; 0x11f2 <vfprintf+0x682>
    1254:	23 e0       	ldi	r18, 0x03	; 3
    1256:	25 15       	cp	r18, r5
    1258:	10 f4       	brcc	.+4      	; 0x125e <vfprintf+0x6ee>
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	bd cf       	rjmp	.-134    	; 0x11d8 <vfprintf+0x668>
    125e:	51 2c       	mov	r5, r1
    1260:	c0 cf       	rjmp	.-128    	; 0x11e2 <vfprintf+0x672>
    1262:	60 96       	adiw	r28, 0x10	; 16
    1264:	e2 e1       	ldi	r30, 0x12	; 18
    1266:	0c 94 51 09 	jmp	0x12a2	; 0x12a2 <__epilogue_restores__>

0000126a <__prologue_saves__>:
    126a:	2f 92       	push	r2
    126c:	3f 92       	push	r3
    126e:	4f 92       	push	r4
    1270:	5f 92       	push	r5
    1272:	6f 92       	push	r6
    1274:	7f 92       	push	r7
    1276:	8f 92       	push	r8
    1278:	9f 92       	push	r9
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	ca 1b       	sub	r28, r26
    1294:	db 0b       	sbc	r29, r27
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	09 94       	ijmp

000012a2 <__epilogue_restores__>:
    12a2:	2a 88       	ldd	r2, Y+18	; 0x12
    12a4:	39 88       	ldd	r3, Y+17	; 0x11
    12a6:	48 88       	ldd	r4, Y+16	; 0x10
    12a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    12aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    12ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    12b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    12b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    12b4:	b9 84       	ldd	r11, Y+9	; 0x09
    12b6:	c8 84       	ldd	r12, Y+8	; 0x08
    12b8:	df 80       	ldd	r13, Y+7	; 0x07
    12ba:	ee 80       	ldd	r14, Y+6	; 0x06
    12bc:	fd 80       	ldd	r15, Y+5	; 0x05
    12be:	0c 81       	ldd	r16, Y+4	; 0x04
    12c0:	1b 81       	ldd	r17, Y+3	; 0x03
    12c2:	aa 81       	ldd	r26, Y+2	; 0x02
    12c4:	b9 81       	ldd	r27, Y+1	; 0x01
    12c6:	ce 0f       	add	r28, r30
    12c8:	d1 1d       	adc	r29, r1
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	ed 01       	movw	r28, r26
    12d6:	08 95       	ret

000012d8 <atof>:
    12d8:	66 27       	eor	r22, r22
    12da:	77 27       	eor	r23, r23
    12dc:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <strtod>

000012e0 <atoi>:
    12e0:	fc 01       	movw	r30, r24
    12e2:	88 27       	eor	r24, r24
    12e4:	99 27       	eor	r25, r25
    12e6:	e8 94       	clt
    12e8:	21 91       	ld	r18, Z+
    12ea:	20 32       	cpi	r18, 0x20	; 32
    12ec:	e9 f3       	breq	.-6      	; 0x12e8 <atoi+0x8>
    12ee:	29 30       	cpi	r18, 0x09	; 9
    12f0:	10 f0       	brcs	.+4      	; 0x12f6 <atoi+0x16>
    12f2:	2e 30       	cpi	r18, 0x0E	; 14
    12f4:	c8 f3       	brcs	.-14     	; 0x12e8 <atoi+0x8>
    12f6:	2b 32       	cpi	r18, 0x2B	; 43
    12f8:	41 f0       	breq	.+16     	; 0x130a <atoi+0x2a>
    12fa:	2d 32       	cpi	r18, 0x2D	; 45
    12fc:	39 f4       	brne	.+14     	; 0x130c <atoi+0x2c>
    12fe:	68 94       	set
    1300:	04 c0       	rjmp	.+8      	; 0x130a <atoi+0x2a>
    1302:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__mulhi_const_10>
    1306:	82 0f       	add	r24, r18
    1308:	91 1d       	adc	r25, r1
    130a:	21 91       	ld	r18, Z+
    130c:	20 53       	subi	r18, 0x30	; 48
    130e:	2a 30       	cpi	r18, 0x0A	; 10
    1310:	c0 f3       	brcs	.-16     	; 0x1302 <atoi+0x22>
    1312:	1e f4       	brtc	.+6      	; 0x131a <atoi+0x3a>
    1314:	90 95       	com	r25
    1316:	81 95       	neg	r24
    1318:	9f 4f       	sbci	r25, 0xFF	; 255
    131a:	08 95       	ret

0000131c <__ftoa_engine>:
    131c:	28 30       	cpi	r18, 0x08	; 8
    131e:	08 f0       	brcs	.+2      	; 0x1322 <__ftoa_engine+0x6>
    1320:	27 e0       	ldi	r18, 0x07	; 7
    1322:	33 27       	eor	r19, r19
    1324:	da 01       	movw	r26, r20
    1326:	99 0f       	add	r25, r25
    1328:	31 1d       	adc	r19, r1
    132a:	87 fd       	sbrc	r24, 7
    132c:	91 60       	ori	r25, 0x01	; 1
    132e:	00 96       	adiw	r24, 0x00	; 0
    1330:	61 05       	cpc	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	39 f4       	brne	.+14     	; 0x1344 <__ftoa_engine+0x28>
    1336:	32 60       	ori	r19, 0x02	; 2
    1338:	2e 5f       	subi	r18, 0xFE	; 254
    133a:	3d 93       	st	X+, r19
    133c:	30 e3       	ldi	r19, 0x30	; 48
    133e:	2a 95       	dec	r18
    1340:	e1 f7       	brne	.-8      	; 0x133a <__ftoa_engine+0x1e>
    1342:	08 95       	ret
    1344:	9f 3f       	cpi	r25, 0xFF	; 255
    1346:	30 f0       	brcs	.+12     	; 0x1354 <__ftoa_engine+0x38>
    1348:	80 38       	cpi	r24, 0x80	; 128
    134a:	71 05       	cpc	r23, r1
    134c:	61 05       	cpc	r22, r1
    134e:	09 f0       	breq	.+2      	; 0x1352 <__ftoa_engine+0x36>
    1350:	3c 5f       	subi	r19, 0xFC	; 252
    1352:	3c 5f       	subi	r19, 0xFC	; 252
    1354:	3d 93       	st	X+, r19
    1356:	91 30       	cpi	r25, 0x01	; 1
    1358:	08 f0       	brcs	.+2      	; 0x135c <__ftoa_engine+0x40>
    135a:	80 68       	ori	r24, 0x80	; 128
    135c:	91 1d       	adc	r25, r1
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	1f 93       	push	r17
    1364:	0f 93       	push	r16
    1366:	ff 92       	push	r15
    1368:	ef 92       	push	r14
    136a:	19 2f       	mov	r17, r25
    136c:	98 7f       	andi	r25, 0xF8	; 248
    136e:	96 95       	lsr	r25
    1370:	e9 2f       	mov	r30, r25
    1372:	96 95       	lsr	r25
    1374:	96 95       	lsr	r25
    1376:	e9 0f       	add	r30, r25
    1378:	ff 27       	eor	r31, r31
    137a:	ea 54       	subi	r30, 0x4A	; 74
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	99 27       	eor	r25, r25
    1380:	33 27       	eor	r19, r19
    1382:	ee 24       	eor	r14, r14
    1384:	ff 24       	eor	r15, r15
    1386:	a7 01       	movw	r20, r14
    1388:	e7 01       	movw	r28, r14
    138a:	05 90       	lpm	r0, Z+
    138c:	08 94       	sec
    138e:	07 94       	ror	r0
    1390:	28 f4       	brcc	.+10     	; 0x139c <__ftoa_engine+0x80>
    1392:	36 0f       	add	r19, r22
    1394:	e7 1e       	adc	r14, r23
    1396:	f8 1e       	adc	r15, r24
    1398:	49 1f       	adc	r20, r25
    139a:	51 1d       	adc	r21, r1
    139c:	66 0f       	add	r22, r22
    139e:	77 1f       	adc	r23, r23
    13a0:	88 1f       	adc	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	06 94       	lsr	r0
    13a6:	a1 f7       	brne	.-24     	; 0x1390 <__ftoa_engine+0x74>
    13a8:	05 90       	lpm	r0, Z+
    13aa:	07 94       	ror	r0
    13ac:	28 f4       	brcc	.+10     	; 0x13b8 <__ftoa_engine+0x9c>
    13ae:	e7 0e       	add	r14, r23
    13b0:	f8 1e       	adc	r15, r24
    13b2:	49 1f       	adc	r20, r25
    13b4:	56 1f       	adc	r21, r22
    13b6:	c1 1d       	adc	r28, r1
    13b8:	77 0f       	add	r23, r23
    13ba:	88 1f       	adc	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	66 1f       	adc	r22, r22
    13c0:	06 94       	lsr	r0
    13c2:	a1 f7       	brne	.-24     	; 0x13ac <__ftoa_engine+0x90>
    13c4:	05 90       	lpm	r0, Z+
    13c6:	07 94       	ror	r0
    13c8:	28 f4       	brcc	.+10     	; 0x13d4 <__ftoa_engine+0xb8>
    13ca:	f8 0e       	add	r15, r24
    13cc:	49 1f       	adc	r20, r25
    13ce:	56 1f       	adc	r21, r22
    13d0:	c7 1f       	adc	r28, r23
    13d2:	d1 1d       	adc	r29, r1
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	66 1f       	adc	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	06 94       	lsr	r0
    13de:	a1 f7       	brne	.-24     	; 0x13c8 <__ftoa_engine+0xac>
    13e0:	05 90       	lpm	r0, Z+
    13e2:	07 94       	ror	r0
    13e4:	20 f4       	brcc	.+8      	; 0x13ee <__ftoa_engine+0xd2>
    13e6:	49 0f       	add	r20, r25
    13e8:	56 1f       	adc	r21, r22
    13ea:	c7 1f       	adc	r28, r23
    13ec:	d8 1f       	adc	r29, r24
    13ee:	99 0f       	add	r25, r25
    13f0:	66 1f       	adc	r22, r22
    13f2:	77 1f       	adc	r23, r23
    13f4:	88 1f       	adc	r24, r24
    13f6:	06 94       	lsr	r0
    13f8:	a9 f7       	brne	.-22     	; 0x13e4 <__ftoa_engine+0xc8>
    13fa:	84 91       	lpm	r24, Z
    13fc:	10 95       	com	r17
    13fe:	17 70       	andi	r17, 0x07	; 7
    1400:	41 f0       	breq	.+16     	; 0x1412 <__ftoa_engine+0xf6>
    1402:	d6 95       	lsr	r29
    1404:	c7 95       	ror	r28
    1406:	57 95       	ror	r21
    1408:	47 95       	ror	r20
    140a:	f7 94       	ror	r15
    140c:	e7 94       	ror	r14
    140e:	1a 95       	dec	r17
    1410:	c1 f7       	brne	.-16     	; 0x1402 <__ftoa_engine+0xe6>
    1412:	ec e5       	ldi	r30, 0x5C	; 92
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	68 94       	set
    1418:	15 90       	lpm	r1, Z+
    141a:	15 91       	lpm	r17, Z+
    141c:	35 91       	lpm	r19, Z+
    141e:	65 91       	lpm	r22, Z+
    1420:	95 91       	lpm	r25, Z+
    1422:	05 90       	lpm	r0, Z+
    1424:	7f e2       	ldi	r23, 0x2F	; 47
    1426:	73 95       	inc	r23
    1428:	e1 18       	sub	r14, r1
    142a:	f1 0a       	sbc	r15, r17
    142c:	43 0b       	sbc	r20, r19
    142e:	56 0b       	sbc	r21, r22
    1430:	c9 0b       	sbc	r28, r25
    1432:	d0 09       	sbc	r29, r0
    1434:	c0 f7       	brcc	.-16     	; 0x1426 <__ftoa_engine+0x10a>
    1436:	e1 0c       	add	r14, r1
    1438:	f1 1e       	adc	r15, r17
    143a:	43 1f       	adc	r20, r19
    143c:	56 1f       	adc	r21, r22
    143e:	c9 1f       	adc	r28, r25
    1440:	d0 1d       	adc	r29, r0
    1442:	7e f4       	brtc	.+30     	; 0x1462 <__ftoa_engine+0x146>
    1444:	70 33       	cpi	r23, 0x30	; 48
    1446:	11 f4       	brne	.+4      	; 0x144c <__ftoa_engine+0x130>
    1448:	8a 95       	dec	r24
    144a:	e6 cf       	rjmp	.-52     	; 0x1418 <__ftoa_engine+0xfc>
    144c:	e8 94       	clt
    144e:	01 50       	subi	r16, 0x01	; 1
    1450:	30 f0       	brcs	.+12     	; 0x145e <__ftoa_engine+0x142>
    1452:	08 0f       	add	r16, r24
    1454:	0a f4       	brpl	.+2      	; 0x1458 <__ftoa_engine+0x13c>
    1456:	00 27       	eor	r16, r16
    1458:	02 17       	cp	r16, r18
    145a:	08 f4       	brcc	.+2      	; 0x145e <__ftoa_engine+0x142>
    145c:	20 2f       	mov	r18, r16
    145e:	23 95       	inc	r18
    1460:	02 2f       	mov	r16, r18
    1462:	7a 33       	cpi	r23, 0x3A	; 58
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__ftoa_engine+0x154>
    1466:	79 e3       	ldi	r23, 0x39	; 57
    1468:	7d 93       	st	X+, r23
    146a:	2a 95       	dec	r18
    146c:	e9 f7       	brne	.-6      	; 0x1468 <__ftoa_engine+0x14c>
    146e:	10 c0       	rjmp	.+32     	; 0x1490 <__ftoa_engine+0x174>
    1470:	7d 93       	st	X+, r23
    1472:	2a 95       	dec	r18
    1474:	89 f6       	brne	.-94     	; 0x1418 <__ftoa_engine+0xfc>
    1476:	06 94       	lsr	r0
    1478:	97 95       	ror	r25
    147a:	67 95       	ror	r22
    147c:	37 95       	ror	r19
    147e:	17 95       	ror	r17
    1480:	17 94       	ror	r1
    1482:	e1 18       	sub	r14, r1
    1484:	f1 0a       	sbc	r15, r17
    1486:	43 0b       	sbc	r20, r19
    1488:	56 0b       	sbc	r21, r22
    148a:	c9 0b       	sbc	r28, r25
    148c:	d0 09       	sbc	r29, r0
    148e:	98 f0       	brcs	.+38     	; 0x14b6 <__ftoa_engine+0x19a>
    1490:	23 95       	inc	r18
    1492:	7e 91       	ld	r23, -X
    1494:	73 95       	inc	r23
    1496:	7a 33       	cpi	r23, 0x3A	; 58
    1498:	08 f0       	brcs	.+2      	; 0x149c <__ftoa_engine+0x180>
    149a:	70 e3       	ldi	r23, 0x30	; 48
    149c:	7c 93       	st	X, r23
    149e:	20 13       	cpse	r18, r16
    14a0:	b8 f7       	brcc	.-18     	; 0x1490 <__ftoa_engine+0x174>
    14a2:	7e 91       	ld	r23, -X
    14a4:	70 61       	ori	r23, 0x10	; 16
    14a6:	7d 93       	st	X+, r23
    14a8:	30 f0       	brcs	.+12     	; 0x14b6 <__ftoa_engine+0x19a>
    14aa:	83 95       	inc	r24
    14ac:	71 e3       	ldi	r23, 0x31	; 49
    14ae:	7d 93       	st	X+, r23
    14b0:	70 e3       	ldi	r23, 0x30	; 48
    14b2:	2a 95       	dec	r18
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <__ftoa_engine+0x192>
    14b6:	11 24       	eor	r1, r1
    14b8:	ef 90       	pop	r14
    14ba:	ff 90       	pop	r15
    14bc:	0f 91       	pop	r16
    14be:	1f 91       	pop	r17
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	99 27       	eor	r25, r25
    14c6:	87 fd       	sbrc	r24, 7
    14c8:	90 95       	com	r25
    14ca:	08 95       	ret

000014cc <strnlen_P>:
    14cc:	fc 01       	movw	r30, r24
    14ce:	05 90       	lpm	r0, Z+
    14d0:	61 50       	subi	r22, 0x01	; 1
    14d2:	70 40       	sbci	r23, 0x00	; 0
    14d4:	01 10       	cpse	r0, r1
    14d6:	d8 f7       	brcc	.-10     	; 0x14ce <strnlen_P+0x2>
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	8e 0f       	add	r24, r30
    14de:	9f 1f       	adc	r25, r31
    14e0:	08 95       	ret

000014e2 <strnlen>:
    14e2:	fc 01       	movw	r30, r24
    14e4:	61 50       	subi	r22, 0x01	; 1
    14e6:	70 40       	sbci	r23, 0x00	; 0
    14e8:	01 90       	ld	r0, Z+
    14ea:	01 10       	cpse	r0, r1
    14ec:	d8 f7       	brcc	.-10     	; 0x14e4 <strnlen+0x2>
    14ee:	80 95       	com	r24
    14f0:	90 95       	com	r25
    14f2:	8e 0f       	add	r24, r30
    14f4:	9f 1f       	adc	r25, r31
    14f6:	08 95       	ret

000014f8 <__mulhi_const_10>:
    14f8:	7a e0       	ldi	r23, 0x0A	; 10
    14fa:	97 9f       	mul	r25, r23
    14fc:	90 2d       	mov	r25, r0
    14fe:	87 9f       	mul	r24, r23
    1500:	80 2d       	mov	r24, r0
    1502:	91 0d       	add	r25, r1
    1504:	11 24       	eor	r1, r1
    1506:	08 95       	ret

00001508 <fputc>:
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	fb 01       	movw	r30, r22
    1512:	23 81       	ldd	r18, Z+3	; 0x03
    1514:	21 fd       	sbrc	r18, 1
    1516:	03 c0       	rjmp	.+6      	; 0x151e <fputc+0x16>
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	9f ef       	ldi	r25, 0xFF	; 255
    151c:	2c c0       	rjmp	.+88     	; 0x1576 <fputc+0x6e>
    151e:	22 ff       	sbrs	r18, 2
    1520:	16 c0       	rjmp	.+44     	; 0x154e <fputc+0x46>
    1522:	46 81       	ldd	r20, Z+6	; 0x06
    1524:	57 81       	ldd	r21, Z+7	; 0x07
    1526:	24 81       	ldd	r18, Z+4	; 0x04
    1528:	35 81       	ldd	r19, Z+5	; 0x05
    152a:	42 17       	cp	r20, r18
    152c:	53 07       	cpc	r21, r19
    152e:	44 f4       	brge	.+16     	; 0x1540 <fputc+0x38>
    1530:	a0 81       	ld	r26, Z
    1532:	b1 81       	ldd	r27, Z+1	; 0x01
    1534:	9d 01       	movw	r18, r26
    1536:	2f 5f       	subi	r18, 0xFF	; 255
    1538:	3f 4f       	sbci	r19, 0xFF	; 255
    153a:	31 83       	std	Z+1, r19	; 0x01
    153c:	20 83       	st	Z, r18
    153e:	8c 93       	st	X, r24
    1540:	26 81       	ldd	r18, Z+6	; 0x06
    1542:	37 81       	ldd	r19, Z+7	; 0x07
    1544:	2f 5f       	subi	r18, 0xFF	; 255
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	37 83       	std	Z+7, r19	; 0x07
    154a:	26 83       	std	Z+6, r18	; 0x06
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <fputc+0x6e>
    154e:	8b 01       	movw	r16, r22
    1550:	ec 01       	movw	r28, r24
    1552:	fb 01       	movw	r30, r22
    1554:	00 84       	ldd	r0, Z+8	; 0x08
    1556:	f1 85       	ldd	r31, Z+9	; 0x09
    1558:	e0 2d       	mov	r30, r0
    155a:	09 95       	icall
    155c:	89 2b       	or	r24, r25
    155e:	e1 f6       	brne	.-72     	; 0x1518 <fputc+0x10>
    1560:	d8 01       	movw	r26, r16
    1562:	16 96       	adiw	r26, 0x06	; 6
    1564:	8d 91       	ld	r24, X+
    1566:	9c 91       	ld	r25, X
    1568:	17 97       	sbiw	r26, 0x07	; 7
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	17 96       	adiw	r26, 0x07	; 7
    156e:	9c 93       	st	X, r25
    1570:	8e 93       	st	-X, r24
    1572:	16 97       	sbiw	r26, 0x06	; 6
    1574:	ce 01       	movw	r24, r28
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	1f 91       	pop	r17
    157c:	0f 91       	pop	r16
    157e:	08 95       	ret

00001580 <sprintf>:
    1580:	ae e0       	ldi	r26, 0x0E	; 14
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e6 ec       	ldi	r30, 0xC6	; 198
    1586:	fa e0       	ldi	r31, 0x0A	; 10
    1588:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__prologue_saves__+0x1c>
    158c:	0d 89       	ldd	r16, Y+21	; 0x15
    158e:	1e 89       	ldd	r17, Y+22	; 0x16
    1590:	86 e0       	ldi	r24, 0x06	; 6
    1592:	8c 83       	std	Y+4, r24	; 0x04
    1594:	1a 83       	std	Y+2, r17	; 0x02
    1596:	09 83       	std	Y+1, r16	; 0x01
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	9f e7       	ldi	r25, 0x7F	; 127
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	ae 01       	movw	r20, r28
    15a2:	47 5e       	subi	r20, 0xE7	; 231
    15a4:	5f 4f       	sbci	r21, 0xFF	; 255
    15a6:	6f 89       	ldd	r22, Y+23	; 0x17
    15a8:	78 8d       	ldd	r23, Y+24	; 0x18
    15aa:	ce 01       	movw	r24, r28
    15ac:	01 96       	adiw	r24, 0x01	; 1
    15ae:	0e 94 b8 05 	call	0xb70	; 0xb70 <vfprintf>
    15b2:	ef 81       	ldd	r30, Y+7	; 0x07
    15b4:	f8 85       	ldd	r31, Y+8	; 0x08
    15b6:	e0 0f       	add	r30, r16
    15b8:	f1 1f       	adc	r31, r17
    15ba:	10 82       	st	Z, r1
    15bc:	2e 96       	adiw	r28, 0x0e	; 14
    15be:	e4 e0       	ldi	r30, 0x04	; 4
    15c0:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__epilogue_restores__+0x1c>

000015c4 <__ultoa_invert>:
    15c4:	fa 01       	movw	r30, r20
    15c6:	aa 27       	eor	r26, r26
    15c8:	28 30       	cpi	r18, 0x08	; 8
    15ca:	51 f1       	breq	.+84     	; 0x1620 <__ultoa_invert+0x5c>
    15cc:	20 31       	cpi	r18, 0x10	; 16
    15ce:	81 f1       	breq	.+96     	; 0x1630 <__ultoa_invert+0x6c>
    15d0:	e8 94       	clt
    15d2:	6f 93       	push	r22
    15d4:	6e 7f       	andi	r22, 0xFE	; 254
    15d6:	6e 5f       	subi	r22, 0xFE	; 254
    15d8:	7f 4f       	sbci	r23, 0xFF	; 255
    15da:	8f 4f       	sbci	r24, 0xFF	; 255
    15dc:	9f 4f       	sbci	r25, 0xFF	; 255
    15de:	af 4f       	sbci	r26, 0xFF	; 255
    15e0:	b1 e0       	ldi	r27, 0x01	; 1
    15e2:	3e d0       	rcall	.+124    	; 0x1660 <__ultoa_invert+0x9c>
    15e4:	b4 e0       	ldi	r27, 0x04	; 4
    15e6:	3c d0       	rcall	.+120    	; 0x1660 <__ultoa_invert+0x9c>
    15e8:	67 0f       	add	r22, r23
    15ea:	78 1f       	adc	r23, r24
    15ec:	89 1f       	adc	r24, r25
    15ee:	9a 1f       	adc	r25, r26
    15f0:	a1 1d       	adc	r26, r1
    15f2:	68 0f       	add	r22, r24
    15f4:	79 1f       	adc	r23, r25
    15f6:	8a 1f       	adc	r24, r26
    15f8:	91 1d       	adc	r25, r1
    15fa:	a1 1d       	adc	r26, r1
    15fc:	6a 0f       	add	r22, r26
    15fe:	71 1d       	adc	r23, r1
    1600:	81 1d       	adc	r24, r1
    1602:	91 1d       	adc	r25, r1
    1604:	a1 1d       	adc	r26, r1
    1606:	20 d0       	rcall	.+64     	; 0x1648 <__ultoa_invert+0x84>
    1608:	09 f4       	brne	.+2      	; 0x160c <__ultoa_invert+0x48>
    160a:	68 94       	set
    160c:	3f 91       	pop	r19
    160e:	2a e0       	ldi	r18, 0x0A	; 10
    1610:	26 9f       	mul	r18, r22
    1612:	11 24       	eor	r1, r1
    1614:	30 19       	sub	r19, r0
    1616:	30 5d       	subi	r19, 0xD0	; 208
    1618:	31 93       	st	Z+, r19
    161a:	de f6       	brtc	.-74     	; 0x15d2 <__ultoa_invert+0xe>
    161c:	cf 01       	movw	r24, r30
    161e:	08 95       	ret
    1620:	46 2f       	mov	r20, r22
    1622:	47 70       	andi	r20, 0x07	; 7
    1624:	40 5d       	subi	r20, 0xD0	; 208
    1626:	41 93       	st	Z+, r20
    1628:	b3 e0       	ldi	r27, 0x03	; 3
    162a:	0f d0       	rcall	.+30     	; 0x164a <__ultoa_invert+0x86>
    162c:	c9 f7       	brne	.-14     	; 0x1620 <__ultoa_invert+0x5c>
    162e:	f6 cf       	rjmp	.-20     	; 0x161c <__ultoa_invert+0x58>
    1630:	46 2f       	mov	r20, r22
    1632:	4f 70       	andi	r20, 0x0F	; 15
    1634:	40 5d       	subi	r20, 0xD0	; 208
    1636:	4a 33       	cpi	r20, 0x3A	; 58
    1638:	18 f0       	brcs	.+6      	; 0x1640 <__ultoa_invert+0x7c>
    163a:	49 5d       	subi	r20, 0xD9	; 217
    163c:	31 fd       	sbrc	r19, 1
    163e:	40 52       	subi	r20, 0x20	; 32
    1640:	41 93       	st	Z+, r20
    1642:	02 d0       	rcall	.+4      	; 0x1648 <__ultoa_invert+0x84>
    1644:	a9 f7       	brne	.-22     	; 0x1630 <__ultoa_invert+0x6c>
    1646:	ea cf       	rjmp	.-44     	; 0x161c <__ultoa_invert+0x58>
    1648:	b4 e0       	ldi	r27, 0x04	; 4
    164a:	a6 95       	lsr	r26
    164c:	97 95       	ror	r25
    164e:	87 95       	ror	r24
    1650:	77 95       	ror	r23
    1652:	67 95       	ror	r22
    1654:	ba 95       	dec	r27
    1656:	c9 f7       	brne	.-14     	; 0x164a <__ultoa_invert+0x86>
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	61 05       	cpc	r22, r1
    165c:	71 05       	cpc	r23, r1
    165e:	08 95       	ret
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	0a 2e       	mov	r0, r26
    1666:	06 94       	lsr	r0
    1668:	57 95       	ror	r21
    166a:	47 95       	ror	r20
    166c:	37 95       	ror	r19
    166e:	27 95       	ror	r18
    1670:	ba 95       	dec	r27
    1672:	c9 f7       	brne	.-14     	; 0x1666 <__ultoa_invert+0xa2>
    1674:	62 0f       	add	r22, r18
    1676:	73 1f       	adc	r23, r19
    1678:	84 1f       	adc	r24, r20
    167a:	95 1f       	adc	r25, r21
    167c:	a0 1d       	adc	r26, r0
    167e:	08 95       	ret

00001680 <strtod>:
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e6 e4       	ldi	r30, 0x46	; 70
    1686:	fb e0       	ldi	r31, 0x0B	; 11
    1688:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__prologue_saves__+0xc>
    168c:	ec 01       	movw	r28, r24
    168e:	6b 01       	movw	r12, r22
    1690:	61 15       	cp	r22, r1
    1692:	71 05       	cpc	r23, r1
    1694:	19 f0       	breq	.+6      	; 0x169c <strtod+0x1c>
    1696:	fb 01       	movw	r30, r22
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
    169c:	7e 01       	movw	r14, r28
    169e:	ff ef       	ldi	r31, 0xFF	; 255
    16a0:	ef 1a       	sub	r14, r31
    16a2:	ff 0a       	sbc	r15, r31
    16a4:	08 81       	ld	r16, Y
    16a6:	80 2f       	mov	r24, r16
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 8e 0c 	call	0x191c	; 0x191c <isspace>
    16ae:	89 2b       	or	r24, r25
    16b0:	11 f0       	breq	.+4      	; 0x16b6 <strtod+0x36>
    16b2:	e7 01       	movw	r28, r14
    16b4:	f3 cf       	rjmp	.-26     	; 0x169c <strtod+0x1c>
    16b6:	0d 32       	cpi	r16, 0x2D	; 45
    16b8:	39 f4       	brne	.+14     	; 0x16c8 <strtod+0x48>
    16ba:	7e 01       	movw	r14, r28
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	e8 0e       	add	r14, r24
    16c0:	f1 1c       	adc	r15, r1
    16c2:	09 81       	ldd	r16, Y+1	; 0x01
    16c4:	11 e0       	ldi	r17, 0x01	; 1
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <strtod+0x58>
    16c8:	0b 32       	cpi	r16, 0x2B	; 43
    16ca:	29 f4       	brne	.+10     	; 0x16d6 <strtod+0x56>
    16cc:	7e 01       	movw	r14, r28
    16ce:	92 e0       	ldi	r25, 0x02	; 2
    16d0:	e9 0e       	add	r14, r25
    16d2:	f1 1c       	adc	r15, r1
    16d4:	09 81       	ldd	r16, Y+1	; 0x01
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	e7 01       	movw	r28, r14
    16da:	21 97       	sbiw	r28, 0x01	; 1
    16dc:	43 e0       	ldi	r20, 0x03	; 3
    16de:	50 e0       	ldi	r21, 0x00	; 0
    16e0:	6e e5       	ldi	r22, 0x5E	; 94
    16e2:	71 e0       	ldi	r23, 0x01	; 1
    16e4:	ce 01       	movw	r24, r28
    16e6:	0e 94 97 0c 	call	0x192e	; 0x192e <strncasecmp_P>
    16ea:	89 2b       	or	r24, r25
    16ec:	c1 f4       	brne	.+48     	; 0x171e <strtod+0x9e>
    16ee:	23 96       	adiw	r28, 0x03	; 3
    16f0:	45 e0       	ldi	r20, 0x05	; 5
    16f2:	50 e0       	ldi	r21, 0x00	; 0
    16f4:	69 e5       	ldi	r22, 0x59	; 89
    16f6:	71 e0       	ldi	r23, 0x01	; 1
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 97 0c 	call	0x192e	; 0x192e <strncasecmp_P>
    16fe:	89 2b       	or	r24, r25
    1700:	09 f4       	brne	.+2      	; 0x1704 <strtod+0x84>
    1702:	25 96       	adiw	r28, 0x05	; 5
    1704:	c1 14       	cp	r12, r1
    1706:	d1 04       	cpc	r13, r1
    1708:	19 f0       	breq	.+6      	; 0x1710 <strtod+0x90>
    170a:	f6 01       	movw	r30, r12
    170c:	d1 83       	std	Z+1, r29	; 0x01
    170e:	c0 83       	st	Z, r28
    1710:	11 11       	cpse	r17, r1
    1712:	f6 c0       	rjmp	.+492    	; 0x1900 <strtod+0x280>
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	9f e7       	ldi	r25, 0x7F	; 127
    171c:	fa c0       	rjmp	.+500    	; 0x1912 <strtod+0x292>
    171e:	43 e0       	ldi	r20, 0x03	; 3
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	66 e5       	ldi	r22, 0x56	; 86
    1724:	71 e0       	ldi	r23, 0x01	; 1
    1726:	ce 01       	movw	r24, r28
    1728:	0e 94 97 0c 	call	0x192e	; 0x192e <strncasecmp_P>
    172c:	89 2b       	or	r24, r25
    172e:	59 f4       	brne	.+22     	; 0x1746 <strtod+0xc6>
    1730:	c1 14       	cp	r12, r1
    1732:	d1 04       	cpc	r13, r1
    1734:	09 f4       	brne	.+2      	; 0x1738 <strtod+0xb8>
    1736:	e9 c0       	rjmp	.+466    	; 0x190a <strtod+0x28a>
    1738:	f2 e0       	ldi	r31, 0x02	; 2
    173a:	ef 0e       	add	r14, r31
    173c:	f1 1c       	adc	r15, r1
    173e:	f6 01       	movw	r30, r12
    1740:	f1 82       	std	Z+1, r15	; 0x01
    1742:	e0 82       	st	Z, r14
    1744:	e2 c0       	rjmp	.+452    	; 0x190a <strtod+0x28a>
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	a9 01       	movw	r20, r18
    174c:	c0 e0       	ldi	r28, 0x00	; 0
    174e:	d0 e0       	ldi	r29, 0x00	; 0
    1750:	f7 01       	movw	r30, r14
    1752:	80 ed       	ldi	r24, 0xD0	; 208
    1754:	a8 2e       	mov	r10, r24
    1756:	a0 0e       	add	r10, r16
    1758:	89 e0       	ldi	r24, 0x09	; 9
    175a:	8a 15       	cp	r24, r10
    175c:	30 f1       	brcs	.+76     	; 0x17aa <strtod+0x12a>
    175e:	91 2f       	mov	r25, r17
    1760:	92 60       	ori	r25, 0x02	; 2
    1762:	b9 2e       	mov	r11, r25
    1764:	81 2f       	mov	r24, r17
    1766:	88 70       	andi	r24, 0x08	; 8
    1768:	12 ff       	sbrs	r17, 2
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <strtod+0xf4>
    176c:	81 11       	cpse	r24, r1
    176e:	24 c0       	rjmp	.+72     	; 0x17b8 <strtod+0x138>
    1770:	21 96       	adiw	r28, 0x01	; 1
    1772:	22 c0       	rjmp	.+68     	; 0x17b8 <strtod+0x138>
    1774:	81 11       	cpse	r24, r1
    1776:	21 97       	sbiw	r28, 0x01	; 1
    1778:	a5 e0       	ldi	r26, 0x05	; 5
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__muluhisi3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	aa 1f       	adc	r26, r26
    178a:	bb 1f       	adc	r27, r27
    178c:	9c 01       	movw	r18, r24
    178e:	ad 01       	movw	r20, r26
    1790:	2a 0d       	add	r18, r10
    1792:	31 1d       	adc	r19, r1
    1794:	41 1d       	adc	r20, r1
    1796:	51 1d       	adc	r21, r1
    1798:	28 39       	cpi	r18, 0x98	; 152
    179a:	89 e9       	ldi	r24, 0x99	; 153
    179c:	38 07       	cpc	r19, r24
    179e:	48 07       	cpc	r20, r24
    17a0:	89 e1       	ldi	r24, 0x19	; 25
    17a2:	58 07       	cpc	r21, r24
    17a4:	48 f0       	brcs	.+18     	; 0x17b8 <strtod+0x138>
    17a6:	16 60       	ori	r17, 0x06	; 6
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <strtod+0x136>
    17aa:	9e ef       	ldi	r25, 0xFE	; 254
    17ac:	a9 12       	cpse	r10, r25
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <strtod+0x144>
    17b0:	13 fd       	sbrc	r17, 3
    17b2:	40 c0       	rjmp	.+128    	; 0x1834 <strtod+0x1b4>
    17b4:	18 60       	ori	r17, 0x08	; 8
    17b6:	b1 2e       	mov	r11, r17
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	e8 1a       	sub	r14, r24
    17bc:	f8 0a       	sbc	r15, r24
    17be:	00 81       	ld	r16, Z
    17c0:	1b 2d       	mov	r17, r11
    17c2:	c6 cf       	rjmp	.-116    	; 0x1750 <strtod+0xd0>
    17c4:	80 2f       	mov	r24, r16
    17c6:	8f 7d       	andi	r24, 0xDF	; 223
    17c8:	85 34       	cpi	r24, 0x45	; 69
    17ca:	a1 f5       	brne	.+104    	; 0x1834 <strtod+0x1b4>
    17cc:	80 81       	ld	r24, Z
    17ce:	8d 32       	cpi	r24, 0x2D	; 45
    17d0:	11 f4       	brne	.+4      	; 0x17d6 <strtod+0x156>
    17d2:	10 61       	ori	r17, 0x10	; 16
    17d4:	06 c0       	rjmp	.+12     	; 0x17e2 <strtod+0x162>
    17d6:	8b 32       	cpi	r24, 0x2B	; 43
    17d8:	21 f0       	breq	.+8      	; 0x17e2 <strtod+0x162>
    17da:	31 96       	adiw	r30, 0x01	; 1
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <strtod+0x16a>
    17e2:	81 81       	ldd	r24, Z+1	; 0x01
    17e4:	32 96       	adiw	r30, 0x02	; 2
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	80 53       	subi	r24, 0x30	; 48
    17ec:	8a 30       	cpi	r24, 0x0A	; 10
    17ee:	18 f0       	brcs	.+6      	; 0x17f6 <strtod+0x176>
    17f0:	e6 1b       	sub	r30, r22
    17f2:	f7 0b       	sbc	r31, r23
    17f4:	1f c0       	rjmp	.+62     	; 0x1834 <strtod+0x1b4>
    17f6:	60 e0       	ldi	r22, 0x00	; 0
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	60 38       	cpi	r22, 0x80	; 128
    17fc:	9c e0       	ldi	r25, 0x0C	; 12
    17fe:	79 07       	cpc	r23, r25
    1800:	5c f4       	brge	.+22     	; 0x1818 <strtod+0x198>
    1802:	db 01       	movw	r26, r22
    1804:	aa 0f       	add	r26, r26
    1806:	bb 1f       	adc	r27, r27
    1808:	aa 0f       	add	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	6a 0f       	add	r22, r26
    180e:	7b 1f       	adc	r23, r27
    1810:	66 0f       	add	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	68 0f       	add	r22, r24
    1816:	71 1d       	adc	r23, r1
    1818:	31 96       	adiw	r30, 0x01	; 1
    181a:	df 01       	movw	r26, r30
    181c:	11 97       	sbiw	r26, 0x01	; 1
    181e:	8c 91       	ld	r24, X
    1820:	80 53       	subi	r24, 0x30	; 48
    1822:	8a 30       	cpi	r24, 0x0A	; 10
    1824:	50 f3       	brcs	.-44     	; 0x17fa <strtod+0x17a>
    1826:	14 ff       	sbrs	r17, 4
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <strtod+0x1b0>
    182a:	71 95       	neg	r23
    182c:	61 95       	neg	r22
    182e:	71 09       	sbc	r23, r1
    1830:	c6 0f       	add	r28, r22
    1832:	d7 1f       	adc	r29, r23
    1834:	11 ff       	sbrs	r17, 1
    1836:	08 c0       	rjmp	.+16     	; 0x1848 <strtod+0x1c8>
    1838:	c1 14       	cp	r12, r1
    183a:	d1 04       	cpc	r13, r1
    183c:	29 f0       	breq	.+10     	; 0x1848 <strtod+0x1c8>
    183e:	cf 01       	movw	r24, r30
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f6 01       	movw	r30, r12
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
    1848:	ca 01       	movw	r24, r20
    184a:	b9 01       	movw	r22, r18
    184c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__floatunsisf>
    1850:	21 2f       	mov	r18, r17
    1852:	23 70       	andi	r18, 0x03	; 3
    1854:	23 30       	cpi	r18, 0x03	; 3
    1856:	19 f0       	breq	.+6      	; 0x185e <strtod+0x1de>
    1858:	4b 01       	movw	r8, r22
    185a:	5c 01       	movw	r10, r24
    185c:	06 c0       	rjmp	.+12     	; 0x186a <strtod+0x1ea>
    185e:	4b 01       	movw	r8, r22
    1860:	5c 01       	movw	r10, r24
    1862:	b7 fa       	bst	r11, 7
    1864:	b0 94       	com	r11
    1866:	b7 f8       	bld	r11, 7
    1868:	b0 94       	com	r11
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	a9 01       	movw	r20, r18
    1870:	c5 01       	movw	r24, r10
    1872:	b4 01       	movw	r22, r8
    1874:	0e 94 af 0c 	call	0x195e	; 0x195e <__cmpsf2>
    1878:	88 23       	and	r24, r24
    187a:	09 f4       	brne	.+2      	; 0x187e <strtod+0x1fe>
    187c:	3e c0       	rjmp	.+124    	; 0x18fa <strtod+0x27a>
    187e:	d7 ff       	sbrs	r29, 7
    1880:	06 c0       	rjmp	.+12     	; 0x188e <strtod+0x20e>
    1882:	d1 95       	neg	r29
    1884:	c1 95       	neg	r28
    1886:	d1 09       	sbc	r29, r1
    1888:	05 e7       	ldi	r16, 0x75	; 117
    188a:	11 e0       	ldi	r17, 0x01	; 1
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <strtod+0x212>
    188e:	0d e8       	ldi	r16, 0x8D	; 141
    1890:	11 e0       	ldi	r17, 0x01	; 1
    1892:	68 01       	movw	r12, r16
    1894:	f8 e1       	ldi	r31, 0x18	; 24
    1896:	cf 1a       	sub	r12, r31
    1898:	d1 08       	sbc	r13, r1
    189a:	90 e2       	ldi	r25, 0x20	; 32
    189c:	e9 2e       	mov	r14, r25
    189e:	f1 2c       	mov	r15, r1
    18a0:	ce 15       	cp	r28, r14
    18a2:	df 05       	cpc	r29, r15
    18a4:	74 f0       	brlt	.+28     	; 0x18c2 <strtod+0x242>
    18a6:	f8 01       	movw	r30, r16
    18a8:	25 91       	lpm	r18, Z+
    18aa:	35 91       	lpm	r19, Z+
    18ac:	45 91       	lpm	r20, Z+
    18ae:	54 91       	lpm	r21, Z
    18b0:	c5 01       	movw	r24, r10
    18b2:	b4 01       	movw	r22, r8
    18b4:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <__mulsf3>
    18b8:	4b 01       	movw	r8, r22
    18ba:	5c 01       	movw	r10, r24
    18bc:	ce 19       	sub	r28, r14
    18be:	df 09       	sbc	r29, r15
    18c0:	ef cf       	rjmp	.-34     	; 0x18a0 <strtod+0x220>
    18c2:	04 50       	subi	r16, 0x04	; 4
    18c4:	11 09       	sbc	r17, r1
    18c6:	f5 94       	asr	r15
    18c8:	e7 94       	ror	r14
    18ca:	0c 15       	cp	r16, r12
    18cc:	1d 05       	cpc	r17, r13
    18ce:	41 f7       	brne	.-48     	; 0x18a0 <strtod+0x220>
    18d0:	8a 2d       	mov	r24, r10
    18d2:	88 0f       	add	r24, r24
    18d4:	8b 2d       	mov	r24, r11
    18d6:	88 1f       	adc	r24, r24
    18d8:	8f 3f       	cpi	r24, 0xFF	; 255
    18da:	49 f0       	breq	.+18     	; 0x18ee <strtod+0x26e>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	c5 01       	movw	r24, r10
    18e4:	b4 01       	movw	r22, r8
    18e6:	0e 94 af 0c 	call	0x195e	; 0x195e <__cmpsf2>
    18ea:	81 11       	cpse	r24, r1
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <strtod+0x27a>
    18ee:	82 e2       	ldi	r24, 0x22	; 34
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <errno+0x1>
    18f6:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <errno>
    18fa:	c5 01       	movw	r24, r10
    18fc:	b4 01       	movw	r22, r8
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <strtod+0x292>
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	80 e8       	ldi	r24, 0x80	; 128
    1906:	9f ef       	ldi	r25, 0xFF	; 255
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <strtod+0x292>
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	80 ec       	ldi	r24, 0xC0	; 192
    1910:	9f e7       	ldi	r25, 0x7F	; 127
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	ec e0       	ldi	r30, 0x0C	; 12
    1918:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__epilogue_restores__+0xc>

0000191c <isspace>:
    191c:	91 11       	cpse	r25, r1
    191e:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__ctype_isfalse>
    1922:	80 32       	cpi	r24, 0x20	; 32
    1924:	19 f0       	breq	.+6      	; 0x192c <isspace+0x10>
    1926:	89 50       	subi	r24, 0x09	; 9
    1928:	85 50       	subi	r24, 0x05	; 5
    192a:	c8 f7       	brcc	.-14     	; 0x191e <isspace+0x2>
    192c:	08 95       	ret

0000192e <strncasecmp_P>:
    192e:	fb 01       	movw	r30, r22
    1930:	dc 01       	movw	r26, r24
    1932:	41 50       	subi	r20, 0x01	; 1
    1934:	50 40       	sbci	r21, 0x00	; 0
    1936:	88 f0       	brcs	.+34     	; 0x195a <strncasecmp_P+0x2c>
    1938:	8d 91       	ld	r24, X+
    193a:	81 34       	cpi	r24, 0x41	; 65
    193c:	1c f0       	brlt	.+6      	; 0x1944 <strncasecmp_P+0x16>
    193e:	8b 35       	cpi	r24, 0x5B	; 91
    1940:	0c f4       	brge	.+2      	; 0x1944 <strncasecmp_P+0x16>
    1942:	80 5e       	subi	r24, 0xE0	; 224
    1944:	65 91       	lpm	r22, Z+
    1946:	61 34       	cpi	r22, 0x41	; 65
    1948:	1c f0       	brlt	.+6      	; 0x1950 <strncasecmp_P+0x22>
    194a:	6b 35       	cpi	r22, 0x5B	; 91
    194c:	0c f4       	brge	.+2      	; 0x1950 <strncasecmp_P+0x22>
    194e:	60 5e       	subi	r22, 0xE0	; 224
    1950:	86 1b       	sub	r24, r22
    1952:	61 11       	cpse	r22, r1
    1954:	71 f3       	breq	.-36     	; 0x1932 <strncasecmp_P+0x4>
    1956:	99 0b       	sbc	r25, r25
    1958:	08 95       	ret
    195a:	88 1b       	sub	r24, r24
    195c:	fc cf       	rjmp	.-8      	; 0x1956 <strncasecmp_P+0x28>

0000195e <__cmpsf2>:
    195e:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__fp_cmp>
    1962:	08 f4       	brcc	.+2      	; 0x1966 <__cmpsf2+0x8>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	08 95       	ret

00001968 <__floatunsisf>:
    1968:	e8 94       	clt
    196a:	09 c0       	rjmp	.+18     	; 0x197e <__floatsisf+0x12>

0000196c <__floatsisf>:
    196c:	97 fb       	bst	r25, 7
    196e:	3e f4       	brtc	.+14     	; 0x197e <__floatsisf+0x12>
    1970:	90 95       	com	r25
    1972:	80 95       	com	r24
    1974:	70 95       	com	r23
    1976:	61 95       	neg	r22
    1978:	7f 4f       	sbci	r23, 0xFF	; 255
    197a:	8f 4f       	sbci	r24, 0xFF	; 255
    197c:	9f 4f       	sbci	r25, 0xFF	; 255
    197e:	99 23       	and	r25, r25
    1980:	a9 f0       	breq	.+42     	; 0x19ac <__floatsisf+0x40>
    1982:	f9 2f       	mov	r31, r25
    1984:	96 e9       	ldi	r25, 0x96	; 150
    1986:	bb 27       	eor	r27, r27
    1988:	93 95       	inc	r25
    198a:	f6 95       	lsr	r31
    198c:	87 95       	ror	r24
    198e:	77 95       	ror	r23
    1990:	67 95       	ror	r22
    1992:	b7 95       	ror	r27
    1994:	f1 11       	cpse	r31, r1
    1996:	f8 cf       	rjmp	.-16     	; 0x1988 <__floatsisf+0x1c>
    1998:	fa f4       	brpl	.+62     	; 0x19d8 <__floatsisf+0x6c>
    199a:	bb 0f       	add	r27, r27
    199c:	11 f4       	brne	.+4      	; 0x19a2 <__floatsisf+0x36>
    199e:	60 ff       	sbrs	r22, 0
    19a0:	1b c0       	rjmp	.+54     	; 0x19d8 <__floatsisf+0x6c>
    19a2:	6f 5f       	subi	r22, 0xFF	; 255
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	8f 4f       	sbci	r24, 0xFF	; 255
    19a8:	9f 4f       	sbci	r25, 0xFF	; 255
    19aa:	16 c0       	rjmp	.+44     	; 0x19d8 <__floatsisf+0x6c>
    19ac:	88 23       	and	r24, r24
    19ae:	11 f0       	breq	.+4      	; 0x19b4 <__floatsisf+0x48>
    19b0:	96 e9       	ldi	r25, 0x96	; 150
    19b2:	11 c0       	rjmp	.+34     	; 0x19d6 <__floatsisf+0x6a>
    19b4:	77 23       	and	r23, r23
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <__floatsisf+0x54>
    19b8:	9e e8       	ldi	r25, 0x8E	; 142
    19ba:	87 2f       	mov	r24, r23
    19bc:	76 2f       	mov	r23, r22
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <__floatsisf+0x5e>
    19c0:	66 23       	and	r22, r22
    19c2:	71 f0       	breq	.+28     	; 0x19e0 <__floatsisf+0x74>
    19c4:	96 e8       	ldi	r25, 0x86	; 134
    19c6:	86 2f       	mov	r24, r22
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	2a f0       	brmi	.+10     	; 0x19d8 <__floatsisf+0x6c>
    19ce:	9a 95       	dec	r25
    19d0:	66 0f       	add	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	da f7       	brpl	.-10     	; 0x19ce <__floatsisf+0x62>
    19d8:	88 0f       	add	r24, r24
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	97 f9       	bld	r25, 7
    19e0:	08 95       	ret

000019e2 <__fp_cmp>:
    19e2:	99 0f       	add	r25, r25
    19e4:	00 08       	sbc	r0, r0
    19e6:	55 0f       	add	r21, r21
    19e8:	aa 0b       	sbc	r26, r26
    19ea:	e0 e8       	ldi	r30, 0x80	; 128
    19ec:	fe ef       	ldi	r31, 0xFE	; 254
    19ee:	16 16       	cp	r1, r22
    19f0:	17 06       	cpc	r1, r23
    19f2:	e8 07       	cpc	r30, r24
    19f4:	f9 07       	cpc	r31, r25
    19f6:	c0 f0       	brcs	.+48     	; 0x1a28 <__fp_cmp+0x46>
    19f8:	12 16       	cp	r1, r18
    19fa:	13 06       	cpc	r1, r19
    19fc:	e4 07       	cpc	r30, r20
    19fe:	f5 07       	cpc	r31, r21
    1a00:	98 f0       	brcs	.+38     	; 0x1a28 <__fp_cmp+0x46>
    1a02:	62 1b       	sub	r22, r18
    1a04:	73 0b       	sbc	r23, r19
    1a06:	84 0b       	sbc	r24, r20
    1a08:	95 0b       	sbc	r25, r21
    1a0a:	39 f4       	brne	.+14     	; 0x1a1a <__fp_cmp+0x38>
    1a0c:	0a 26       	eor	r0, r26
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <__fp_cmp+0x46>
    1a10:	23 2b       	or	r18, r19
    1a12:	24 2b       	or	r18, r20
    1a14:	25 2b       	or	r18, r21
    1a16:	21 f4       	brne	.+8      	; 0x1a20 <__fp_cmp+0x3e>
    1a18:	08 95       	ret
    1a1a:	0a 26       	eor	r0, r26
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <__fp_cmp+0x3e>
    1a1e:	a1 40       	sbci	r26, 0x01	; 1
    1a20:	a6 95       	lsr	r26
    1a22:	8f ef       	ldi	r24, 0xFF	; 255
    1a24:	81 1d       	adc	r24, r1
    1a26:	81 1d       	adc	r24, r1
    1a28:	08 95       	ret

00001a2a <__mulsf3>:
    1a2a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__mulsf3x>
    1a2e:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__fp_round>
    1a32:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fp_pscA>
    1a36:	38 f0       	brcs	.+14     	; 0x1a46 <__mulsf3+0x1c>
    1a38:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fp_pscB>
    1a3c:	20 f0       	brcs	.+8      	; 0x1a46 <__mulsf3+0x1c>
    1a3e:	95 23       	and	r25, r21
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <__mulsf3+0x1c>
    1a42:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__fp_inf>
    1a46:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__fp_nan>
    1a4a:	11 24       	eor	r1, r1
    1a4c:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_szero>

00001a50 <__mulsf3x>:
    1a50:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <__fp_split3>
    1a54:	70 f3       	brcs	.-36     	; 0x1a32 <__mulsf3+0x8>

00001a56 <__mulsf3_pse>:
    1a56:	95 9f       	mul	r25, r21
    1a58:	c1 f3       	breq	.-16     	; 0x1a4a <__mulsf3+0x20>
    1a5a:	95 0f       	add	r25, r21
    1a5c:	50 e0       	ldi	r21, 0x00	; 0
    1a5e:	55 1f       	adc	r21, r21
    1a60:	62 9f       	mul	r22, r18
    1a62:	f0 01       	movw	r30, r0
    1a64:	72 9f       	mul	r23, r18
    1a66:	bb 27       	eor	r27, r27
    1a68:	f0 0d       	add	r31, r0
    1a6a:	b1 1d       	adc	r27, r1
    1a6c:	63 9f       	mul	r22, r19
    1a6e:	aa 27       	eor	r26, r26
    1a70:	f0 0d       	add	r31, r0
    1a72:	b1 1d       	adc	r27, r1
    1a74:	aa 1f       	adc	r26, r26
    1a76:	64 9f       	mul	r22, r20
    1a78:	66 27       	eor	r22, r22
    1a7a:	b0 0d       	add	r27, r0
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	66 1f       	adc	r22, r22
    1a80:	82 9f       	mul	r24, r18
    1a82:	22 27       	eor	r18, r18
    1a84:	b0 0d       	add	r27, r0
    1a86:	a1 1d       	adc	r26, r1
    1a88:	62 1f       	adc	r22, r18
    1a8a:	73 9f       	mul	r23, r19
    1a8c:	b0 0d       	add	r27, r0
    1a8e:	a1 1d       	adc	r26, r1
    1a90:	62 1f       	adc	r22, r18
    1a92:	83 9f       	mul	r24, r19
    1a94:	a0 0d       	add	r26, r0
    1a96:	61 1d       	adc	r22, r1
    1a98:	22 1f       	adc	r18, r18
    1a9a:	74 9f       	mul	r23, r20
    1a9c:	33 27       	eor	r19, r19
    1a9e:	a0 0d       	add	r26, r0
    1aa0:	61 1d       	adc	r22, r1
    1aa2:	23 1f       	adc	r18, r19
    1aa4:	84 9f       	mul	r24, r20
    1aa6:	60 0d       	add	r22, r0
    1aa8:	21 1d       	adc	r18, r1
    1aaa:	82 2f       	mov	r24, r18
    1aac:	76 2f       	mov	r23, r22
    1aae:	6a 2f       	mov	r22, r26
    1ab0:	11 24       	eor	r1, r1
    1ab2:	9f 57       	subi	r25, 0x7F	; 127
    1ab4:	50 40       	sbci	r21, 0x00	; 0
    1ab6:	9a f0       	brmi	.+38     	; 0x1ade <__mulsf3_pse+0x88>
    1ab8:	f1 f0       	breq	.+60     	; 0x1af6 <__mulsf3_pse+0xa0>
    1aba:	88 23       	and	r24, r24
    1abc:	4a f0       	brmi	.+18     	; 0x1ad0 <__mulsf3_pse+0x7a>
    1abe:	ee 0f       	add	r30, r30
    1ac0:	ff 1f       	adc	r31, r31
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	66 1f       	adc	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	91 50       	subi	r25, 0x01	; 1
    1acc:	50 40       	sbci	r21, 0x00	; 0
    1ace:	a9 f7       	brne	.-22     	; 0x1aba <__mulsf3_pse+0x64>
    1ad0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ad2:	51 05       	cpc	r21, r1
    1ad4:	80 f0       	brcs	.+32     	; 0x1af6 <__mulsf3_pse+0xa0>
    1ad6:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <__fp_inf>
    1ada:	0c 94 d0 0d 	jmp	0x1ba0	; 0x1ba0 <__fp_szero>
    1ade:	5f 3f       	cpi	r21, 0xFF	; 255
    1ae0:	e4 f3       	brlt	.-8      	; 0x1ada <__mulsf3_pse+0x84>
    1ae2:	98 3e       	cpi	r25, 0xE8	; 232
    1ae4:	d4 f3       	brlt	.-12     	; 0x1ada <__mulsf3_pse+0x84>
    1ae6:	86 95       	lsr	r24
    1ae8:	77 95       	ror	r23
    1aea:	67 95       	ror	r22
    1aec:	b7 95       	ror	r27
    1aee:	f7 95       	ror	r31
    1af0:	e7 95       	ror	r30
    1af2:	9f 5f       	subi	r25, 0xFF	; 255
    1af4:	c1 f7       	brne	.-16     	; 0x1ae6 <__mulsf3_pse+0x90>
    1af6:	fe 2b       	or	r31, r30
    1af8:	88 0f       	add	r24, r24
    1afa:	91 1d       	adc	r25, r1
    1afc:	96 95       	lsr	r25
    1afe:	87 95       	ror	r24
    1b00:	97 f9       	bld	r25, 7
    1b02:	08 95       	ret

00001b04 <__ctype_isfalse>:
    1b04:	99 27       	eor	r25, r25
    1b06:	88 27       	eor	r24, r24

00001b08 <__ctype_istrue>:
    1b08:	08 95       	ret

00001b0a <__fp_inf>:
    1b0a:	97 f9       	bld	r25, 7
    1b0c:	9f 67       	ori	r25, 0x7F	; 127
    1b0e:	80 e8       	ldi	r24, 0x80	; 128
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	08 95       	ret

00001b16 <__fp_nan>:
    1b16:	9f ef       	ldi	r25, 0xFF	; 255
    1b18:	80 ec       	ldi	r24, 0xC0	; 192
    1b1a:	08 95       	ret

00001b1c <__fp_pscA>:
    1b1c:	00 24       	eor	r0, r0
    1b1e:	0a 94       	dec	r0
    1b20:	16 16       	cp	r1, r22
    1b22:	17 06       	cpc	r1, r23
    1b24:	18 06       	cpc	r1, r24
    1b26:	09 06       	cpc	r0, r25
    1b28:	08 95       	ret

00001b2a <__fp_pscB>:
    1b2a:	00 24       	eor	r0, r0
    1b2c:	0a 94       	dec	r0
    1b2e:	12 16       	cp	r1, r18
    1b30:	13 06       	cpc	r1, r19
    1b32:	14 06       	cpc	r1, r20
    1b34:	05 06       	cpc	r0, r21
    1b36:	08 95       	ret

00001b38 <__fp_round>:
    1b38:	09 2e       	mov	r0, r25
    1b3a:	03 94       	inc	r0
    1b3c:	00 0c       	add	r0, r0
    1b3e:	11 f4       	brne	.+4      	; 0x1b44 <__fp_round+0xc>
    1b40:	88 23       	and	r24, r24
    1b42:	52 f0       	brmi	.+20     	; 0x1b58 <__fp_round+0x20>
    1b44:	bb 0f       	add	r27, r27
    1b46:	40 f4       	brcc	.+16     	; 0x1b58 <__fp_round+0x20>
    1b48:	bf 2b       	or	r27, r31
    1b4a:	11 f4       	brne	.+4      	; 0x1b50 <__fp_round+0x18>
    1b4c:	60 ff       	sbrs	r22, 0
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <__fp_round+0x20>
    1b50:	6f 5f       	subi	r22, 0xFF	; 255
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	8f 4f       	sbci	r24, 0xFF	; 255
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	08 95       	ret

00001b5a <__fp_split3>:
    1b5a:	57 fd       	sbrc	r21, 7
    1b5c:	90 58       	subi	r25, 0x80	; 128
    1b5e:	44 0f       	add	r20, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	59 f0       	breq	.+22     	; 0x1b7a <__fp_splitA+0x10>
    1b64:	5f 3f       	cpi	r21, 0xFF	; 255
    1b66:	71 f0       	breq	.+28     	; 0x1b84 <__fp_splitA+0x1a>
    1b68:	47 95       	ror	r20

00001b6a <__fp_splitA>:
    1b6a:	88 0f       	add	r24, r24
    1b6c:	97 fb       	bst	r25, 7
    1b6e:	99 1f       	adc	r25, r25
    1b70:	61 f0       	breq	.+24     	; 0x1b8a <__fp_splitA+0x20>
    1b72:	9f 3f       	cpi	r25, 0xFF	; 255
    1b74:	79 f0       	breq	.+30     	; 0x1b94 <__fp_splitA+0x2a>
    1b76:	87 95       	ror	r24
    1b78:	08 95       	ret
    1b7a:	12 16       	cp	r1, r18
    1b7c:	13 06       	cpc	r1, r19
    1b7e:	14 06       	cpc	r1, r20
    1b80:	55 1f       	adc	r21, r21
    1b82:	f2 cf       	rjmp	.-28     	; 0x1b68 <__fp_split3+0xe>
    1b84:	46 95       	lsr	r20
    1b86:	f1 df       	rcall	.-30     	; 0x1b6a <__fp_splitA>
    1b88:	08 c0       	rjmp	.+16     	; 0x1b9a <__fp_splitA+0x30>
    1b8a:	16 16       	cp	r1, r22
    1b8c:	17 06       	cpc	r1, r23
    1b8e:	18 06       	cpc	r1, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	f1 cf       	rjmp	.-30     	; 0x1b76 <__fp_splitA+0xc>
    1b94:	86 95       	lsr	r24
    1b96:	71 05       	cpc	r23, r1
    1b98:	61 05       	cpc	r22, r1
    1b9a:	08 94       	sec
    1b9c:	08 95       	ret

00001b9e <__fp_zero>:
    1b9e:	e8 94       	clt

00001ba0 <__fp_szero>:
    1ba0:	bb 27       	eor	r27, r27
    1ba2:	66 27       	eor	r22, r22
    1ba4:	77 27       	eor	r23, r23
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	97 f9       	bld	r25, 7
    1baa:	08 95       	ret

00001bac <__muluhisi3>:
    1bac:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <__umulhisi3>
    1bb0:	a5 9f       	mul	r26, r21
    1bb2:	90 0d       	add	r25, r0
    1bb4:	b4 9f       	mul	r27, r20
    1bb6:	90 0d       	add	r25, r0
    1bb8:	a4 9f       	mul	r26, r20
    1bba:	80 0d       	add	r24, r0
    1bbc:	91 1d       	adc	r25, r1
    1bbe:	11 24       	eor	r1, r1
    1bc0:	08 95       	ret

00001bc2 <__umulhisi3>:
    1bc2:	a2 9f       	mul	r26, r18
    1bc4:	b0 01       	movw	r22, r0
    1bc6:	b3 9f       	mul	r27, r19
    1bc8:	c0 01       	movw	r24, r0
    1bca:	a3 9f       	mul	r26, r19
    1bcc:	70 0d       	add	r23, r0
    1bce:	81 1d       	adc	r24, r1
    1bd0:	11 24       	eor	r1, r1
    1bd2:	91 1d       	adc	r25, r1
    1bd4:	b2 9f       	mul	r27, r18
    1bd6:	70 0d       	add	r23, r0
    1bd8:	81 1d       	adc	r24, r1
    1bda:	11 24       	eor	r1, r1
    1bdc:	91 1d       	adc	r25, r1
    1bde:	08 95       	ret

00001be0 <_exit>:
    1be0:	f8 94       	cli

00001be2 <__stop_program>:
    1be2:	ff cf       	rjmp	.-2      	; 0x1be2 <__stop_program>
